From matze at braunis.de  Sat Apr  1 15:15:33 2006
From: matze at braunis.de (Matze Braun)
Date: Sat, 01 Apr 2006 15:15:33 +0200
Subject: [Supertux-devel] Development Focus
Message-ID: <1143897333.14479.10.camel@taylor.local>

Develpoment for milestone2 has been very varying so far. We collected
lots of ideas and are still flooded every day with new ideas from
ourself and others. The engine has gone a major overhaul and we
implemented lots of new features. We have new music new graphics new
tilesets, better tools, a scripting language.

And still looking at Milestone2 we're still far away from it. I think
part of the problem is that development isn't focused enough. We add
random new features everywhere but lack a clear goal of what we need for
milestone2.


I think we reached a point where we have enough new features and stuff
collected for milestone2, it's time to work specifically towards this
release. To achieve this we'll start several development cycles. A cycle
is a set of feature that somehow relate to each other and should be
attacked as a bunch. Once we have a cycle completed we can move to the
next one, but should have everything in the cycle ready for milestone2.
So we'll start with Cycle1:
http://supertux.berlios.de/wiki/index.php/Cycle1

Goal:
The goal is to get world1 polished up and integrated to fit Milestone2.

Tasks:

* Make intro cutscene play when the user enters world1 (no savegame yet)
  * Change worldmap to have alternative ways and shortcuts. It should be
    possible to beat worldmap 1 with 7 levels (So users don't have to
    play all 26 levels again to get to world2). All the other levels
    should stay but be on alternative/optional paths
  * At the end of the fortress we need a cutscene to the yeti
  * the yeti has to work perfectly
  * When the yeti is defeated play a cutscene
  * Open way to slide on the worldmap and make it work
  * Make sure all old maps still work

So I'd like everyone to concentrate on these things so that we can
hopefully see some real progress soon! Seeing all the new pieces come
together should give the needed boost to move towards the next release.

Greetings,
	Matze




From wansti at gmx.de  Thu Apr  6 09:49:03 2006
From: wansti at gmx.de (Marek M.)
Date: Thu, 06 Apr 2006 09:49:03 +0200
Subject: [Supertux-devel] Re: [Supertux-commit] r3248 - in trunk/supertux: data/images/engine
 src
In-Reply-To: <200604060146.k361kixg000930@sheep.berlios.de>
References: <200604060146.k361kixg000930@sheep.berlios.de>
Message-ID: <4434C7EF.8070108@gmx.de>

A console?! Cooooooooooool! :-D
Gotta try it as soon as I get home from work.
Finally a good place to move the cheats to. :-)

    Marek

sommer at BerliOS wrote:

>Author: sommer
>Date: 2006-04-06 03:46:31 +0200 (Thu, 06 Apr 2006)
>New Revision: 3248
>
>Added:
>   trunk/supertux/data/images/engine/console.jpg
>   trunk/supertux/src/console.cpp
>   trunk/supertux/src/console.hpp
>Modified:
>   trunk/supertux/src/game_session.cpp
>   trunk/supertux/src/game_session.hpp
>   trunk/supertux/src/msg.hpp
>   trunk/supertux/src/title.cpp
>   trunk/supertux/src/worldmap.cpp
>   trunk/supertux/src/worldmap.hpp
>Log:
>Simple Console
>
>
>  
>



From rflegel at gmail.com  Thu Apr  6 22:14:55 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Thu, 6 Apr 2006 14:14:55 -0600
Subject: [Supertux-devel] Moving graphic and audio source files
Message-ID: <5a5496320604061314q2bbab66ey5088760f0ce33ecd@mail.gmail.com>

Hi there,

I'm wondering if anyone has a problem with moving all graphic and
audio source files (eg, .xcf and .rg files) to trunk/media in the svn
repo. I'm particularily looking for input from those that work with
graphics and sound.

The advantages of moving these files to trunk/media is that it would
make the trunk/supertux checkout 30+ MB smaller and trunk/media would
only have to be checked out by people interested in working with the
sound and graphics.

Thoughts? Opinions?

--
Ryan


From wansti at gmx.de  Fri Apr  7 10:12:19 2006
From: wansti at gmx.de (Marek M.)
Date: Fri, 07 Apr 2006 10:12:19 +0200
Subject: [Supertux-devel] Moving graphic and audio source files
In-Reply-To: <5a5496320604061314q2bbab66ey5088760f0ce33ecd@mail.gmail.com>
References: <5a5496320604061314q2bbab66ey5088760f0ce33ecd@mail.gmail.com>
Message-ID: <44361EE3.7050802@gmx.de>

Hi!
The source files should all be in the contrib/ directory (with the
exception of some xcf files that serve as placeholders for badguys and
other objects that still need to be animated), together with currently
unused data.
Moving the whole contrib directory out of the way (into trunk/contrib or
whatever) sounds okay to me.

    Marek

Ryan Flegel wrote:

>Hi there,
>
>I'm wondering if anyone has a problem with moving all graphic and
>audio source files (eg, .xcf and .rg files) to trunk/media in the svn
>repo. I'm particularily looking for input from those that work with
>graphics and sound.
>
>The advantages of moving these files to trunk/media is that it would
>make the trunk/supertux checkout 30+ MB smaller and trunk/media would
>only have to be checked out by people interested in working with the
>sound and graphics.
>
>Thoughts? Opinions?
>
>--
>Ryan
>_______________________________________________
>Supertux-devel mailing list
>Supertux-devel at lists.berlios.de
>http://lists.berlios.de/mailman/listinfo/supertux-devel
>  
>



From rflegel at gmail.com  Fri Apr  7 20:38:22 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Fri, 7 Apr 2006 12:38:22 -0600
Subject: [Supertux-devel] Moving graphic and audio source files
In-Reply-To: <44361EE3.7050802@gmx.de>
References: <5a5496320604061314q2bbab66ey5088760f0ce33ecd@mail.gmail.com>
	 <44361EE3.7050802@gmx.de>
Message-ID: <5a5496320604071138w21e6370fr50e37276f0de525a@mail.gmail.com>

Okay, the media files from contrib/ have been moved to trunk/media/.

If you want to work with the rosegarden or gimp source files then you
should checkout trunk/media:

svn checkout svn+ssh://developername at svn.berlios.de/svnroot/repos/supertux/trunk/media
supertux-media

This should cut down on the size of the main trunk/supertux branch by
about 30+ MB.

--
Ryan

On 4/7/06, Marek M. <wansti at gmx.de> wrote:
>
> Hi!
> The source files should all be in the contrib/ directory (with the
> exception of some xcf files that serve as placeholders for badguys and
> other objects that still need to be animated), together with currently
> unused data.
> Moving the whole contrib directory out of the way (into trunk/contrib or
> whatever) sounds okay to me.
>
>     Marek
>
> Ryan Flegel wrote:
>
> >Hi there,
> >
> >I'm wondering if anyone has a problem with moving all graphic and
> >audio source files (eg, .xcf and .rg files) to trunk/media in the svn
> >repo. I'm particularily looking for input from those that work with
> >graphics and sound.
> >
> >The advantages of moving these files to trunk/media is that it would
> >make the trunk/supertux checkout 30+ MB smaller and trunk/media would
> >only have to be checked out by people interested in working with the
> >sound and graphics.
> >
> >Thoughts? Opinions?
> >
> >--
> >Ryan
> >_______________________________________________
> >Supertux-devel mailing list
> >Supertux-devel at lists.berlios.de
> >http://lists.berlios.de/mailman/listinfo/supertux-devel
> >
> >
>
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>


From allen at a-king.us  Sat Apr  8 17:17:35 2006
From: allen at a-king.us (Allen King)
Date: Sat, 08 Apr 2006 11:17:35 -0400
Subject: [Supertux-devel] "Remote Control" for Supertux
Message-ID: <4437D40F.6000206@a-king.us>

Folks of Supertux,

    As part of a machine learning testbed, I want to add a "remote 
control" API to Supertux.  This will allow another program sitting as a 
client on a port to Supertux to supply button information for tux and 
receive back which icons are visible on the screen and where.  Because 
the client program may be slow, it will have to have control the advance 
of Supertux time, and thus in this mode, Supertux will not be "real 
time".  (Perhaps it might even be faster!^)  Repeatability of runs is 
also desirable, so control of random number seeds must be gained.

   The following questions to your group are on my mind:

   1. What work is ongoing that would help me with this effort?  I
      noticed a post about a console.
   2. What is the right forum to pick people's brains, with further
      design questions? I notice a lot of game-play programming activity
      in http://developer.berlios.de/mail/?group_id=3467 , but little
      with the "engine" part.  Are there specific people who specialize
      in the "engine" parts of Supertux?  Who are they?
   3. What would it take to have the "remote control" operation, given
      it works and is well structured, be incorporated into the Supertux
      codebase? I would supply documentation of the API, and a minimum
      diagnostic demo as an example of the API's use.   Do I just submit
      a patch and pray, are there "powers to be" that nod and give me
      svn access, or what? 
   4.  From the standpoint of the Supertux community, what is the
      desirability of having a "remote control" ability incorporated
      into the mainline Supertux code base?  I see the following
      advantages: a) automated testing of Supertux, b) increasing the
      Supertux user community with people, like myself, interested in
      machine learning, and c) "it's easy, why not!"

   So I've actually been fiddling with a copy of the supertux source (an 
svn checkout on 4/6/06).  So far I have built a PortServerController 
subclass of Controller, instantiated it in supertux in a very simple way 
(alongside of JoystickKeyboardController), which talks via ports to a 
lightweight client.   So here is my plan, which I'd like to pick your 
collective brains about:

   1. The plan is to have my PortServerController register using
      tux.set_controller, and buttons should "just work".
   2. I was planning on adding two class variable to game_session, one
      to fix the increments of time simulated to a fixed value, and the
      other to stop simulation to wait for more API commands. The plan
      is to add where needed (bracketed by if statements) the code for
      non-real time (port) operation.  These notions are currently
      "fuzzy", I suspect there are better ones.
   3. How to gather object info to send back is a few days out for me. 
      Thought was to add a statusString serialization method to some of
      the game object classes, and just package up the results.  I am
      interested in a block name/UID which will be stable over
      revisions, perhaps some basic properties (like solid, background,
      sprite (for tux, bad guys, and coinage), etc).  Also the game
      status line.
   4. The following is last: modifications for random number generator
      repeatability would be as follows:  In normal operation, the
      random seed (probably selected by time()) would printed out on a
      console.  If that run was interesting, it would be possible to
      force that seed with config code.  Are any efforts to this effect
      already in the code?
   5. Does this plan look sane?  Are there other ways to accomplish my
      goals which come to mind?  Are there ongoing changes to the
      "engine" which I sould know about?


Hope that you can guide my effort, and that my work can contribute to 
Supertux.  All opinions, thoughts, and help are welcome.

    Allen King

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060408/8c7c4273/attachment.html>

From matze at braunis.de  Sun Apr  9 15:27:39 2006
From: matze at braunis.de (Matze Braun)
Date: Sun, 09 Apr 2006 15:27:39 +0200
Subject: [Supertux-devel] "Remote Control" for Supertux
In-Reply-To: <4437D40F.6000206@a-king.us>
References: <4437D40F.6000206@a-king.us>
Message-ID: <1144589259.22029.24.camel@taylor.local>

Am Samstag, den 08.04.2006, 11:17 -0400 schrieb Allen King:
> Folks of Supertux,
> 
>     As part of a machine learning testbed, I want to add a "remote
> control" API to Supertux.  This will allow another program sitting as
> a client on a port to Supertux to supply button information for tux
> and receive back which icons are visible on the screen and where.
> Because the client program may be slow, it will have to have control
> the advance of Supertux time, and thus in this mode, Supertux will not
> be "real time".  (Perhaps it might even be faster!^)  Repeatability of
> runs is also desirable, so control of random number seeds must be
> gained.

In general the current development version should be suitable for your
tasks. As you probably don't depend on a finished and polished game, you
should just grab a svn version and use that.
> 
>    The following questions to your group are on my mind:
>      1. What work is ongoing that would help me with this effort?  I
>         noticed a post about a console.

The console is mainly a debugging tool to execute some commands from
inside the game and display warnings and errors to users.

>      1. What is the right forum to pick people's brains, with further
>         design questions? I notice a lot of game-play programming
>         activity in http://developer.berlios.de/mail/?group_id=3467 ,
>         but little with the "engine" part.  Are there specific people
>         who specialize in the "engine" parts of Supertux?  Who are
>         they? 

By far most activity around supertux happens in our irc channel
#supertux at irc.freenode.net and in our wiki at
http://supertux.berlios.de/wiki

>      1. What would it take to have the "remote control" operation,
>         given it works and is well structured, be incorporated into
>         the Supertux codebase? I would supply documentation of the
>         API, and a minimum diagnostic demo as an example of the API's
>         use.   Do I just submit a patch and pray, are there "powers to
>         be" that nod and give me svn access, or what?  
As already said, svn version already has such an API. We typically grant
svn access when someone has submitted some good patches and plans to do
further work on supertux. About develpoment/patching you should take a
look here:

http://supertux.berlios.de/wiki/index.php/SetupDev

http://supertux.berlios.de/wiki/index.php/Download/Subversion

>      1. From the standpoint of the Supertux community, what is the
>         desirability of having a "remote control" ability incorporated
>         into the mainline Supertux code base?  I see the following
>         advantages: a) automated testing of Supertux, b) increasing
>         the Supertux user community with people, like myself,
>         interested in machine learning, and c) "it's easy, why not!"
>    So I've actually been fiddling with a copy of the supertux source
> (an svn checkout on 4/6/06).  So far I have built a
> PortServerController subclass of Controller, instantiated it in
> supertux in a very simple way (alongside of
> JoystickKeyboardController), which talks via ports to a lightweight
> client.   So here is my plan, which I'd like to pick your collective
> brains about:

Of course we like to see other people using our code and having fun with
it. And I don't want to discourage you here. But in the main development
line this remote control seems total overkill and won't help the normal
players of the game.
So I'd say you better maintain this stuff as a fork/set of patches to
the game. I think the Controller API will stay like it is now in the
future, so you should have few risk that your stuff breaks.

>      1. The plan is to have my PortServerController register using
>         tux.set_controller, and buttons should "just work".
>      2. I was planning on adding two class variable to game_session,
>         one to fix the increments of time simulated to a fixed value,
>         and the other to stop simulation to wait for more API
>         commands. The plan is to add where needed (bracketed by if
>         statements) the code for non-real time (port) operation.
>         These notions are currently "fuzzy", I suspect there are
>         better ones.
The simulation is already advances in a fixed time. All the behaviour
and game logic runs in a logical framerate of 60fps (depending on your
machine fewer frames might actually get drawn). In the latest svn
version you can find that code in mainloop.cpp you should be able to
extend/hack mainloop.cpp to stop the simulation if that is needed.

>      1. How to gather object info to send back is a few days out for
>         me.  Thought was to add a statusString serialization method to
>         some of the game object classes, and just package up the
>         results.  I am interested in a block name/UID which will be
>         stable over revisions, perhaps some basic properties (like
>         solid, background, sprite (for tux, bad guys, and coinage),
>         etc).  Also the game status line.
well that's something we surely wouldn't like to see in the main
codebase (more bloat and more work for people who invent new object
types). At least additional fields/methods pushed into these classes
would be bad from our point of view. If you keep the code for this stuff
externally (you could dynamic_cast around and use hashmaps with the
objects to store additional metadata) then this is of course less
intrusive.

>      1. The following is last: modifications for random number
>         generator repeatability would be as follows:  In normal
>         operation, the random seed (probably selected by time()) would
>         printed out on a console.  If that run was interesting, it
>         would be possible to force that seed with config code.  Are
>         any efforts to this effect already in the code?
In general we try to keep the behaviour predictable and free of random
events that we can't really control. The only cases where randomness
really matters is that Dispenser badguy which has a random mode (which I
personally would rather see be removed). Making the randomness
controllable by having a global random number generator that is used
throughout supertux would also be important for record/playback of
demos. Patches would be apreciated ;-)

>      1. Does this plan look sane?  Are there other ways to accomplish
>         my goals which come to mind?  Are there ongoing changes to the
>         "engine" which I sould know about?
> 
> Hope that you can guide my effort, and that my work can contribute to
> Supertux.  All opinions, thoughts, and help are welcome.
Maybe it would be best if you try to catch me or someone of the others
on irc...

Greetings,
	Matze




From matze at braunis.de  Sun Apr  9 15:27:39 2006
From: matze at braunis.de (Matze Braun)
Date: Sun, 09 Apr 2006 15:27:39 +0200
Subject: [Supertux-devel] "Remote Control" for Supertux
In-Reply-To: <4437D40F.6000206@a-king.us>
References: <4437D40F.6000206@a-king.us>
Message-ID: <1144589259.22029.24.camel@taylor.local>

Am Samstag, den 08.04.2006, 11:17 -0400 schrieb Allen King:
> Folks of Supertux,
> 
>     As part of a machine learning testbed, I want to add a "remote
> control" API to Supertux.  This will allow another program sitting as
> a client on a port to Supertux to supply button information for tux
> and receive back which icons are visible on the screen and where.
> Because the client program may be slow, it will have to have control
> the advance of Supertux time, and thus in this mode, Supertux will not
> be "real time".  (Perhaps it might even be faster!^)  Repeatability of
> runs is also desirable, so control of random number seeds must be
> gained.

In general the current development version should be suitable for your
tasks. As you probably don't depend on a finished and polished game, you
should just grab a svn version and use that.
> 
>    The following questions to your group are on my mind:
>      1. What work is ongoing that would help me with this effort?  I
>         noticed a post about a console.

The console is mainly a debugging tool to execute some commands from
inside the game and display warnings and errors to users.

>      1. What is the right forum to pick people's brains, with further
>         design questions? I notice a lot of game-play programming
>         activity in http://developer.berlios.de/mail/?group_id=3467 ,
>         but little with the "engine" part.  Are there specific people
>         who specialize in the "engine" parts of Supertux?  Who are
>         they? 

By far most activity around supertux happens in our irc channel
#supertux at irc.freenode.net and in our wiki at
http://supertux.berlios.de/wiki

>      1. What would it take to have the "remote control" operation,
>         given it works and is well structured, be incorporated into
>         the Supertux codebase? I would supply documentation of the
>         API, and a minimum diagnostic demo as an example of the API's
>         use.   Do I just submit a patch and pray, are there "powers to
>         be" that nod and give me svn access, or what?  
As already said, svn version already has such an API. We typically grant
svn access when someone has submitted some good patches and plans to do
further work on supertux. About develpoment/patching you should take a
look here:

http://supertux.berlios.de/wiki/index.php/SetupDev

http://supertux.berlios.de/wiki/index.php/Download/Subversion

>      1. From the standpoint of the Supertux community, what is the
>         desirability of having a "remote control" ability incorporated
>         into the mainline Supertux code base?  I see the following
>         advantages: a) automated testing of Supertux, b) increasing
>         the Supertux user community with people, like myself,
>         interested in machine learning, and c) "it's easy, why not!"
>    So I've actually been fiddling with a copy of the supertux source
> (an svn checkout on 4/6/06).  So far I have built a
> PortServerController subclass of Controller, instantiated it in
> supertux in a very simple way (alongside of
> JoystickKeyboardController), which talks via ports to a lightweight
> client.   So here is my plan, which I'd like to pick your collective
> brains about:

Of course we like to see other people using our code and having fun with
it. And I don't want to discourage you here. But in the main development
line this remote control seems total overkill and won't help the normal
players of the game.
So I'd say you better maintain this stuff as a fork/set of patches to
the game. I think the Controller API will stay like it is now in the
future, so you should have few risk that your stuff breaks.

>      1. The plan is to have my PortServerController register using
>         tux.set_controller, and buttons should "just work".
>      2. I was planning on adding two class variable to game_session,
>         one to fix the increments of time simulated to a fixed value,
>         and the other to stop simulation to wait for more API
>         commands. The plan is to add where needed (bracketed by if
>         statements) the code for non-real time (port) operation.
>         These notions are currently "fuzzy", I suspect there are
>         better ones.
The simulation is already advances in a fixed time. All the behaviour
and game logic runs in a logical framerate of 60fps (depending on your
machine fewer frames might actually get drawn). In the latest svn
version you can find that code in mainloop.cpp you should be able to
extend/hack mainloop.cpp to stop the simulation if that is needed.

>      1. How to gather object info to send back is a few days out for
>         me.  Thought was to add a statusString serialization method to
>         some of the game object classes, and just package up the
>         results.  I am interested in a block name/UID which will be
>         stable over revisions, perhaps some basic properties (like
>         solid, background, sprite (for tux, bad guys, and coinage),
>         etc).  Also the game status line.
well that's something we surely wouldn't like to see in the main
codebase (more bloat and more work for people who invent new object
types). At least additional fields/methods pushed into these classes
would be bad from our point of view. If you keep the code for this stuff
externally (you could dynamic_cast around and use hashmaps with the
objects to store additional metadata) then this is of course less
intrusive.

>      1. The following is last: modifications for random number
>         generator repeatability would be as follows:  In normal
>         operation, the random seed (probably selected by time()) would
>         printed out on a console.  If that run was interesting, it
>         would be possible to force that seed with config code.  Are
>         any efforts to this effect already in the code?
In general we try to keep the behaviour predictable and free of random
events that we can't really control. The only cases where randomness
really matters is that Dispenser badguy which has a random mode (which I
personally would rather see be removed). Making the randomness
controllable by having a global random number generator that is used
throughout supertux would also be important for record/playback of
demos. Patches would be apreciated ;-)

>      1. Does this plan look sane?  Are there other ways to accomplish
>         my goals which come to mind?  Are there ongoing changes to the
>         "engine" which I sould know about?
> 
> Hope that you can guide my effort, and that my work can contribute to
> Supertux.  All opinions, thoughts, and help are welcome.
Maybe it would be best if you try to catch me or someone of the others
on irc...

Greetings,
	Matze




From urrakis at gmail.com  Sat Apr  8 22:11:59 2006
From: urrakis at gmail.com (Urrakis)
Date: Sat, 8 Apr 2006 22:11:59 +0200
Subject: [Supertux-devel] use your program
Message-ID: <5de9807a0604081311s753be6cck5af6d0ce9f3ef129@mail.gmail.com>

can i use your free supertux in my web for download?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060408/133e8536/attachment.html>

From bernhard at intevation.de  Mon Apr 10 14:44:32 2006
From: bernhard at intevation.de (Bernhard Reiter)
Date: Mon, 10 Apr 2006 14:44:32 +0200
Subject: [Supertux-devel] Joystick support for 0.1.3 (Debian #288432)
Message-ID: <200604101444.32923.bernhard@intevation.de>

Hi Supertux Developers,

thanks for the nice an entertaining game!
And thanks for making it Free Software!

A great wish for me would be support for joysticks.
Pierre Pronchery made a patch for 0.1.3,
which can be found here:
http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=288432
With it, a joystick works!

My only to wish to this is: I want supertux to jump, when moving the joystick 
upwards.

Anyway, I am just bringing this to your attention!

Bernhard Reiter

-- 
www.kolab-konsortium.com  Professional Maintenance, Consultancy and Support.



From andersersej at gmail.com  Wed Apr 12 14:31:42 2006
From: andersersej at gmail.com (Anders er sej)
Date: Wed, 12 Apr 2006 14:31:42 +0200
Subject: [Supertux-devel] Danish translation of SuperTux
Message-ID: <7f6a0ad0604120531j5ee72b01n5908362fb708fe73@mail.gmail.com>

Hello

I've translated the devel-version of SuperTux to danish. I have
attached the po files in this mail in a .tar.bz2

- Anders
-------------- next part --------------
A non-text attachment was scrubbed...
Name: da-supertux.tar.bz2
Type: application/x-bzip2
Size: 9649 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060412/6ea22a5a/attachment.bin>

From afief.h at gmail.com  Wed Apr 12 18:18:36 2006
From: afief.h at gmail.com (Afief Halumi)
Date: Wed, 12 Apr 2006 18:18:36 +0200
Subject: [Supertux-devel] use your program
In-Reply-To: <5de9807a0604081311s753be6cck5af6d0ce9f3ef129@mail.gmail.com>
References: <5de9807a0604081311s753be6cck5af6d0ce9f3ef129@mail.gmail.com>
Message-ID: <83a40700604120918k2295eb40u754008c9b4a174f9@mail.gmail.com>

Don't know what you mean with "in my web for download" if you mean "upload
it into my website so people can download it" AFAIK that is okay according
to the GPL as long as you give credits to the developers.

Don't take my word as a law though, i've not read all of the GPL license

Afief

On 4/8/06, Urrakis <urrakis at gmail.com> wrote:
>
> can i use your free supertux in my web for download?
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060412/3798c8a8/attachment.html>

From p637777 at aol.com  Wed Apr 12 20:24:04 2006
From: p637777 at aol.com (Markus Engel)
Date: Wed, 12 Apr 2006 20:24:04 +0200
Subject: [Supertux-devel] Patch for Infoboxes
Message-ID: <000001c65e5e$4ba418a0$2001a8c0@homepc01>

Hi!

I have just written a little patch for the scrolling functions of the
Infoboxes. After you patched the file, the arrows for scrolling are only
shown, if the text is too long and you can't scroll down now if the text
fits in the window.


Markus
-------------- next part --------------
A non-text attachment was scrubbed...
Name: scrl.patch
Type: application/octet-stream
Size: 2967 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060412/f54dd2cc/attachment.obj>

From rflegel at gmail.com  Wed Apr 12 22:37:16 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Wed, 12 Apr 2006 14:37:16 -0600
Subject: [Supertux-devel] Danish translation of SuperTux
In-Reply-To: <7f6a0ad0604120531j5ee72b01n5908362fb708fe73@mail.gmail.com>
References: <7f6a0ad0604120531j5ee72b01n5908362fb708fe73@mail.gmail.com>
Message-ID: <5a5496320604121337n20c4bd09r16a6d8bf016c9e07@mail.gmail.com>

Thanks! The translation has been added. I've added you to the credits
as "Anders". If you'd like your last name in there, just let me know.

On 4/12/06, Anders er sej <andersersej at gmail.com> wrote:
> Hello
>
> I've translated the devel-version of SuperTux to danish. I have
> attached the po files in this mail in a .tar.bz2
>
> - Anders
>
>
>


From cwebber at dustycloud.org  Thu Apr 13 20:20:31 2006
From: cwebber at dustycloud.org (Christopher Allan Webber)
Date: Thu, 13 Apr 2006 13:20:31 -0500
Subject: [Supertux-devel] use your program
In-Reply-To: <5de9807a0604081311s753be6cck5af6d0ce9f3ef129@mail.gmail.com>
	(urrakis@gmail.com's message of "Sat, 8 Apr 2006 22:11:59 +0200")
References: <5de9807a0604081311s753be6cck5af6d0ce9f3ef129@mail.gmail.com>
Message-ID: <877j5te3rk.fsf@dustycloud.org>

Urrakis <urrakis at gmail.com> writes:

> can i use your free supertux in my web for download?

Urrakis:

The GPL explicitly preserves your rights to copy, modify and
distribute this program as much as you like, as long as the copyrights
and the license itself remain intact, and if you make any
modifications, you follow the clauses of the GPL itself.


In other words, yes :)



From contact at yotamelal.com  Thu Apr 13 20:01:26 2006
From: contact at yotamelal.com (Yotam Elal)
Date: Thu, 13 Apr 2006 20:01:26 +0200
Subject: [Supertux-devel] Link?
Message-ID: <443E91F6.9030009@yotamelal.com>

An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060413/e2a46908/attachment.html>

From MADDOGMIKE05 at aol.com  Wed Apr 19 05:53:56 2006
From: MADDOGMIKE05 at aol.com (MADDOGMIKE05 at aol.com)
Date: Tue, 18 Apr 2006 23:53:56 EDT
Subject: [Supertux-devel] (no subject)
Message-ID: <2aa.2cdee6d.31770e54@aol.com>

When is Milestone 2 coming out iv' e been waiting like 2  months!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060418/d97a48de/attachment.html>

From allen at a-king.us  Fri Apr 21 11:00:46 2006
From: allen at a-king.us (Allen King)
Date: Fri, 21 Apr 2006 05:00:46 -0400
Subject: [Supertux-devel] "Remote Control" for Supertux -- status
Message-ID: <44489F3E.5000205@a-king.us>

I've been working on the "Remote Control" changes to Supertux that we 
talked about last week, and have a first version that works -- I have a 
program that supplies button presses from a canned list to supertux over 
a port, and supertux returns a list of all the surfaces drawn, with 
texture file names.  The changes are still fluid, so I'm inclined not 
going to release any patches right yet.

I told Matze I would next make a patch for platform independent 
repeatable random numbers, and I am well on my way to completing that.  
To finish,  I have some (seven) questions on the mods, which I would 
like responses to (the first 3 are generic fishing and educational, on 
the last 4 I need detailed answers):

BASIC DESIGN:

    1) allows for two random generator modes, under control of the
    configuration file: 

        a. If a (random_seed <decimal number>) line is present in the
        configuration file, it is used used as the random seed to start
        the run. 

        b. If the above line isn't there, the seed obtained from time()
        in the usual way, and is additionally printed, so it can later
        be pasted into the configuration file if the run wants to be
        reproduced.

    QUESTION #1: seem reasonable?


    2)  Files [.cpp/.hpp] for a platform-independent class RandomNumbers
    were added.  They were transliterated from C sources found at
    http://www.jbox.dk/sanos/source/lib/random.c.html.  A wizard friend
    of mine claimed this to be "the fastest and best quality" around. 

    QUESTION #2: any reason not to proceed this way? Is copyleft okay
    for supertux?


    3) I've included RandomNumbers in a wrapper file "rand.hpp" which
    redefines rand() and srand() for general consumption by supertux.
    WARNING: Supertux files which call rand() or srand() and which do
    NOT include rand.hpp will use the old rand facility, which will be
    neither initialized correctly, controllable by config, nor platform
    independent.  So this would not happen, I buried an include for
    rand.hpp deep in game_object.hpp, which is included by all the "bad
    guys".  I also (redundantly) added similar includes in all .cpp
    files which contained calls to [s]rand(), with a shameless
    promotional comment, so developers would get the idea.

    QUESTION #3: any objections to this?  suggestions of better ways
    (e.g. changing calls to rand to BlaBlaRand, and redefining rand()
    and srand() to print helpful errors?

SUPERTUX FUNCTIONALITY:

    4) There is a call to srand() in player.cpp, which occurs after a
    player is killed.  I do not understand why it would be necessary to
    do this -- it seems totally superfluous, but with my very limited
    knowledge am way too afraid to comment it out.  It would be great if
    it could go!  As it stands now, random number repeatability  ceases
    after the first time Tux dies.

    QUESTION #4 (THIS IS THE REASON I WROTE THIS EMAIL): Could someone
    verify that this call was just put in by someone who didn't
    understand random numbers (or not)?  If so, the solution is simple. 
    If not, not.


    5) There is another call to srand() in sqstdmath.cpp, but nobody in
    supertux-ville seems to call the routine that contains it.  I added
    an throw of runtime_error to discourage its future use. 

    QUESTION #5: Is this okay, or too harsh.


    6) I was thinking of adding a commented-out setting of random_seed
    in the default ~/.supertux/config . (I noted that that was made for
    me when I first ran supertux, but a cursory scan didn't show me how.)

    QUESTION #6:  Can someone help me determine how I would modify the
    default ~/.supertux/config?  I will do this if someone does.


    7)  One could turn on/off the use of platform-independent
    random_numbers with a ./configure --<option> . 

    QUESTION #7: Is it worth doing?  Enough so that someone could
    outline the requisite changes to  configure.ac (and friends).


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060421/c0e51a61/attachment.html>

From supertux at 2006.expires.deltadevelopment.de  Fri Apr 21 20:18:56 2006
From: supertux at 2006.expires.deltadevelopment.de (Christoph Sommer)
Date: Fri, 21 Apr 2006 20:18:56 +0200
Subject: [Supertux-devel] "Remote Control" for Supertux -- status
In-Reply-To: <44489F3E.5000205@a-king.us>
References: <44489F3E.5000205@a-king.us>
Message-ID: <44492210.7010209@2006.expires.deltadevelopment.de>

Hey Allen,

Allen King wrote:
> I've been working on the "Remote Control" [...]
> program that supplies button presses from a canned list to supertux over 
> a port
[...]
>        a. If a (random_seed <decimal number>) line is present in the
>        configuration file, it is used used as the random seed to start
>        the run.
>        b. If the above line isn't there, the seed obtained from time()
>        in the usual way, and is additionally printed, so it can later
>        be pasted into the configuration file if the run wants to be
>        reproduced.
> 
>    QUESTION #1: seem reasonable?

Depends, I'd say.
If a button press reaches the game one frame later than in the last run, 
e.g. killing a badguy that consumes one random number per frame, you 
might end up with a different stream of random-numbers from that point 
in time on.

>    QUESTION #3: any objections to this?  suggestions of better ways
>    (e.g. changing calls to rand to BlaBlaRand, and redefining rand()
>    and srand() to print helpful errors?

I like that approach better. "Altering" standard functions seems a 
little odd to me.

>    4) There is a call to srand() in player.cpp, which occurs after a
>    player is killed.  I do not understand why it would be necessary to
>    do this -- it seems totally superfluous

Seems like it got introduced in rev 3320 (Hacked together a "coin 
losing" effect when Tux is killed), so it seems superfluous to me, too.

>    5) There is another call to srand() in sqstdmath.cpp, but nobody in
>    supertux-ville seems to call the routine that contains it.  I added
>    an throw of runtime_error to discourage its future use.
>    QUESTION #5: Is this okay, or too harsh.

I'm just guessing, but might this be called from a squirrel script?

>    QUESTION #6:  Can someone help me determine how I would modify the
>    default ~/.supertux/config?  I will do this if someone does.

I think it's just written by Config::save in gameconfig.cpp


Regards,

   Christoph

-- 
Plan to be spontaneous tomorrow.


From matze at braunis.de  Fri Apr 21 22:20:21 2006
From: matze at braunis.de (Matze Braun)
Date: Fri, 21 Apr 2006 22:20:21 +0200
Subject: [Supertux-devel] "Remote Control" for Supertux -- status
In-Reply-To: <44489F3E.5000205@a-king.us>
References: <44489F3E.5000205@a-king.us>
Message-ID: <1145650821.11717.13.camel@taylor.local>

Am Freitag, den 21.04.2006, 05:00 -0400 schrieb Allen King:
> I've been working on the "Remote Control" changes to Supertux that we
> talked about last week, and have a first version that works -- I have
> a program that supplies button presses from a canned list to supertux
> over a port, and supertux returns a list of all the surfaces drawn,
> with texture file names.  The changes are still fluid, so I'm inclined
> not going to release any patches right yet.
> 
> I told Matze I would next make a patch for platform independent
> repeatable random numbers, and I am well on my way to completing that.
> To finish,  I have some (seven) questions on the mods, which I would
> like responses to (the first 3 are generic fishing and educational, on
> the last 4 I need detailed answers):
> 
> BASIC DESIGN:
>         1) allows for two random generator modes, under control of the
>         configuration file:  
>                 a. If a (random_seed <decimal number>) line is present
>                 in the configuration file, it is used used as the
>                 random seed to start the run.  
>                 
>                 b. If the above line isn't there, the seed obtained
>                 from time() in the usual way, and is additionally
>                 printed, so it can later be pasted into the
>                 configuration file if the run wants to be reproduced.
>         QUESTION #1: seem reasonable?
The deterministic random number generator is needed for 2 use cases:
Saving Demos and Doing reproducible runs with your AI code. For the
first case we have to save the seed in the demo file, in your case you
probably want to send the seed over network. That would make alot more
sense than putting it into a config file IMO.

>         2)  Files [.cpp/.hpp] for a platform-independent class
>         RandomNumbers were added.  They were transliterated from C
>         sources found at
>         http://www.jbox.dk/sanos/source/lib/random.c.html.  A wizard
>         friend of mine claimed this to be "the fastest and best
>         quality" around.  
>         
>         QUESTION #2: any reason not to proceed this way? Is copyleft
>         okay for supertux?
>         
Yep this is the most important part of all this. I personally would call
the calss Random or RandomGenerator though...

>         3) I've included RandomNumbers in a wrapper file "rand.hpp"
>         which redefines rand() and srand() for general consumption by
>         supertux. WARNING: Supertux files which call rand() or srand()
>         and which do NOT include rand.hpp will use the old rand
>         facility, which will be neither initialized correctly,
>         controllable by config, nor platform independent.  So this
>         would not happen, I buried an include for rand.hpp deep in
>         game_object.hpp, which is included by all the "bad guys".  I
>         also (redundantly) added similar includes in all .cpp files
>         which contained calls to [s]rand(), with a shameless
>         promotional comment, so developers would get the idea.
>         
>         QUESTION #3: any objections to this?  suggestions of better
>         ways (e.g. changing calls to rand to BlaBlaRand, and
>         redefining rand() and srand() to print helpful errors?

Please don't do that. It's not the C library implementation of rand and
srand anymore, so don't make it look like it is. Also searching for
errors is actually easier if you rename the function, because then you
can simply grep for rand() to find (forbidden) usages of libc functions.
(Additionally adding #includes into heavily used header files is
something that should be avoided too, because it unnecessarily increases
compile time and pollutes the namespace)

> SUPERTUX FUNCTIONALITY:
>         4) There is a call to srand() in player.cpp, which occurs
>         after a player is killed.  I do not understand why it would be
>         necessary to do this -- it seems totally superfluous, but with
>         my very limited knowledge am way too afraid to comment it out.
>         It would be great if it could go!  As it stands now, random
>         number repeatability  ceases after the first time Tux dies. 
>         
>         QUESTION #4 (THIS IS THE REASON I WROTE THIS EMAIL): Could
>         someone verify that this call was just put in by someone who
>         didn't understand random numbers (or not)?  If so, the
>         solution is simple.  If not, not.
Yep remove it.
>         
>         5) There is another call to srand() in sqstdmath.cpp, but
>         nobody in supertux-ville seems to call the routine that
>         contains it.  I added an throw of runtime_error to discourage
>         its future use.  
>         
>         QUESTION #5: Is this okay, or too harsh.

All the code in src/squirrel is just a 1:1 copy of the squirrel
scripting language into the supertux sources. Changes there don't make
sense as when there's an update to squirrel, I'll just copy over the new
squirrel files into these directories and the changes will be lost.

I'd propose to simply ignore this issue for now :) If you wanna fix it
then the way to go would be reimplmenting all squirrel library functions
that deal with random numbers in supertux and replace the squirrel ones
with the supertux ones in the roottable.
>         
>         6) I was thinking of adding a commented-out setting of
>         random_seed in the default ~/.supertux/config . (I noted that
>         that was made for me when I first ran supertux, but a cursory
>         scan didn't show me how.)
>         
>         QUESTION #6:  Can someone help me determine how I would modify
>         the default ~/.supertux/config?  I will do this if someone
>         does.
>         
Default values come from Config::Config() constructor and the file is
written in the Config::save() function. But as stated above I don't
think putting the seed into the config is a good idea.

>         7)  One could turn on/off the use of platform-independent
>         random_numbers with a ./configure --<option> .  
>         
>         QUESTION #7: Is it worth doing?  Enough so that someone could
>         outline the requisite changes to  configure.ac (and friends).
>         
1 way of doing things is really enough here, we have fewer bloat and
maintainence problems by not having additional options.

Greetings,
	Matze




From gregory.t.brown at gmail.com  Sat Apr 22 03:48:57 2006
From: gregory.t.brown at gmail.com (Gregory Brown)
Date: Fri, 21 Apr 2006 21:48:57 -0400
Subject: [Supertux-devel] (no subject)
In-Reply-To: <2aa.2cdee6d.31770e54@aol.com>
References: <2aa.2cdee6d.31770e54@aol.com>
Message-ID: <b37300880604211848g63f63b48pdffd08f84ef83a46@mail.gmail.com>

On 4/18/06, MADDOGMIKE05 at aol.com <MADDOGMIKE05 at aol.com> wrote:
>
> When is Milestone 2 coming out iv' e been waiting like 2 months!

I imagine 'when it's done'.  Free Software takes time...

I don't know what the supertux team's feelings are towards donations
but some projects have been moved along by donations from their users.

But chances are... the people developing are just busy.  There are
usually ways to help, such as testing and debugging and submitting
ideas and art etc etc etc.

And you can also pull whatever the latest source is and build it from
scratch for a preview, but it's probably not super easy to do that.
(unless you are a software developer )


From gregory.t.brown at gmail.com  Sat Apr 22 03:48:57 2006
From: gregory.t.brown at gmail.com (Gregory Brown)
Date: Fri, 21 Apr 2006 21:48:57 -0400
Subject: [Supertux-devel] (no subject)
In-Reply-To: <2aa.2cdee6d.31770e54@aol.com>
References: <2aa.2cdee6d.31770e54@aol.com>
Message-ID: <b37300880604211848g63f63b48pdffd08f84ef83a46@mail.gmail.com>

On 4/18/06, MADDOGMIKE05 at aol.com <MADDOGMIKE05 at aol.com> wrote:
>
> When is Milestone 2 coming out iv' e been waiting like 2 months!

I imagine 'when it's done'.  Free Software takes time...

I don't know what the supertux team's feelings are towards donations
but some projects have been moved along by donations from their users.

But chances are... the people developing are just busy.  There are
usually ways to help, such as testing and debugging and submitting
ideas and art etc etc etc.

And you can also pull whatever the latest source is and build it from
scratch for a preview, but it's probably not super easy to do that.
(unless you are a software developer )


From bubuabu at bubuabu.org  Sun Apr 23 00:31:28 2006
From: bubuabu at bubuabu.org (Vivien)
Date: Sun, 23 Apr 2006 00:31:28 +0200
Subject: [Supertux-devel] (no subject)
In-Reply-To: <b37300880604211848g63f63b48pdffd08f84ef83a46@mail.gmail.com>
References: <2aa.2cdee6d.31770e54@aol.com> <b37300880604211848g63f63b48pdffd08f84ef83a46@mail.gmail.com>
Message-ID: <200604230031.28372.bubuabu@bubuabu.org>

There are a lot of work every day. We can see it on svn.

> On 4/18/06, MADDOGMIKE05 at aol.com <MADDOGMIKE05 at aol.com> wrote:
> > When is Milestone 2 coming out iv' e been waiting like 2 months!
>
> I imagine 'when it's done'.  Free Software takes time...
>
> I don't know what the supertux team's feelings are towards donations
> but some projects have been moved along by donations from their users.
>
> But chances are... the people developing are just busy.  There are
> usually ways to help, such as testing and debugging and submitting
> ideas and art etc etc etc.
>
> And you can also pull whatever the latest source is and build it from
> scratch for a preview, but it's probably not super easy to do that.
> (unless you are a software developer )
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel


From EvilGlowingApple at gmail.com  Sun Apr 23 04:03:22 2006
From: EvilGlowingApple at gmail.com (Jayson Kempinger)
Date: Sat, 22 Apr 2006 21:03:22 -0500
Subject: [Supertux-devel] Bug report for svn revision 3382
Message-ID: <F4DC972C-4238-4DB5-B6D9-597885CDD493@gmail.com>

Hi,
	Been playing around with the development version of SuperTux and ran  
into a few bugs.  First, none of my settings save.  When the app  
begins it uses the default (music on, sound on, fullscreen, etc).  If  
I change those to music off, sound off, windowed for example and then  
restart the game, it uses the default settings again.  Here's a copy  
of the config file in my ~/.supertux directory

> (supertux-config
>   (show_fps #f)
>   (cheats #f)
>   (video
>     (fullscreen #f)
>     (width 800)
>     (height 600)
>   )
>   (audio
>     (sound_enabled #f)
>     (music_enabled #f)
>   )
>   (control
>     (keymap
>       (map
>         (key 13)
>         (control "menu-select")
>       )
>       (map
>         (key 19)
>         (control "pause-menu")
>       )
>       (map
>         (key 27)
>         (control "pause-menu")
>       )
>       (map
>         (key 32)
>         (control "jump")
>       )
>       (map
>         (key 94)
>         (control "console")
>       )
>       (map
>         (key 112)
>         (control "pause-menu")
>       )
>       (map
>         (key 271)
>         (control "menu-select")
>       )
>       (map
>         (key 273)
>         (control "up")
>       )
>       (map
>         (key 274)
>         (control "down")
>       )
>       (map
>         (key 275)
>         (control "right")
>       )
>       (map
>         (key 276)
>         (control "left")
>       )
>       (map
>         (key 306)
>         (control "action")
>       )
>       (map
>         (key 308)
>         (control "action"
>       )
>     )
>     (joystick
>       (use_hat #t)
>       (axis_x 0)
>       (axis_y 1)
>       (dead_zone_x 1000)
>       (dead_zone_y 1000)
>       (map
>         (button 0)
>         (control "jump")
>       )
>       (map
>         (button 1)
>         (control "action")
>       )
>     )
>   )
> )

When I run the app (compiled with debug enabled) this is what I get  
in the terminal:

> [INFO] src/main.cpp:195 [/Users/jayson/.supertux] is in the search  
> path
> [INFO] src/main.cpp:195 [/usr/local/share/supertux] is in the  
> search path
> [INFO] src/main.cpp:469 Component 'controller' finished after 0.201  
> seconds
> [INFO] src/main.cpp:68 Couldn't load config file: Parse Error at  
> line 84: Unexpected EOF., using default settings
> [INFO] src/main.cpp:469 Component 'config' finished after 0.174  
> seconds
> [INFO] src/main.cpp:469 Component 'tinygettext' finished after  
> 0.002 seconds
> [INFO] src/main.cpp:469 Component 'commandline' finished after  
> 0.001 seconds
> [INFO] src/main.cpp:469 Component 'audio' finished after 0.461 seconds
> [INFO] src/main.cpp:469 Component 'video' finished after 3.62 seconds
> [WARNING] src/script_manager.cpp:102 Couldn't load default.nut:  
> Couldn't open file 'scripts/default.nut': No such file or directory
> [INFO] src/main.cpp:469 Component 'scripting' finished after 0.007  
> seconds
> [DEBUG] src/tile_manager.cpp:47 Tiles loaded in 0.117 seconds
> [INFO] src/main.cpp:469 Component 'resources' finished after 0.524  
> seconds
> [DEBUG] src/world.cpp:226 Couldn't load savegame: Couldn't open  
> file 'save/world1_1.stsg': No such file or directory
> [WARNING] src/sector.cpp:447 Spawnpoint 'main' not found.
>
> AN ERROR HAS OCCURED [the index 'println' does not exist]
>
> CALLSTACK
> *FUNCTION [main()] levels/world1//world.nut line [9]
>
> LOCALS
> [this] TABLE
> Problem executing script: Squirrel error: Couldn't resume script  
> (the index 'println' does not exist)

Line 84 is the last ')' in the file and as far as I can tell each '('  
has a ')', so I'm not sure what the parse error is.  The other error  
I've been having is as soon as the intro is done the game returns to  
the main screen and the CALLSTACK listed above is throw in the  
terminal.  Afterward when I open the game up again the save slots  
show a blank instead of Free and cannot be used anymore (e.g. 'Slot 1  
- ').  I've tried it several times and get the same error.  Tried  
recompiling and reinstalling but I get the same issue.  Also tried  
deleting ~/.supertux and allowing the app to recreate it, but that  
didn't change anything either.

Please let me know if you need any more information.  Keep up the  
good work!

Thanks, Jayson


----------------------------------------------------------------------
This message is digitally signed with GnuPG.
http://www.kempinger.homelinux.net/EvilGlowingApple at gmail.com.GPG.html

(see http://www.gnupg.org/gph/en/manual.html#AEN136
for information on how to verify this message)
----------------------------------------------------------------------


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060422/73d6942f/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060422/73d6942f/attachment.pgp>

From rebecca at laudate.ca  Sun Apr 23 05:11:15 2006
From: rebecca at laudate.ca (Rebecca Gilbert)
Date: Sat, 22 Apr 2006 23:11:15 -0400 (EDT)
Subject: [Supertux-devel] downloading?
Message-ID: <2183.64.228.0.113.1145761875.squirrel@mail.eicat.ca>

In the past week or so, I've tried several times to download supertux and
it tells me

Sorry! The wiki is experiencing some technical difficulties, and cannot
contact the database server.
Can't connect to MySQL server on 'db.berlios.de' (146)

I have it installed on my FreeBSD machine, but this is for a windows xp
machine that I also have.

Any idea when that will be available again?



From rflegel at gmail.com  Sun Apr 23 06:01:31 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Sat, 22 Apr 2006 22:01:31 -0600
Subject: [Supertux-devel] downloading?
In-Reply-To: <2183.64.228.0.113.1145761875.squirrel@mail.eicat.ca>
References: <2183.64.228.0.113.1145761875.squirrel@mail.eicat.ca>
Message-ID: <5a5496320604222101v414f26f5wae4ce450936a6225@mail.gmail.com>

Hi Rebecca,

We're having some temporary problems with the wiki. You can go to
directly to http://developer.berlios.de/project/showfiles.php?group_id=3467
and download SuperTux there.

--
Ryan

On 4/22/06, Rebecca Gilbert <rebecca at laudate.ca> wrote:
>
> In the past week or so, I've tried several times to download supertux and
> it tells me
>
> Sorry! The wiki is experiencing some technical difficulties, and cannot
> contact the database server.
> Can't connect to MySQL server on 'db.berlios.de' (146)
>
> I have it installed on my FreeBSD machine, but this is for a windows xp
> machine that I also have.
>
> Any idea when that will be available again?
>
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>


From matze at braunis.de  Sun Apr 23 09:16:58 2006
From: matze at braunis.de (Matze Braun)
Date: Sun, 23 Apr 2006 09:16:58 +0200
Subject: [Supertux-devel] Bug report for svn revision 3382
In-Reply-To: <F4DC972C-4238-4DB5-B6D9-597885CDD493@gmail.com>
References: <F4DC972C-4238-4DB5-B6D9-597885CDD493@gmail.com>
Message-ID: <1145776618.18276.2.camel@taylor.local>

Am Samstag, den 22.04.2006, 21:03 -0500 schrieb Jayson Kempinger:
> Hi,
> Been playing around with the development version of SuperTux and ran
> into a few bugs.  First, none of my settings save.  When the app
> begins it uses the default (music on, sound on, fullscreen, etc).  If
> I change those to music off, sound off, windowed for example and then
> restart the game, it uses the default settings again.  Here's a copy
> of the config file in my ~/.supertux directory
> 
> 
> > (supertux-config
> >   (show_fps #f)
> >   (cheats #f)
> >   (video
> >     (fullscreen #f)
> >     (width 800)
> >     (height 600)
> >   )
> >   (audio
> >     (sound_enabled #f)
> >     (music_enabled #f)
> >   )
> >   (control
> >     (keymap
> >       (map
> >         (key 13)
> >         (control "menu-select")
> >       )
> >       (map
> >         (key 19)
> >         (control "pause-menu")
> >       )
> >       (map
> >         (key 27)
> >         (control "pause-menu")
> >       )
> >       (map
> >         (key 32)
> >         (control "jump")
> >       )
> >       (map
> >         (key 94)
> >         (control "console")
> >       )
> >       (map
> >         (key 112)
> >         (control "pause-menu")
> >       )
> >       (map
> >         (key 271)
> >         (control "menu-select")
> >       )
> >       (map
> >         (key 273)
> >         (control "up")
> >       )
> >       (map
> >         (key 274)
> >         (control "down")
> >       )
> >       (map
> >         (key 275)
> >         (control "right")
> >       )
> >       (map
> >         (key 276)
> >         (control "left")
> >       )
> >       (map
> >         (key 306)
> >         (control "action")
> >       )
> >       (map
> >         (key 308)
> >         (control "action"
Here you are missing a )
Are you sure the supertux game created that config file? I couldn't see
anything wrong in the source or manage to make supertux create such a
config file.

> >       )
> >     )
> >     (joystick
> >       (use_hat #t)
> >       (axis_x 0)
> >       (axis_y 1)
> >       (dead_zone_x 1000)
> >       (dead_zone_y 1000)
> >       (map
> >         (button 0)
> >         (control "jump")
> >       )
> >       (map
> >         (button 1)
> >         (control "action")
> >       )
> >     )
> >   )
> > )
> 
> 
> When I run the app (compiled with debug enabled) this is what I get in
> the terminal:
> 
> 
> > [INFO] src/main.cpp:195 [/Users/jayson/.supertux] is in the search
> > path
> > [INFO] src/main.cpp:195 [/usr/local/share/supertux] is in the search
> > path
> > [INFO] src/main.cpp:469 Component 'controller' finished after 0.201
> > seconds
> > [INFO] src/main.cpp:68 Couldn't load config file: Parse Error at
> > line 84: Unexpected EOF., using default settings
> > [INFO] src/main.cpp:469 Component 'config' finished after 0.174
> > seconds
> > [INFO] src/main.cpp:469 Component 'tinygettext' finished after 0.002
> > seconds
> > [INFO] src/main.cpp:469 Component 'commandline' finished after 0.001
> > seconds
> > [INFO] src/main.cpp:469 Component 'audio' finished after 0.461
> > seconds
> > [INFO] src/main.cpp:469 Component 'video' finished after 3.62
> > seconds
> > [WARNING] src/script_manager.cpp:102 Couldn't load default.nut:
> > Couldn't open file 'scripts/default.nut': No such file or directory
> > [INFO] src/main.cpp:469 Component 'scripting' finished after 0.007
> > seconds
> > [DEBUG] src/tile_manager.cpp:47 Tiles loaded in 0.117 seconds
> > [INFO] src/main.cpp:469 Component 'resources' finished after 0.524
> > seconds
> > [DEBUG] src/world.cpp:226 Couldn't load savegame: Couldn't open file
> > 'save/world1_1.stsg': No such file or directory
> > [WARNING] src/sector.cpp:447 Spawnpoint 'main' not found.
> > 
> > 
> > AN ERROR HAS OCCURED [the index 'println' does not exist]
> > 
> > 
> > CALLSTACK
> > *FUNCTION [main()] levels/world1//world.nut line [9]
> > 
> > 
> > LOCALS
> > [this] TABLE
> > Problem executing script: Squirrel error: Couldn't resume script
> > (the index 'println' does not exist)
> 
> 
> Line 84 is the last ')' in the file and as far as I can tell each '('
> has a ')', so I'm not sure what the parse error is.  The other error
> I've been having is as soon as the intro is done the game returns to
> the main screen and the CALLSTACK listed above is throw in the
> terminal.  Afterward when I open the game up again the save slots show
> a blank instead of Free and cannot be used anymore (e.g. 'Slot 1 - ').
> I've tried it several times and get the same error.  Tried recompiling
> and reinstalling but I get the same issue.  Also tried deleting
> ~/.supertux and allowing the app to recreate it, but that didn't
> change anything either.  

The problem is that the "jam install" target is currently broken and
leaves out some files like default.nut (and it'll probably stay broken
until shortly before the release). But you can just run the game from
the supertux directory where you compiled instead.

Greetings,
	Matze

> 



From matze at braunis.de  Sun Apr 23 09:16:58 2006
From: matze at braunis.de (Matze Braun)
Date: Sun, 23 Apr 2006 09:16:58 +0200
Subject: [Supertux-devel] Bug report for svn revision 3382
In-Reply-To: <F4DC972C-4238-4DB5-B6D9-597885CDD493@gmail.com>
References: <F4DC972C-4238-4DB5-B6D9-597885CDD493@gmail.com>
Message-ID: <1145776618.18276.2.camel@taylor.local>

Am Samstag, den 22.04.2006, 21:03 -0500 schrieb Jayson Kempinger:
> Hi,
> Been playing around with the development version of SuperTux and ran
> into a few bugs.  First, none of my settings save.  When the app
> begins it uses the default (music on, sound on, fullscreen, etc).  If
> I change those to music off, sound off, windowed for example and then
> restart the game, it uses the default settings again.  Here's a copy
> of the config file in my ~/.supertux directory
> 
> 
> > (supertux-config
> >   (show_fps #f)
> >   (cheats #f)
> >   (video
> >     (fullscreen #f)
> >     (width 800)
> >     (height 600)
> >   )
> >   (audio
> >     (sound_enabled #f)
> >     (music_enabled #f)
> >   )
> >   (control
> >     (keymap
> >       (map
> >         (key 13)
> >         (control "menu-select")
> >       )
> >       (map
> >         (key 19)
> >         (control "pause-menu")
> >       )
> >       (map
> >         (key 27)
> >         (control "pause-menu")
> >       )
> >       (map
> >         (key 32)
> >         (control "jump")
> >       )
> >       (map
> >         (key 94)
> >         (control "console")
> >       )
> >       (map
> >         (key 112)
> >         (control "pause-menu")
> >       )
> >       (map
> >         (key 271)
> >         (control "menu-select")
> >       )
> >       (map
> >         (key 273)
> >         (control "up")
> >       )
> >       (map
> >         (key 274)
> >         (control "down")
> >       )
> >       (map
> >         (key 275)
> >         (control "right")
> >       )
> >       (map
> >         (key 276)
> >         (control "left")
> >       )
> >       (map
> >         (key 306)
> >         (control "action")
> >       )
> >       (map
> >         (key 308)
> >         (control "action"
Here you are missing a )
Are you sure the supertux game created that config file? I couldn't see
anything wrong in the source or manage to make supertux create such a
config file.

> >       )
> >     )
> >     (joystick
> >       (use_hat #t)
> >       (axis_x 0)
> >       (axis_y 1)
> >       (dead_zone_x 1000)
> >       (dead_zone_y 1000)
> >       (map
> >         (button 0)
> >         (control "jump")
> >       )
> >       (map
> >         (button 1)
> >         (control "action")
> >       )
> >     )
> >   )
> > )
> 
> 
> When I run the app (compiled with debug enabled) this is what I get in
> the terminal:
> 
> 
> > [INFO] src/main.cpp:195 [/Users/jayson/.supertux] is in the search
> > path
> > [INFO] src/main.cpp:195 [/usr/local/share/supertux] is in the search
> > path
> > [INFO] src/main.cpp:469 Component 'controller' finished after 0.201
> > seconds
> > [INFO] src/main.cpp:68 Couldn't load config file: Parse Error at
> > line 84: Unexpected EOF., using default settings
> > [INFO] src/main.cpp:469 Component 'config' finished after 0.174
> > seconds
> > [INFO] src/main.cpp:469 Component 'tinygettext' finished after 0.002
> > seconds
> > [INFO] src/main.cpp:469 Component 'commandline' finished after 0.001
> > seconds
> > [INFO] src/main.cpp:469 Component 'audio' finished after 0.461
> > seconds
> > [INFO] src/main.cpp:469 Component 'video' finished after 3.62
> > seconds
> > [WARNING] src/script_manager.cpp:102 Couldn't load default.nut:
> > Couldn't open file 'scripts/default.nut': No such file or directory
> > [INFO] src/main.cpp:469 Component 'scripting' finished after 0.007
> > seconds
> > [DEBUG] src/tile_manager.cpp:47 Tiles loaded in 0.117 seconds
> > [INFO] src/main.cpp:469 Component 'resources' finished after 0.524
> > seconds
> > [DEBUG] src/world.cpp:226 Couldn't load savegame: Couldn't open file
> > 'save/world1_1.stsg': No such file or directory
> > [WARNING] src/sector.cpp:447 Spawnpoint 'main' not found.
> > 
> > 
> > AN ERROR HAS OCCURED [the index 'println' does not exist]
> > 
> > 
> > CALLSTACK
> > *FUNCTION [main()] levels/world1//world.nut line [9]
> > 
> > 
> > LOCALS
> > [this] TABLE
> > Problem executing script: Squirrel error: Couldn't resume script
> > (the index 'println' does not exist)
> 
> 
> Line 84 is the last ')' in the file and as far as I can tell each '('
> has a ')', so I'm not sure what the parse error is.  The other error
> I've been having is as soon as the intro is done the game returns to
> the main screen and the CALLSTACK listed above is throw in the
> terminal.  Afterward when I open the game up again the save slots show
> a blank instead of Free and cannot be used anymore (e.g. 'Slot 1 - ').
> I've tried it several times and get the same error.  Tried recompiling
> and reinstalling but I get the same issue.  Also tried deleting
> ~/.supertux and allowing the app to recreate it, but that didn't
> change anything either.  

The problem is that the "jam install" target is currently broken and
leaves out some files like default.nut (and it'll probably stay broken
until shortly before the release). But you can just run the game from
the supertux directory where you compiled instead.

Greetings,
	Matze

> 



From djwings at gmail.com  Sun Apr 23 15:35:14 2006
From: djwings at gmail.com (djwings at gmail.com)
Date: Sun, 23 Apr 2006 09:35:14 -0400
Subject: [Supertux-devel] Badguy idea: Flying Spiky
Message-ID: <826ffc730604230635t65d77ad8i87f3018247db0607@mail.gmail.com>

I've been thinking about new ideas for badguys, and it occurred to me that
if the normal Spiky was modified to jump when it sees a player, instead of
just waking up, it would be a lot harder to get past. So, I tried it. The
header, main C++ file, and sprite are all attached. This is just an idea I'm
throwing out, I don't expect the files to work right off the bat.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/1d447098/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: fspiky.cpp
Type: text/x-c++src
Size: 3626 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/1d447098/attachment.cpp>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: fspiky.hpp
Type: text/x-c++hdr
Size: 1370 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/1d447098/attachment.hpp>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: flyingspiky.sprite
Type: application/octet-stream
Size: 593 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/1d447098/attachment.obj>

From supertux at 2006.expires.deltadevelopment.de  Sun Apr 23 18:39:46 2006
From: supertux at 2006.expires.deltadevelopment.de (Christoph Sommer)
Date: Sun, 23 Apr 2006 18:39:46 +0200
Subject: [Supertux-devel] Patch for Infoboxes
In-Reply-To: <000001c65e5e$4ba418a0$2001a8c0@homepc01>
References: <000001c65e5e$4ba418a0$2001a8c0@homepc01>
Message-ID: <444BADD2.6000204@2006.expires.deltadevelopment.de>

Hey Markus,

Markus Engel wrote:
> I have just written a little patch for the scrolling functions of the
> Infoboxes. After you patched the file, the arrows for scrolling are only
> shown, if the text is too long and you can't scroll down now if the text
> fits in the window.

Thanks for your patch and sorry for responding that late.

Unfortunately your patch does not seem to take into account that a text 
file can have images that are higher than one line of text. So although 
the patch is generally a good idea, we've decided not to merge it at 
this time.

One further note: In future submissions, please try and use English 
variable names. It makes understanding your source code significantly 
easier for most of our team.


Regards,

   Christoph

-- 
I don't suffer from stress. I am a carrier.


From A.M.de-Paula at soton.ac.uk  Fri Apr 21 12:45:47 2006
From: A.M.de-Paula at soton.ac.uk (Ana Maria de Paula)
Date: Fri, 21 Apr 2006 11:45:47 +0100
Subject: [Supertux-devel] server problems
Message-ID: <200604211145.47824.ana@soton.ac.uk>

Dear Sir (Madam)

There is some problems with your MySQL server. I am trying to 
to the download page at supertux.berlios.de and I just get this message for 
the last few days:

Sorry! The wiki is experiencing some technical difficulties, and cannot 
contact the database server. 
 Can't connect to MySQL server on 'db.berlios.de' (146)

Thanks,
Ana

---------------------------------------
Dr Ana Maria de Paula
Ultrafast X-ray group
School of Physics & Astronomy
University of Southampton
Southampton SO17 1BJ
phone: +44 (0)23 80593718
fax: +44 (0)23 80598799
ana at soton.ac.uk
---------------------------------------




From DougWebb at shaw.ca  Fri Apr 21 18:43:22 2006
From: DougWebb at shaw.ca (Doug Webb)
Date: Fri, 21 Apr 2006 09:43:22 -0700
Subject: [Supertux-devel] Supertux Bug - Spurious move right commands
Message-ID: <44490BAA.8090200@shaw.ca>

Version 1.3  the program sends spurious move right commands causing 
character to run into traps and enemies.  To stop it player must press 
and release move right button to regain control of character.    
Otherwise it's a fun game, thanks!

Doug Webb



From rflegel at gmail.com  Sun Apr 23 18:50:36 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Sun, 23 Apr 2006 10:50:36 -0600
Subject: [Supertux-devel] server problems
In-Reply-To: <200604211145.47824.ana@soton.ac.uk>
References: <200604211145.47824.ana@soton.ac.uk>
Message-ID: <5a5496320604230950g47716670wf19cbc4096db015b@mail.gmail.com>

Hi there,

As you can see, there are some technical difficulties right now :).
We're not sure how long these will persist but in the meantime you can
download SuperTux from
http://developer.berlios.de/project/showfiles.php?group_id=3467

--
Ryan

On 4/21/06, Ana Maria de Paula <A.M.de-Paula at soton.ac.uk> wrote:
> Dear Sir (Madam)
>
> There is some problems with your MySQL server. I am trying to
> to the download page at supertux.berlios.de and I just get this message for
> the last few days:
>
> Sorry! The wiki is experiencing some technical difficulties, and cannot
> contact the database server.
>  Can't connect to MySQL server on 'db.berlios.de' (146)
>
> Thanks,
> Ana
>
> ---------------------------------------
> Dr Ana Maria de Paula
> Ultrafast X-ray group
> School of Physics & Astronomy
> University of Southampton
> Southampton SO17 1BJ
> phone: +44 (0)23 80593718
> fax: +44 (0)23 80598799
> ana at soton.ac.uk
> ---------------------------------------
>
>
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>


From djwings at gmail.com  Sun Apr 23 18:51:15 2006
From: djwings at gmail.com (djwings at gmail.com)
Date: Sun, 23 Apr 2006 12:51:15 -0400
Subject: [Supertux-devel] Supertux Bug - Spurious move right commands
In-Reply-To: <44490BAA.8090200@shaw.ca>
References: <44490BAA.8090200@shaw.ca>
Message-ID: <826ffc730604230951g535bbf54x2ab419b578b38f84@mail.gmail.com>

What platform do you use? I tested it on Ubuntu Linux 5.10, Windows 2000 and
XP Professional, and Msys, and still didn't get that kind of bug.

On 4/21/06, Doug Webb <DougWebb at shaw.ca> wrote:
>
> Version 1.3  the program sends spurious move right commands causing
> character to run into traps and enemies.  To stop it player must press
> and release move right button to regain control of character.
> Otherwise it's a fun game, thanks!
>
> Doug Webb
>
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/a5a04fe0/attachment.html>

From djwings at gmail.com  Sun Apr 23 18:51:15 2006
From: djwings at gmail.com (djwings at gmail.com)
Date: Sun, 23 Apr 2006 12:51:15 -0400
Subject: [Supertux-devel] Supertux Bug - Spurious move right commands
In-Reply-To: <44490BAA.8090200@shaw.ca>
References: <44490BAA.8090200@shaw.ca>
Message-ID: <826ffc730604230951g535bbf54x2ab419b578b38f84@mail.gmail.com>

What platform do you use? I tested it on Ubuntu Linux 5.10, Windows 2000 and
XP Professional, and Msys, and still didn't get that kind of bug.

On 4/21/06, Doug Webb <DougWebb at shaw.ca> wrote:
>
> Version 1.3  the program sends spurious move right commands causing
> character to run into traps and enemies.  To stop it player must press
> and release move right button to regain control of character.
> Otherwise it's a fun game, thanks!
>
> Doug Webb
>
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/a5a04fe0/attachment-0001.html>

From djwings at gmail.com  Sun Apr 23 19:06:46 2006
From: djwings at gmail.com (djwings at gmail.com)
Date: Sun, 23 Apr 2006 13:06:46 -0400
Subject: [Supertux-devel] server problems
In-Reply-To: <5a5496320604230950g47716670wf19cbc4096db015b@mail.gmail.com>
References: <200604211145.47824.ana@soton.ac.uk>
	 <5a5496320604230950g47716670wf19cbc4096db015b@mail.gmail.com>
Message-ID: <826ffc730604231006uab5bfc1pa6353837c291af1@mail.gmail.com>

If you use Subversion to get the development source code, it's still up,
too. Current revision: 3390 and counting rapidly (just 6 hours ago, it was
at 3384)!

On 4/23/06, Ryan Flegel <rflegel at gmail.com> wrote:
>
> Hi there,
>
> As you can see, there are some technical difficulties right now :).
> We're not sure how long these will persist but in the meantime you can
> download SuperTux from
> http://developer.berlios.de/project/showfiles.php?group_id=3467
>
> --
> Ryan
>
> On 4/21/06, Ana Maria de Paula <A.M.de-Paula at soton.ac.uk> wrote:
> > Dear Sir (Madam)
> >
> > There is some problems with your MySQL server. I am trying to
> > to the download page at supertux.berlios.de and I just get this message
> for
> > the last few days:
> >
> > Sorry! The wiki is experiencing some technical difficulties, and cannot
> > contact the database server.
> >  Can't connect to MySQL server on 'db.berlios.de' (146)
> >
> > Thanks,
> > Ana
> >
> > ---------------------------------------
> > Dr Ana Maria de Paula
> > Ultrafast X-ray group
> > School of Physics & Astronomy
> > University of Southampton
> > Southampton SO17 1BJ
> > phone: +44 (0)23 80593718
> > fax: +44 (0)23 80598799
> > ana at soton.ac.uk
> > ---------------------------------------
> >
> >
> > _______________________________________________
> > Supertux-devel mailing list
> > Supertux-devel at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/supertux-devel
> >
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/454d5bc7/attachment.html>

From allen at a-king.us  Sun Apr 23 19:01:09 2006
From: allen at a-king.us (Allen King)
Date: Sun, 23 Apr 2006 13:01:09 -0400
Subject: [Supertux-devel] "Remote Control" for Supertux -- status
In-Reply-To: <1145650821.11717.13.camel@taylor.local>
References: <44489F3E.5000205@a-king.us> <1145650821.11717.13.camel@taylor.local>
Message-ID: <444BB2D5.5090609@a-king.us>


Chris, Matt, et. al.

Great feedback.  This is converging.   I will resurface in a couple of 
days with a patch.  The patch will have only the minimal testing I can 
do on it, which is play the game for a while.  Also I won't be able to 
generate the patch until I get the instructions, which are on the wiki 
(which is down), or perhaps someone could send me them.

Based on what I understand, here is what I'm going to do.  (Things that 
are new or potentially contentious are in red.)

Question #1:

    a) Agree with Matze: Cross-platform random reproducibility is mostly
    useful for play-demo.  I will mostly use it to reproduce bugs
    encountered on long otherwise unreproducible runs.

    b) Added storage of seed in demo-file during demo_record, and recall
    in play_demo.  The implementation chosen adds a string, like
    "random_seed=1382233972", at the front of the file.  The player will
    now play files with or without the random seed string.  (It makes
    the reasonable assumption that files without a random seed don't
    begin with "random_seed=".)

    c) For my purposes, config settings is adequate, and it already
    works.  It is also a general tool.  I don't need network setting. 
    If someone has a religious objection, let me know.

Question #2: 

    a) I have called the random class RandomGenerator.
    b) Having heard no objections, I will use referenced code, with
    copyleft as shown. (http://www.jbox.dk/sanos/source/lib/random.c.html)

Question #3:

    a) Will make different names for the random calls as suggested. 
    Good feedback, good reasons.  Now, I need a *short memorable proper
    *name for it.  Currently thinking of SDL_rand() (as that is what it
    really is, and currently SDL doesn't have one). Another possibility
    is tux_rand().  Suggestions?
    b) Will put includes for RandomGenerator only in .cpp files using
    RandomGenerator, to minimize compile times.

Question #4: will comment out the call to srand in player.cpp

Question #5:

    a) will ignore squirrel's use of srand for now.  Note: squirrel's
    use of math_rand() properly uses SDL_rand().
    b) There is a case to be made for making SDL_srand() a nop.  I
    propose that, over furthur objections.
    c) Note Matze: If next time you import squirrel, you just "copy it
    over" (as you said in your email), you will wipe out the calls to
    SDL_rand() and break the repeatability!!!

Question #6: will not change generations of ~/.supertux/config

Question #7: will not add option to ./config


Thanks...

    Allen


Matze Braun wrote:
> Am Freitag, den 21.04.2006, 05:00 -0400 schrieb Allen King:
>   
>> I've been working on the "Remote Control" changes to Supertux that we
>> talked about last week, and have a first version that works -- I have
>> a program that supplies button presses from a canned list to supertux
>> over a port, and supertux returns a list of all the surfaces drawn,
>> with texture file names.  The changes are still fluid, so I'm inclined
>> not going to release any patches right yet.
>>
>> I told Matze I would next make a patch for platform independent
>> repeatable random numbers, and I am well on my way to completing that.
>> To finish,  I have some (seven) questions on the mods, which I would
>> like responses to (the first 3 are generic fishing and educational, on
>> the last 4 I need detailed answers):
>>
>> BASIC DESIGN:
>>         1) allows for two random generator modes, under control of the
>>         configuration file:  
>>                 a. If a (random_seed <decimal number>) line is present
>>                 in the configuration file, it is used used as the
>>                 random seed to start the run.  
>>                 
>>                 b. If the above line isn't there, the seed obtained
>>                 from time() in the usual way, and is additionally
>>                 printed, so it can later be pasted into the
>>                 configuration file if the run wants to be reproduced.
>>         QUESTION #1: seem reasonable?
>>     
> The deterministic random number generator is needed for 2 use cases:
> Saving Demos and Doing reproducible runs with your AI code. For the
> first case we have to save the seed in the demo file, in your case you
> probably want to send the seed over network. That would make alot more
> sense than putting it into a config file IMO.
>
>   
>>         2)  Files [.cpp/.hpp] for a platform-independent class
>>         RandomNumbers were added.  They were transliterated from C
>>         sources found at
>>         http://www.jbox.dk/sanos/source/lib/random.c.html.  A wizard
>>         friend of mine claimed this to be "the fastest and best
>>         quality" around.  
>>         
>>         QUESTION #2: any reason not to proceed this way? Is copyleft
>>         okay for supertux?
>>         
>>     
> Yep this is the most important part of all this. I personally would call
> the calss Random or RandomGenerator though...
>
>   
>>         3) I've included RandomNumbers in a wrapper file "rand.hpp"
>>         which redefines rand() and srand() for general consumption by
>>         supertux. WARNING: Supertux files which call rand() or srand()
>>         and which do NOT include rand.hpp will use the old rand
>>         facility, which will be neither initialized correctly,
>>         controllable by config, nor platform independent.  So this
>>         would not happen, I buried an include for rand.hpp deep in
>>         game_object.hpp, which is included by all the "bad guys".  I
>>         also (redundantly) added similar includes in all .cpp files
>>         which contained calls to [s]rand(), with a shameless
>>         promotional comment, so developers would get the idea.
>>         
>>         QUESTION #3: any objections to this?  suggestions of better
>>         ways (e.g. changing calls to rand to BlaBlaRand, and
>>         redefining rand() and srand() to print helpful errors?
>>     
>
> Please don't do that. It's not the C library implementation of rand and
> srand anymore, so don't make it look like it is. Also searching for
> errors is actually easier if you rename the function, because then you
> can simply grep for rand() to find (forbidden) usages of libc functions.
> (Additionally adding #includes into heavily used header files is
> something that should be avoided too, because it unnecessarily increases
> compile time and pollutes the namespace)
>
>   
>> SUPERTUX FUNCTIONALITY:
>>         4) There is a call to srand() in player.cpp, which occurs
>>         after a player is killed.  I do not understand why it would be
>>         necessary to do this -- it seems totally superfluous, but with
>>         my very limited knowledge am way too afraid to comment it out.
>>         It would be great if it could go!  As it stands now, random
>>         number repeatability  ceases after the first time Tux dies. 
>>         
>>         QUESTION #4 (THIS IS THE REASON I WROTE THIS EMAIL): Could
>>         someone verify that this call was just put in by someone who
>>         didn't understand random numbers (or not)?  If so, the
>>         solution is simple.  If not, not.
>>     
> Yep remove it.
>   
>>         
>>         5) There is another call to srand() in sqstdmath.cpp, but
>>         nobody in supertux-ville seems to call the routine that
>>         contains it.  I added an throw of runtime_error to discourage
>>         its future use.  
>>         
>>         QUESTION #5: Is this okay, or too harsh.
>>     
>
> All the code in src/squirrel is just a 1:1 copy of the squirrel
> scripting language into the supertux sources. Changes there don't make
> sense as when there's an update to squirrel, I'll just copy over the new
> squirrel files into these directories and the changes will be lost.
>
> I'd propose to simply ignore this issue for now :) If you wanna fix it
> then the way to go would be reimplmenting all squirrel library functions
> that deal with random numbers in supertux and replace the squirrel ones
> with the supertux ones in the roottable.
>   
>>         
>>         6) I was thinking of adding a commented-out setting of
>>         random_seed in the default ~/.supertux/config . (I noted that
>>         that was made for me when I first ran supertux, but a cursory
>>         scan didn't show me how.)
>>         
>>         QUESTION #6:  Can someone help me determine how I would modify
>>         the default ~/.supertux/config?  I will do this if someone
>>         does.
>>         
>>     
> Default values come from Config::Config() constructor and the file is
> written in the Config::save() function. But as stated above I don't
> think putting the seed into the config is a good idea.
>
>   
>>         7)  One could turn on/off the use of platform-independent
>>         random_numbers with a ./configure --<option> .  
>>         
>>         QUESTION #7: Is it worth doing?  Enough so that someone could
>>         outline the requisite changes to  configure.ac (and friends).
>>         
>>     
> 1 way of doing things is really enough here, we have fewer bloat and
> maintainence problems by not having additional options.
>
> Greetings,
> 	Matze
>
>
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/f60cc4af/attachment.html>

From EvilGlowingApple at gmail.com  Sun Apr 23 20:59:29 2006
From: EvilGlowingApple at gmail.com (Jayson Kempinger)
Date: Sun, 23 Apr 2006 13:59:29 -0500
Subject: [Supertux-devel] Bug report for svn revision 3382
In-Reply-To: <1145776618.18276.2.camel@taylor.local>
References: <F4DC972C-4238-4DB5-B6D9-597885CDD493@gmail.com>
 <1145776618.18276.2.camel@taylor.local>
Message-ID: <873ECE14-02DE-4D3B-B0E6-85B4DE7B550D@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Thanks for the help Matze.  Running the game from the supertux source  
directory works, but I still get the issue with the config file.  I  
am letting supertux create the .supertux directory and all the config/ 
save files.  When I look at the config file in nano/vim/emacs, there  
is a character where the ')' is supposed to be, but it's not a ')'.   
It shows up as '^@' in all editors.  If I modify the config file to  
add the ')' it seems to work fine, but as soon as I run and exit the  
game (whether I change options or not) supertux regenerates the  
config file and puts the '^@' back in.  Changing the options in the  
middle of the game writes the config file correctly, but once I exit  
the '^@' is written.

Jayson


- ----------------------------------------------------------------------
This message is digitally signed with GnuPG.
http://www.kempinger.homelinux.net/EvilGlowingApple at gmail.com.GPG.html

(see http://www.gnupg.org/gph/en/manual.html#AEN136
for information on how to verify this message)
- ----------------------------------------------------------------------


On Apr 23, 2006, at 2:16 AM, Matze Braun wrote:

> Am Samstag, den 22.04.2006, 21:03 -0500 schrieb Jayson Kempinger:
>> Hi,
>> Been playing around with the development version of SuperTux and ran
>> into a few bugs.  First, none of my settings save.  When the app
>> begins it uses the default (music on, sound on, fullscreen, etc).  If
>> I change those to music off, sound off, windowed for example and then
>> restart the game, it uses the default settings again.  Here's a copy
>> of the config file in my ~/.supertux directory
>>
>>
>>> (supertux-config
>>>   (show_fps #f)
>>>   (cheats #f)
>>>   (video
>>>     (fullscreen #f)
>>>     (width 800)
>>>     (height 600)
>>>   )
>>>   (audio
>>>     (sound_enabled #f)
>>>     (music_enabled #f)
>>>   )
>>>   (control
>>>     (keymap
>>>       (map
>>>         (key 13)
>>>         (control "menu-select")
>>>       )
>>>       (map
>>>         (key 19)
>>>         (control "pause-menu")
>>>       )
>>>       (map
>>>         (key 27)
>>>         (control "pause-menu")
>>>       )
>>>       (map
>>>         (key 32)
>>>         (control "jump")
>>>       )
>>>       (map
>>>         (key 94)
>>>         (control "console")
>>>       )
>>>       (map
>>>         (key 112)
>>>         (control "pause-menu")
>>>       )
>>>       (map
>>>         (key 271)
>>>         (control "menu-select")
>>>       )
>>>       (map
>>>         (key 273)
>>>         (control "up")
>>>       )
>>>       (map
>>>         (key 274)
>>>         (control "down")
>>>       )
>>>       (map
>>>         (key 275)
>>>         (control "right")
>>>       )
>>>       (map
>>>         (key 276)
>>>         (control "left")
>>>       )
>>>       (map
>>>         (key 306)
>>>         (control "action")
>>>       )
>>>       (map
>>>         (key 308)
>>>         (control "action"
> Here you are missing a )
> Are you sure the supertux game created that config file? I couldn't  
> see
> anything wrong in the source or manage to make supertux create such a
> config file.
>
>>>       )
>>>     )
>>>     (joystick
>>>       (use_hat #t)
>>>       (axis_x 0)
>>>       (axis_y 1)
>>>       (dead_zone_x 1000)
>>>       (dead_zone_y 1000)
>>>       (map
>>>         (button 0)
>>>         (control "jump")
>>>       )
>>>       (map
>>>         (button 1)
>>>         (control "action")
>>>       )
>>>     )
>>>   )
>>> )
>>
>>
>> When I run the app (compiled with debug enabled) this is what I  
>> get in
>> the terminal:
>>
>>
>>> [INFO] src/main.cpp:195 [/Users/jayson/.supertux] is in the search
>>> path
>>> [INFO] src/main.cpp:195 [/usr/local/share/supertux] is in the search
>>> path
>>> [INFO] src/main.cpp:469 Component 'controller' finished after 0.201
>>> seconds
>>> [INFO] src/main.cpp:68 Couldn't load config file: Parse Error at
>>> line 84: Unexpected EOF., using default settings
>>> [INFO] src/main.cpp:469 Component 'config' finished after 0.174
>>> seconds
>>> [INFO] src/main.cpp:469 Component 'tinygettext' finished after 0.002
>>> seconds
>>> [INFO] src/main.cpp:469 Component 'commandline' finished after 0.001
>>> seconds
>>> [INFO] src/main.cpp:469 Component 'audio' finished after 0.461
>>> seconds
>>> [INFO] src/main.cpp:469 Component 'video' finished after 3.62
>>> seconds
>>> [WARNING] src/script_manager.cpp:102 Couldn't load default.nut:
>>> Couldn't open file 'scripts/default.nut': No such file or directory
>>> [INFO] src/main.cpp:469 Component 'scripting' finished after 0.007
>>> seconds
>>> [DEBUG] src/tile_manager.cpp:47 Tiles loaded in 0.117 seconds
>>> [INFO] src/main.cpp:469 Component 'resources' finished after 0.524
>>> seconds
>>> [DEBUG] src/world.cpp:226 Couldn't load savegame: Couldn't open file
>>> 'save/world1_1.stsg': No such file or directory
>>> [WARNING] src/sector.cpp:447 Spawnpoint 'main' not found.
>>>
>>>
>>> AN ERROR HAS OCCURED [the index 'println' does not exist]
>>>
>>>
>>> CALLSTACK
>>> *FUNCTION [main()] levels/world1//world.nut line [9]
>>>
>>>
>>> LOCALS
>>> [this] TABLE
>>> Problem executing script: Squirrel error: Couldn't resume script
>>> (the index 'println' does not exist)
>>
>>
>> Line 84 is the last ')' in the file and as far as I can tell each '('
>> has a ')', so I'm not sure what the parse error is.  The other error
>> I've been having is as soon as the intro is done the game returns to
>> the main screen and the CALLSTACK listed above is throw in the
>> terminal.  Afterward when I open the game up again the save slots  
>> show
>> a blank instead of Free and cannot be used anymore (e.g. 'Slot 1 -  
>> ').
>> I've tried it several times and get the same error.  Tried  
>> recompiling
>> and reinstalling but I get the same issue.  Also tried deleting
>> ~/.supertux and allowing the app to recreate it, but that didn't
>> change anything either.
>
> The problem is that the "jam install" target is currently broken and
> leaves out some files like default.nut (and it'll probably stay broken
> until shortly before the release). But you can just run the game from
> the supertux directory where you compiled instead.
>
> Greetings,
> 	Matze
>
>>
>
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.3 (Darwin)

iD8DBQFES86RW6oxcmeg/20RAqNvAJ9WEzuTmd4Nle8pCfJsRzTf+9mSyACfeLT+
I9lJB4abUv/t3MfDYqybAFA=
=A/Tx
-----END PGP SIGNATURE-----


From EvilGlowingApple at gmail.com  Sun Apr 23 21:07:48 2006
From: EvilGlowingApple at gmail.com (Jayson Kempinger)
Date: Sun, 23 Apr 2006 14:07:48 -0500
Subject: [Supertux-devel] Way to skip intro on new game
Message-ID: <984D8823-1C27-434A-B920-7434F184DEC5@gmail.com>

Hi,
	In the svn version of supertux milestone 2, is there any way to skip  
the intro when a new game is started?  I've tried all the usual keys  
(return, esc, space, mouse clicks), but nothing works.  Don't get me  
wrong, the intro's a great intro..especially hearing tux speak ;),  
but having an option to skip the intro would be nice, especially as I  
play more and more new games.

Thanks, Jayson

P.S. I sent this out before under the wrong e-mail address (one  
that's not registered to this list), so whomever is moderating it can  
just delete that one

----------------------------------------------------------------------
This message is digitally signed with GnuPG.
http://www.kempinger.homelinux.net/EvilGlowingApple at gmail.com.GPG.html

(see http://www.gnupg.org/gph/en/manual.html#AEN136
for information on how to verify this message)
----------------------------------------------------------------------


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/66711b53/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/66711b53/attachment.pgp>

From rflegel at gmail.com  Sun Apr 23 21:18:20 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Sun, 23 Apr 2006 13:18:20 -0600
Subject: [Supertux-devel] "Remote Control" for Supertux -- status
In-Reply-To: <444BB2D5.5090609@a-king.us>
References: <44489F3E.5000205@a-king.us>
	 <1145650821.11717.13.camel@taylor.local> <444BB2D5.5090609@a-king.us>
Message-ID: <5a5496320604231218x28f21d8eu55f26b8e9aebce6c@mail.gmail.com>

On 4/23/06, Allen King <allen at a-king.us> wrote:
>
>  Chris, Matt, et. al.
>
>  Great feedback.  This is converging.   I will resurface in a couple of days
> with a patch.  The patch will have only the minimal testing I can do on it,
> which is play the game for a while.  Also I won't be able to generate the
> patch until I get the instructions, which are on the wiki (which is down),
> or perhaps someone could send me them.

The wiki is back up (for now).

Run "svn diff > my.patch" from the supertux/ directory to create a
patch file. You can also use "svn diff file1 file2 file3 ... >
my.patch" to only make diffs from the files you specify.

>  Question #1:

>  c) For my purposes, config settings is adequate, and it already works.  It
> is also a general tool.  I don't need network setting.  If someone has a
> religious objection, let me know.

What are you putting in the config settings? I thought you were just
holding a random seed, which is now in the demo files? Or do you
loading the random seed for your remote control from the config? If
so, I would think it would make the most sense to actually set it
remotely.

>  Question #2:
>
> a) I have called the random class RandomGenerator.

Sounds good.

>  b) Having heard no objections, I will use referenced code, with copyleft as
> shown. (http://www.jbox.dk/sanos/source/lib/random.c.html)

Yep, that code is okay. It is GPL compatible (I think it's BSD, but
I'm too lazy to check :).

> Question #3:
>
> a) Will make different names for the random calls as suggested.  Good
> feedback, good reasons.  Now, I need a short memorable proper name for it.
> Currently thinking of SDL_rand() (as that is what it really is, and
> currently SDL doesn't have one). Another possibility is tux_rand().
> Suggestions?
>  b) Will put includes for RandomGenerator only in .cpp files using
> RandomGenerator, to minimize compile times.

The SDL_ prefix is for SDL functions and using that prefix would be
confusing. Perhaps RandomGenerator should be a singleton class?

RandomGenerator::instance()->srand()
RandomGenerator::instance()->rand()

--
Ryan


From EvilGlowingApple at gmail.com  Mon Apr 24 04:25:26 2006
From: EvilGlowingApple at gmail.com (Jayson Kempinger)
Date: Sun, 23 Apr 2006 21:25:26 -0500
Subject: [Supertux-devel] Worldmap error, can't enter level
Message-ID: <7E71BC62-C970-4EB0-A6FF-92C244147EB5@gmail.com>

Hi, in SVN revision 3410, I can't get to a level on the map.  When I  
move to the second level down and then move left one, I can't move up  
to get to that level (the one by the snowman closest to the beginning  
of the world).  I get a debug warning of "src/worldmap/worldmap.cpp: 
526 No level to enter at: 18, 8".

Jayson

----------------------------------------------------------------------
This message is digitally signed with GnuPG.
http://www.kempinger.homelinux.net/EvilGlowingApple at gmail.com.GPG.html

(see http://www.gnupg.org/gph/en/manual.html#AEN136
for information on how to verify this message)
----------------------------------------------------------------------


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/d66c81ab/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/d66c81ab/attachment.pgp>

From EvilGlowingApple at gmail.com  Mon Apr 24 04:36:39 2006
From: EvilGlowingApple at gmail.com (Jayson Kempinger)
Date: Sun, 23 Apr 2006 21:36:39 -0500
Subject: [Supertux-devel] Re: Worldmap error, can't enter level
In-Reply-To: <7E71BC62-C970-4EB0-A6FF-92C244147EB5@gmail.com>
References: <7E71BC62-C970-4EB0-A6FF-92C244147EB5@gmail.com>
Message-ID: <588B9644-EA65-449F-9E4E-8FB62AFA1065@gmail.com>

Nevermind...I had the up key bound to something else and didn't  
realize that the keybindings also affect the worlds in addition to  
the levels.

Jayson

On Apr 23, 2006, at 9:25 PM, Jayson Kempinger wrote:

> Hi, in SVN revision 3410, I can't get to a level on the map.  When  
> I move to the second level down and then move left one, I can't  
> move up to get to that level (the one by the snowman closest to the  
> beginning of the world).  I get a debug warning of "src/worldmap/ 
> worldmap.cpp:526 No level to enter at: 18, 8".
>
> Jayson
>
> ----------------------------------------------------------------------
> This message is digitally signed with GnuPG.
> http://www.kempinger.homelinux.net/EvilGlowingApple at gmail.com.GPG.html
>
> (see http://www.gnupg.org/gph/en/manual.html#AEN136
> for information on how to verify this message)
> ----------------------------------------------------------------------
>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/b32d0b0e/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060423/b32d0b0e/attachment.pgp>

From rflegel at gmail.com  Mon Apr 24 09:51:37 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Mon, 24 Apr 2006 01:51:37 -0600
Subject: [Supertux-devel] Commit list hook scripts
Message-ID: <5a5496320604240051g2178f1dfn414be24a5ad6376a@mail.gmail.com>

I've been messing with the commit list hook scripts a bit, so if
something seems off, don't worry about it. I'll get around to it in
the morning :).

--
Ryan


From allen at a-king.us  Tue Apr 25 19:39:48 2006
From: allen at a-king.us (Allen King)
Date: Tue, 25 Apr 2006 13:39:48 -0400
Subject: [Supertux-devel] "Remote Control" for Supertux -- random repeatability patch
In-Reply-To: <5a5496320604231218x28f21d8eu55f26b8e9aebce6c@mail.gmail.com>
References: <44489F3E.5000205@a-king.us>	 <1145650821.11717.13.camel@taylor.local> <444BB2D5.5090609@a-king.us> <5a5496320604231218x28f21d8eu55f26b8e9aebce6c@mail.gmail.com>
Message-ID: <444E5EE4.3080000@a-king.us>

Attached is a patch for supertux which I promised.  Its features are:

    * automatic reproducibility of demo files across architectures, by
      storing and recalling the seed in the demo file. This works even
      if tux dies and the previous-life button presses are discarded.
    * The seed used on all runs is logged, and the ability to specify
      that seed later in the configuration file (with a (random_seed
      <decimal number>) line in the ~/.supertux/config file, at the same
      level as control).  This is what I find easiest to use (unless
      someone has a religious objection).
    * An instance object: RandomGenerator systemRandom is defined in the
      global namespace in random_generator.hpp.  It has the methods below. 

          o int systemRandom.srand(int seed)               sets the
            random seed

            like normal srand(), except if it's argument is the special
            seed 0, it uses time(0) to fetch a non-zero time randomized
            seed.  It also returns the seed it used in all cases.  A 31
            bit seed is used (positive, non-zero).

          o int
            systemRandom.rand()                                         
            return value in [0, INT_MAX)
          o int systemRandom.rand(int v)                                
            return value in [0, v)
          o int systemRandom.rand(int u, int v)                    
            return value in [u, v)
          o double systemRandom.randf(double v)                    
            return value in [0, v)
          o double systemRandom.randf(double u, double v)    return
            value in [u, v)

            All of the above generate random positive int's.  The value
            returned is evenly distributed between u (or 0 if not
            specified) and v (or RAND_MAX if not specified).  Return
            values may include u, but never v.

    There are 45 rand() calls in supertux code (as of r3480), and they
    have all been switched over, with care.  I hope people like how much
    cleaner the code looks with this interface.  There is one slight
    mathematical enhancement when switching over to randf().  I mention
    it only because operation is sliii...iitely different.  I will call
    it the "*picket fence*" issue:  When one specifies
    (rand()%100)/100.0, one gets an even distribution of 100 probability
    impulses, at 0.0, 0.01, 0.02, .... 0.98, 0.99.  When one specifies
    randf(1.0), on gets a *continuum* of numbers between 0.0 and
    0.9999999.  My take is that should not matter at all, because all
    are for physical parameters like a position or a speed, and nobody
    will notice. 

    * Use math_rand() within squirrel scripts will currently be
      repeatable, and calls to math_srand() are ignored.  This behavior
      will break (calls to math_rand will not be repeatable) if a new
      version of squirrel is copied into src/squirrel without including
      a 4-line change to sqstdmath.cpp

As always, comments are appreciated...

Hope this gets into the sources soon.

          Allen

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060425/d9c7e94b/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: RandomGenerator.patch
Type: text/x-patch
Size: 43358 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060425/d9c7e94b/attachment.bin>

From rflegel at gmail.com  Wed Apr 26 05:03:46 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Tue, 25 Apr 2006 21:03:46 -0600
Subject: [Supertux-devel] "Remote Control" for Supertux -- random repeatability patch
In-Reply-To: <444E5EE4.3080000@a-king.us>
References: <44489F3E.5000205@a-king.us>
	 <1145650821.11717.13.camel@taylor.local> <444BB2D5.5090609@a-king.us>
	 <5a5496320604231218x28f21d8eu55f26b8e9aebce6c@mail.gmail.com>
	 <444E5EE4.3080000@a-king.us>
Message-ID: <5a5496320604252003s1caf8dacq256ae2bfad66572@mail.gmail.com>

Hey,

I committed your patch with a few changes. Please let me know if I
inadvertantly broke something that you depend on.

On 4/25/06, Allen King <allen at a-king.us> wrote:

> The seed used on all runs is logged, and the ability to specify that seed
> later in the configuration file (with a (random_seed <decimal number>) line
> in the ~/.supertux/config file, at the same level as control).  This is what
> I find easiest to use (unless someone has a religious objection).
> An instance object: RandomGenerator systemRandom is defined in the global
> namespace in random_generator.hpp.  It has the methods below.

I suppose this works, but wouldn't it make sense to set the seed from
your remote control?

> There is one slight mathematical enhancement
> when switching over to randf().  I mention it only because operation is
> sliii...iitely different.  I will call it the "picket fence" issue:  When
> one specifies (rand()%100)/100.0, one gets an even distribution of 100
> probability impulses, at 0.0, 0.01, 0.02, .... 0.98, 0.99.  When one
> specifies randf(1.0), on gets a continuum of numbers between 0.0 and
> 0.9999999.  My take is that should not matter at all, because all are for
> physical parameters like a position or a speed, and nobody will notice.

Ah, yes. Good catch.

> Use math_rand() within squirrel scripts will currently be repeatable, and
> calls to math_srand() are ignored.  This behavior will break (calls to
> math_rand will not be repeatable) if a new version of squirrel is copied
> into src/squirrel without including a 4-line change to sqstdmath.cpp
>  As always, comments are appreciated...

I didn't make your changes to squirrel code, but I did at a wrapper
for the RandomGenerator class so squirrel scripts can now use
RandomGenerator.rand() and friends (see
src/scripting/random_generator.hpp). We might be able to override the
srand() and rand() squirrel functions to throw an exception so scripts
can't use them. Matze will know more about that.

--
Ryan


From matze at braunis.de  Wed Apr 26 10:53:59 2006
From: matze at braunis.de (Matze Braun)
Date: Wed, 26 Apr 2006 10:53:59 +0200
Subject: [Supertux-devel] Re: [Supertux-commit] r3436 - trunk/supertux/src/badguy
In-Reply-To: <200604260559.k3Q5xs3T013697@sheep.berlios.de>
References: <200604260559.k3Q5xs3T013697@sheep.berlios.de>
Message-ID: <1146041639.6287.0.camel@taylor.local>

Why did you do that? This was done on purpose and it's nice and logical
if a bomb explodes if you hit it with a bullet.

Greetings,
	Matze

Am Mittwoch, den 26.04.2006, 07:59 +0200 schrieb sik0fewl at berlios.de:
> Author: sik0fewl
> Date: 2006-04-26 07:59:31 +0200 (Wed, 26 Apr 2006)
> New Revision: 3436
> 
> Modified:
>    trunk/supertux/src/badguy/mrbomb.cpp
>    trunk/supertux/src/badguy/mrbomb.hpp
> Log:
> Cause MrBomb to be instantly killed by invincibility or bullets
> 
> Modified: trunk/supertux/src/badguy/mrbomb.cpp
> ===================================================================
> --- trunk/supertux/src/badguy/mrbomb.cpp	2006-04-26 02:13:42 UTC (rev 3435)
> +++ trunk/supertux/src/badguy/mrbomb.cpp	2006-04-26 05:59:31 UTC (rev 3436)
> @@ -110,13 +110,4 @@
>    return CONTINUE;
>  }
>  
> -void
> -MrBomb::kill_fall()
> -{
> -  remove_me();
> -  Bomb* bomb = new Bomb(get_pos(), dir);
> -  Sector::current()->add_object(bomb);
> -  bomb->explode();
> -}
> -
>  IMPLEMENT_FACTORY(MrBomb, "mrbomb")
> 
> Modified: trunk/supertux/src/badguy/mrbomb.hpp
> ===================================================================
> --- trunk/supertux/src/badguy/mrbomb.hpp	2006-04-26 02:13:42 UTC (rev 3435)
> +++ trunk/supertux/src/badguy/mrbomb.hpp	2006-04-26 05:59:31 UTC (rev 3436)
> @@ -33,7 +33,6 @@
>    void write(lisp::Writer& writer);
>    HitResponse collision_solid(GameObject& other, const CollisionHit& hit);
>    HitResponse collision_badguy(BadGuy& badguy, const CollisionHit& hit);
> -  void kill_fall();
>  
>  protected:
>    bool collision_squished(Player& player);
> 
> _______________________________________________
> Supertux-commit mailing list
> Supertux-commit at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-commit



From matze at braunis.de  Wed Apr 26 11:01:56 2006
From: matze at braunis.de (Matze Braun)
Date: Wed, 26 Apr 2006 11:01:56 +0200
Subject: [Supertux-devel] Re: [Supertux-commit] r3435 - in trunk/supertux:
 data/levels/world1 src src/badguy src/object src/scripting
In-Reply-To: <200604260215.k3Q2FISt012913@sheep.berlios.de>
References: <200604260215.k3Q2FISt012913@sheep.berlios.de>
Message-ID: <1146042116.6287.8.camel@taylor.local>

Am Mittwoch, den 26.04.2006, 04:15 +0200 schrieb sik0fewl at berlios.de:
> Author: sik0fewl
> Date: 2006-04-26 04:13:42 +0200 (Wed, 26 Apr 2006)
> New Revision: 3435
> 
> Added:
>    trunk/supertux/src/random_generator.cpp
>    trunk/supertux/src/random_generator.hpp
>    trunk/supertux/src/scripting/random_generator.hpp
> Modified:
>    trunk/supertux/data/levels/world1/intro.nut
>    trunk/supertux/src/badguy/dispenser.cpp
>    trunk/supertux/src/badguy/kugelblitz.cpp
>    trunk/supertux/src/badguy/skullyhop.cpp
>    trunk/supertux/src/badguy/stalactite.cpp
>    trunk/supertux/src/badguy/zeekling.cpp
>    trunk/supertux/src/game_session.cpp
>    trunk/supertux/src/gameconfig.cpp
>    trunk/supertux/src/gameconfig.hpp
>    trunk/supertux/src/main.cpp
>    trunk/supertux/src/mainloop.cpp
>    trunk/supertux/src/object/fireworks.cpp
>    trunk/supertux/src/object/gameobjs.cpp
>    trunk/supertux/src/object/particles.cpp
>    trunk/supertux/src/object/particlesystem.cpp
>    trunk/supertux/src/object/particlesystem_interactive.cpp
>    trunk/supertux/src/object/player.cpp
>    trunk/supertux/src/object/skull_tile.cpp
>    trunk/supertux/src/object/unstable_tile.cpp
>    trunk/supertux/src/scripting/player.hpp
>    trunk/supertux/src/scripting/squirrel_util.cpp
>    trunk/supertux/src/scripting/wrapper.cpp
>    trunk/supertux/src/scripting/wrapper.hpp
>    trunk/supertux/src/scripting/wrapper.interface.hpp
>    trunk/supertux/src/title.cpp
> Log:
> Committing RandomGenerator patch from Allen King, with a few small changes
> Created scripting wrapper for the random number generator
>  - could someone check this over to make sure I did it properly? :)
> ...

Some comments:

I don't feel too well about the copyright:

"2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution."

We should rather search for an alternative. What about extracting code
from glibc or so?



I don't like the squirrel interface like that. I'll change that to a
single rand() function and override the one built into the squirrel
standard library, otherwise we still can't be sure that the user is
using our random numbers.

Greetings,
	Matze




From allen at a-king.us  Wed Apr 26 17:50:47 2006
From: allen at a-king.us (Allen King)
Date: Wed, 26 Apr 2006 11:50:47 -0400
Subject: [Supertux-devel] "Remote Control" for Supertux -- random repeatability
 patch
In-Reply-To: <5a5496320604252003s1caf8dacq256ae2bfad66572@mail.gmail.com>
References: <44489F3E.5000205@a-king.us>	 <1145650821.11717.13.camel@taylor.local> <444BB2D5.5090609@a-king.us>	 <5a5496320604231218x28f21d8eu55f26b8e9aebce6c@mail.gmail.com>	 <444E5EE4.3080000@a-king.us> <5a5496320604252003s1caf8dacq256ae2bfad66572@mail.gmail.com>
Message-ID: <444F96D7.5010608@a-king.us>

Ryan,

Thanks for getting it in so fast.  I reviewed the diffs , and they look 
reasonable by eyeball. 

    Changes to the wrapper as you did was the right thing to do.  Thanks
    for not having to learn that!
    I suspect the changes of 0.36 to 3.6 were substantive changes to the
    operation of supertux. 


However, there were some problems when I retested.

   1. The relative order of a) inz playdemo; b) inz random; c) inz
      recorddemo is important in main.cpp:483. (Playdemo might reads and
      sets the seed that initializes random, while recorddemo writes out
      the seed just used.)  It appears the changes to that effect in the
      first patch didn't get in.
   2. It appears that a player dieing now no longer re-invokes
      MainLoop::run, but instead is done entirely inside an an update()
      method inside run.  That breaks the rand_prints logic, and hence
      it was removed. No problem (just more printouts during test).

Other changes made, just because it's hard to debug w/o improving code, are:

   1. Improved RandomGenerator, consolidating method definitions, adding
      debug printouts, etc.
   2. The format of the string written in the demo for the random_seed
      has changed, to make debugging easer. (has no leading 0's (easier
      debugging, matches loginfo << random_seed)

Attached is a patch file.  (It is 10% the size of the previous ;^)

    Allen

Ryan Flegel wrote:
> Hey,
>
> I committed your patch with a few changes. Please let me know if I
> inadvertantly broke something that you depend on.
>
> On 4/25/06, Allen King <allen at a-king.us> wrote:
>
>   
>> The seed used on all runs is logged, and the ability to specify that seed
>> later in the configuration file (with a (random_seed <decimal number>) line
>> in the ~/.supertux/config file, at the same level as control).  This is what
>> I find easiest to use (unless someone has a religious objection).
>> An instance object: RandomGenerator systemRandom is defined in the global
>> namespace in random_generator.hpp.  It has the methods below.
>>     
>
> I suppose this works, but wouldn't it make sense to set the seed from
> your remote control?
>
>   
>> There is one slight mathematical enhancement
>> when switching over to randf().  I mention it only because operation is
>> sliii...iitely different.  I will call it the "picket fence" issue:  When
>> one specifies (rand()%100)/100.0, one gets an even distribution of 100
>> probability impulses, at 0.0, 0.01, 0.02, .... 0.98, 0.99.  When one
>> specifies randf(1.0), on gets a continuum of numbers between 0.0 and
>> 0.9999999.  My take is that should not matter at all, because all are for
>> physical parameters like a position or a speed, and nobody will notice.
>>     
>
> Ah, yes. Good catch.
>
>   
>> Use math_rand() within squirrel scripts will currently be repeatable, and
>> calls to math_srand() are ignored.  This behavior will break (calls to
>> math_rand will not be repeatable) if a new version of squirrel is copied
>> into src/squirrel without including a 4-line change to sqstdmath.cpp
>>  As always, comments are appreciated...
>>     
>
> I didn't make your changes to squirrel code, but I did at a wrapper
> for the RandomGenerator class so squirrel scripts can now use
> RandomGenerator.rand() and friends (see
> src/scripting/random_generator.hpp). We might be able to override the
> srand() and rand() squirrel functions to throw an exception so scripts
> can't use them. Matze will know more about that.
>
> --
> Ryan
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060426/2e63b8e6/attachment.html>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: RandomGenerator.patch2
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060426/2e63b8e6/attachment.ksh>

From jothesmo at gmail.com  Wed Apr 26 21:37:30 2006
From: jothesmo at gmail.com (Jonathan Campbell)
Date: Wed, 26 Apr 2006 15:37:30 -0400
Subject: [Supertux-devel] dev version bug
Message-ID: <e5aaa77a0604261237u2a9a6d7cr623f170f5b246fd5@mail.gmail.com>

Greetings

I just finished compiling the development version of SuperTux (the
newest build) and tried to launch it. However, it quits after showing
a transparent window. The file stderr has the following:

[INFO] src/main.cpp:195 [C:\Documents and
Settings\Administrator\.supertux] is in the search path
[INFO] src/main.cpp:195 [c:\msys\1.0\build\supertux\/data] is in the search path
[INFO] src/main.cpp:429 Component 'controller' finished after 0.2 seconds
[INFO] src/main.cpp:68 Couldn't load config file: Couldn't open file
'config': The system cannot find the file specified.
, using default settings
[INFO] src/main.cpp:429 Component 'config' finished after 0 seconds
[INFO] src/main.cpp:429 Component 'tinygettext' finished after 0.001 seconds
[INFO] src/main.cpp:429 Component 'commandline' finished after 0 seconds
[INFO] src/main.cpp:429 Component 'audio' finished after 0.202 seconds
[INFO] src/main.cpp:429 Component 'video' finished after 0.278 seconds
[INFO] src/main.cpp:429 Component 'scripting' finished after 0.005 seconds
[DEBUG] src/tile_manager.cpp:47 Tiles loaded in 0.059 seconds
[INFO] src/main.cpp:429 Component 'resources' finished after 0.236 seconds
Assertion failed: x < RAND_MAX, file src/random_generator.cpp, line 57

I'm running Windows XP with all updates installed. To compile it, I
followed the instructions on this page on the wiki:
http://supertux.berlios.de/wiki/index.php/Building_on_Windows

Any help would be appreciated. I'd really like to see this new version
of SuperTux.

Regards,
Joth Esmo


From rflegel at gmail.com  Thu Apr 27 00:00:03 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Wed, 26 Apr 2006 16:00:03 -0600
Subject: [Supertux-devel] Re: [Supertux-commit] r3435 - in trunk/supertux: data/levels/world1 src src/badguy src/object src/scripting
In-Reply-To: <1146042116.6287.8.camel@taylor.local>
References: <200604260215.k3Q2FISt012913@sheep.berlios.de>
	 <1146042116.6287.8.camel@taylor.local>
Message-ID: <5a5496320604261500l4330e38djfbd24713dd044324@mail.gmail.com>

On 4/26/06, Matze Braun <matze at braunis.de> wrote:
> Am Mittwoch, den 26.04.2006, 04:15 +0200 schrieb sik0fewl at berlios.de:
> > Author: sik0fewl
> > Date: 2006-04-26 04:13:42 +0200 (Wed, 26 Apr 2006)
> > New Revision: 3435
> >
> > Added:
> >    trunk/supertux/src/random_generator.cpp
> >    trunk/supertux/src/random_generator.hpp
> >    trunk/supertux/src/scripting/random_generator.hpp
> > Modified:
> >    trunk/supertux/data/levels/world1/intro.nut
> >    trunk/supertux/src/badguy/dispenser.cpp
> >    trunk/supertux/src/badguy/kugelblitz.cpp
> >    trunk/supertux/src/badguy/skullyhop.cpp
> >    trunk/supertux/src/badguy/stalactite.cpp
> >    trunk/supertux/src/badguy/zeekling.cpp
> >    trunk/supertux/src/game_session.cpp
> >    trunk/supertux/src/gameconfig.cpp
> >    trunk/supertux/src/gameconfig.hpp
> >    trunk/supertux/src/main.cpp
> >    trunk/supertux/src/mainloop.cpp
> >    trunk/supertux/src/object/fireworks.cpp
> >    trunk/supertux/src/object/gameobjs.cpp
> >    trunk/supertux/src/object/particles.cpp
> >    trunk/supertux/src/object/particlesystem.cpp
> >    trunk/supertux/src/object/particlesystem_interactive.cpp
> >    trunk/supertux/src/object/player.cpp
> >    trunk/supertux/src/object/skull_tile.cpp
> >    trunk/supertux/src/object/unstable_tile.cpp
> >    trunk/supertux/src/scripting/player.hpp
> >    trunk/supertux/src/scripting/squirrel_util.cpp
> >    trunk/supertux/src/scripting/wrapper.cpp
> >    trunk/supertux/src/scripting/wrapper.hpp
> >    trunk/supertux/src/scripting/wrapper.interface.hpp
> >    trunk/supertux/src/title.cpp
> > Log:
> > Committing RandomGenerator patch from Allen King, with a few small changes
> > Created scripting wrapper for the random number generator
> >  - could someone check this over to make sure I did it properly? :)
> > ...
>
> Some comments:
>
> I don't feel too well about the copyright:
>
> "2. Redistributions in binary form must reproduce the above copyright
> notice, this list of conditions and the following disclaimer in the
> documentation and/or other materials provided with the distribution."

This is the BSD licence.. it should be no problem for us, the Linux
kernel itself uses BSD code (in fact, I don't think there are any OSs
that dont :). All that it requires is that we include the same text
that is at the beginning of the source files in a text file in the
binary distribution. It would just be another file to go along with
LICENCE or we could even tag it at the end of LICENCE.

> I don't like the squirrel interface like that. I'll change that to a
> single rand() function and override the one built into the squirrel
> standard library, otherwise we still can't be sure that the user is
> using our random numbers.

Okay, sounds good.

--
Ryan


From rflegel at gmail.com  Thu Apr 27 00:21:17 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Wed, 26 Apr 2006 16:21:17 -0600
Subject: [Supertux-devel] "Remote Control" for Supertux -- random repeatability patch
In-Reply-To: <444F96D7.5010608@a-king.us>
References: <44489F3E.5000205@a-king.us>
	 <1145650821.11717.13.camel@taylor.local> <444BB2D5.5090609@a-king.us>
	 <5a5496320604231218x28f21d8eu55f26b8e9aebce6c@mail.gmail.com>
	 <444E5EE4.3080000@a-king.us>
	 <5a5496320604252003s1caf8dacq256ae2bfad66572@mail.gmail.com>
	 <444F96D7.5010608@a-king.us>
Message-ID: <5a5496320604261521q535426a5q67de2dcd491ed725@mail.gmail.com>

On 4/26/06, Allen King <allen at a-king.us> wrote:
>  Ryan,
>
>  Thanks for getting it in so fast.  I reviewed the diffs , and they look
> reasonable by eyeball.

No problem. I had nothing better to do :)

> Changes to the wrapper as you did was the right thing to do.  Thanks for not
> having to learn that!

Actually, Matze decided it would probably be best if we just
interfaced the rand() function instead, to keep it simpler for those
doing scripting, so he simply overrode the sqstdmath's rand()
function.

>  I suspect the changes of 0.36 to 3.6 were substantive changes to the
> operation of supertux.

Yeah, it was causing infinite loops on levels with particle effects.
You made a mistake in your multiplication. No biggy.

>  However, there were some problems when I retested.
>
>
> The relative order of a) inz playdemo; b) inz random; c) inz recorddemo is
> important in main.cpp:483. (Playdemo might reads and sets the seed that
> initializes random, while recorddemo writes out the seed just used.)  It
> appears the changes to that effect in the first patch didn't get in.

Hmm.. I might have fiddled with the order when doing some debugging. I
can change it back.

> It appears that a player dieing now no longer re-invokes MainLoop::run, but
> instead is done entirely inside an an update() method inside run.  That
> breaks the rand_prints logic, and hence it was removed. No problem (just
> more printouts during test).

That wasn't me :)

> Other changes made, just because it's hard to
> debug w/o improving code, are:
>
>
> Improved RandomGenerator, consolidating method definitions, adding debug
> printouts, etc.
> The format of the string written in the demo for the random_seed has
> changed, to make debugging easer. (has no leading 0's (easier debugging,
> matches loginfo << random_seed) Attached is a patch file.  (It is 10% the
> size of the previous ;^)

Improved code is almost always good :) I will commit it shortly. Could
send your patches as attachments from now on? It's easier to download
than to copy & paste and makes the email less of a mess.

--
Thanks,
Ryan


From rflegel at gmail.com  Thu Apr 27 20:10:03 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Thu, 27 Apr 2006 12:10:03 -0600
Subject: [Supertux-devel] "Remote Control" for Supertux -- random repeatability patch
In-Reply-To: <5a5496320604261521q535426a5q67de2dcd491ed725@mail.gmail.com>
References: <44489F3E.5000205@a-king.us>
	 <1145650821.11717.13.camel@taylor.local> <444BB2D5.5090609@a-king.us>
	 <5a5496320604231218x28f21d8eu55f26b8e9aebce6c@mail.gmail.com>
	 <444E5EE4.3080000@a-king.us>
	 <5a5496320604252003s1caf8dacq256ae2bfad66572@mail.gmail.com>
	 <444F96D7.5010608@a-king.us>
	 <5a5496320604261521q535426a5q67de2dcd491ed725@mail.gmail.com>
Message-ID: <5a5496320604271110x54bd9d93k9f1b94ffe2c90da8@mail.gmail.com>

On 4/26/06, Ryan Flegel <rflegel at gmail.com> wrote:

> >  However, there were some problems when I retested.
> >
> >
> > The relative order of a) inz playdemo; b) inz random; c) inz recorddemo is
> > important in main.cpp:483. (Playdemo might reads and sets the seed that
> > initializes random, while recorddemo writes out the seed just used.)  It
> > appears the changes to that effect in the first patch didn't get in.
>
> Hmm.. I might have fiddled with the order when doing some debugging. I
> can change it back.

Hmm.. I applied your patch and if the init_rand() is called after the
play there is an exception thrown saying the random number generator
isn't initalised.


I think it's a better idea to keep separate rand() and rand(int v)
functions, since passing v = 0 is inconsistent with the functions
returning numbers in the range [u, v), so I won't commit the new
changes to random_generator.*. Also, we should leave those asserts
there. It seems there are some problems with the seeding on WIn32 (see
the thread regarding that).

--
Ryan


From rflegel at gmail.com  Thu Apr 27 23:12:12 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Thu, 27 Apr 2006 15:12:12 -0600
Subject: [Supertux-devel] Re: [Supertux-commit] r3436 - trunk/supertux/src/badguy
In-Reply-To: <1146041639.6287.0.camel@taylor.local>
References: <200604260559.k3Q5xs3T013697@sheep.berlios.de>
	 <1146041639.6287.0.camel@taylor.local>
Message-ID: <5a5496320604271412h5172564bgf84c7abad0e2ed2f@mail.gmail.com>

Well, I personally thought that it is more logical for the bomb to
just fall, since that's what all the other badguys do. Although I
understand why a bullet should make him explode.

Anyway, I'll change the behaviour back, since I seemed to be outnumbered here.

--
Ryan

On 4/26/06, Matze Braun <matze at braunis.de> wrote:
> Why did you do that? This was done on purpose and it's nice and logical
> if a bomb explodes if you hit it with a bullet.
>
> Greetings,
>         Matze
>
> Am Mittwoch, den 26.04.2006, 07:59 +0200 schrieb sik0fewl at berlios.de:
> > Author: sik0fewl
> > Date: 2006-04-26 07:59:31 +0200 (Wed, 26 Apr 2006)
> > New Revision: 3436
> >
> > Modified:
> >    trunk/supertux/src/badguy/mrbomb.cpp
> >    trunk/supertux/src/badguy/mrbomb.hpp
> > Log:
> > Cause MrBomb to be instantly killed by invincibility or bullets
> >
> > Modified: trunk/supertux/src/badguy/mrbomb.cpp
> > ===================================================================
> > --- trunk/supertux/src/badguy/mrbomb.cpp      2006-04-26 02:13:42 UTC (rev 3435)
> > +++ trunk/supertux/src/badguy/mrbomb.cpp      2006-04-26 05:59:31 UTC (rev 3436)
> > @@ -110,13 +110,4 @@
> >    return CONTINUE;
> >  }
> >
> > -void
> > -MrBomb::kill_fall()
> > -{
> > -  remove_me();
> > -  Bomb* bomb = new Bomb(get_pos(), dir);
> > -  Sector::current()->add_object(bomb);
> > -  bomb->explode();
> > -}
> > -
> >  IMPLEMENT_FACTORY(MrBomb, "mrbomb")
> >
> > Modified: trunk/supertux/src/badguy/mrbomb.hpp
> > ===================================================================
> > --- trunk/supertux/src/badguy/mrbomb.hpp      2006-04-26 02:13:42 UTC (rev 3435)
> > +++ trunk/supertux/src/badguy/mrbomb.hpp      2006-04-26 05:59:31 UTC (rev 3436)
> > @@ -33,7 +33,6 @@
> >    void write(lisp::Writer& writer);
> >    HitResponse collision_solid(GameObject& other, const CollisionHit& hit);
> >    HitResponse collision_badguy(BadGuy& badguy, const CollisionHit& hit);
> > -  void kill_fall();
> >
> >  protected:
> >    bool collision_squished(Player& player);
> >
> > _______________________________________________
> > Supertux-commit mailing list
> > Supertux-commit at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/supertux-commit
>
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>


From thommy at globo.com  Thu Apr 27 23:35:15 2006
From: thommy at globo.com (thommy at globo.com)
Date: Thu, 27 Apr 2006 18:35:15 -0300
Subject: [Supertux-devel] Re: [Supertux-commit] r3436 - trunk/supertux/src/badguy
In-Reply-To: <5a5496320604271412h5172564bgf84c7abad0e2ed2f@mail.gmail.com>
Message-ID: <43EB8CF0000C8596@riosf06.globoi.com>

I prefer for it falling, not exploding....

I know that is not "logical" but anyway, penguins twroing bouncing fireballs
is not "logical" either. :P

So Ryan, you are not alone here ;)

[]'s
 '>'-- Mensagem Original --
 '>'From: "Ryan Flegel" <rflegel at gmail.com>
 '>'To: supertux-devel at berlios.de
 '>'Subject: Re: [Supertux-devel] Re: [Supertux-commit] r3436 - trunk/supertux/src/badguy
 '>'Reply-To: supertux-devel at berlios.de
 '>'Date: Thu, 27 Apr 2006 15:12:12 -0600
 '>'
 '>'
 '>'Well, I personally thought that it is more logical for the bomb to
 '>'just fall, since that's what all the other badguys do. Although I
 '>'understand why a bullet should make him explode.
 '>'
 '>'Anyway, I'll change the behaviour back, since I seemed to be outnumbered
 '>'here.
 '>'
 '>'--
 '>'Ryan
 '>'
 '>'On 4/26/06, Matze Braun <matze at braunis.de> wrote:
 '>'> Why did you do that? This was done on purpose and it's nice and logical
 '>'> if a bomb explodes if you hit it with a bullet.
 '>'>
 '>'> Greetings,
 '>'>         Matze
 '>'>
 '>'> Am Mittwoch, den 26.04.2006, 07:59 +0200 schrieb sik0fewl at berlios.de:
 '>'> > Author: sik0fewl
 '>'> > Date: 2006-04-26 07:59:31 +0200 (Wed, 26 Apr 2006)
 '>'> > New Revision: 3436
 '>'> >
 '>'> > Modified:
 '>'> >    trunk/supertux/src/badguy/mrbomb.cpp
 '>'> >    trunk/supertux/src/badguy/mrbomb.hpp
 '>'> > Log:
 '>'> > Cause MrBomb to be instantly killed by invincibility or bullets
 '>'> >
 '>'> > Modified: trunk/supertux/src/badguy/mrbomb.cpp
 '>'> > ===================================================================
 '>'> > --- trunk/supertux/src/badguy/mrbomb.cpp      2006-04-26 02:13:42
UTC
 '>'(rev 3435)
 '>'> > +++ trunk/supertux/src/badguy/mrbomb.cpp      2006-04-26 05:59:31
UTC
 '>'(rev 3436)
 '>'> > @@ -110,13 +110,4 @@
 '>'> >    return CONTINUE;
 '>'> >  }
 '>'> >
 '>'> > -void
 '>'> > -MrBomb::kill_fall()
 '>'> > -{
 '>'> > -  remove_me();
 '>'> > -  Bomb* bomb = new Bomb(get_pos(), dir);
 '>'> > -  Sector::current()->add_object(bomb);
 '>'> > -  bomb->explode();
 '>'> > -}
 '>'> > -
 '>'> >  IMPLEMENT_FACTORY(MrBomb, "mrbomb")
 '>'> >
 '>'> > Modified: trunk/supertux/src/badguy/mrbomb.hpp
 '>'> > ===================================================================
 '>'> > --- trunk/supertux/src/badguy/mrbomb.hpp      2006-04-26 02:13:42
UTC
 '>'(rev 3435)
 '>'> > +++ trunk/supertux/src/badguy/mrbomb.hpp      2006-04-26 05:59:31
UTC
 '>'(rev 3436)
 '>'> > @@ -33,7 +33,6 @@
 '>'> >    void write(lisp::Writer& writer);
 '>'> >    HitResponse collision_solid(GameObject& other, const CollisionHit&
 '>'hit);
 '>'> >    HitResponse collision_badguy(BadGuy& badguy, const CollisionHit&
hit);
 '>'> > -  void kill_fall();
 '>'> >
 '>'> >  protected:
 '>'> >    bool collision_squished(Player& player);
 '>'> >
 '>'> > _______________________________________________
 '>'> > Supertux-commit mailing list
 '>'> > Supertux-commit at lists.berlios.de
 '>'> > http://lists.berlios.de/mailman/listinfo/supertux-commit
 '>'>
 '>'> _______________________________________________
 '>'> Supertux-devel mailing list
 '>'> Supertux-devel at lists.berlios.de
 '>'> http://lists.berlios.de/mailman/listinfo/supertux-devel
 '>'>
 '>'_______________________________________________
 '>'Supertux-devel mailing list
 '>'Supertux-devel at lists.berlios.de
 '>'http://lists.berlios.de/mailman/listinfo/supertux-devel




From ravu_al_hemio at berlios.de  Fri Apr 28 07:18:47 2006
From: ravu_al_hemio at berlios.de (Ravu al Hemio)
Date: Fri, 28 Apr 2006 07:18:47 +0200
Subject: [Supertux-devel] r3436 - trunk/supertux/src/badguy
In-Reply-To: <43EB8CF0000C8596@riosf06.globoi.com>
References: <43EB8CF0000C8596@riosf06.globoi.com>
Message-ID: <4451A5B7.1040902@berlios.de>

I'm for the explosion here. It prevents the player from rushing through 
levels with the fire bonus, which would make some levels too easy.

~~ Ondra

thommy at globo.com wrote:
> I prefer for it falling, not exploding....
>
> I know that is not "logical" but anyway, penguins twroing bouncing fireballs
> is not "logical" either. :P
>
> So Ryan, you are not alone here ;)
>
> []'s
>  '>'-- Mensagem Original --
>  '>'From: "Ryan Flegel" <rflegel at gmail.com>
>  '>'To: supertux-devel at berlios.de
>  '>'Subject: Re: [Supertux-devel] Re: [Supertux-commit] r3436 - trunk/supertux/src/badguy
>  '>'Reply-To: supertux-devel at berlios.de
>  '>'Date: Thu, 27 Apr 2006 15:12:12 -0600
>  '>'
>  '>'
>  '>'Well, I personally thought that it is more logical for the bomb to
>  '>'just fall, since that's what all the other badguys do. Although I
>  '>'understand why a bullet should make him explode.
>  '>'
>  '>'Anyway, I'll change the behaviour back, since I seemed to be outnumbered
>  '>'here.
>  '>'
>  '>'--
>  '>'Ryan
>  '>'
>  '>'On 4/26/06, Matze Braun <matze at braunis.de> wrote:
>  '>'> Why did you do that? This was done on purpose and it's nice and logical
>  '>'> if a bomb explodes if you hit it with a bullet.
>  '>'>
>  '>'> Greetings,
>  '>'>         Matze
>  '>'>
>  '>'> Am Mittwoch, den 26.04.2006, 07:59 +0200 schrieb sik0fewl at berlios.de:
>  '>'> > Author: sik0fewl
>  '>'> > Date: 2006-04-26 07:59:31 +0200 (Wed, 26 Apr 2006)
>  '>'> > New Revision: 3436
>  '>'> >
>  '>'> > Modified:
>  '>'> >    trunk/supertux/src/badguy/mrbomb.cpp
>  '>'> >    trunk/supertux/src/badguy/mrbomb.hpp
>  '>'> > Log:
>  '>'> > Cause MrBomb to be instantly killed by invincibility or bullets
>  '>'> >
>  '>'> > Modified: trunk/supertux/src/badguy/mrbomb.cpp
>  '>'> > ===================================================================
>  '>'> > --- trunk/supertux/src/badguy/mrbomb.cpp      2006-04-26 02:13:42
> UTC
>  '>'(rev 3435)
>  '>'> > +++ trunk/supertux/src/badguy/mrbomb.cpp      2006-04-26 05:59:31
> UTC
>  '>'(rev 3436)
>  '>'> > @@ -110,13 +110,4 @@
>  '>'> >    return CONTINUE;
>  '>'> >  }
>  '>'> >
>  '>'> > -void
>  '>'> > -MrBomb::kill_fall()
>  '>'> > -{
>  '>'> > -  remove_me();
>  '>'> > -  Bomb* bomb = new Bomb(get_pos(), dir);
>  '>'> > -  Sector::current()->add_object(bomb);
>  '>'> > -  bomb->explode();
>  '>'> > -}
>  '>'> > -
>  '>'> >  IMPLEMENT_FACTORY(MrBomb, "mrbomb")
>  '>'> >
>  '>'> > Modified: trunk/supertux/src/badguy/mrbomb.hpp
>  '>'> > ===================================================================
>  '>'> > --- trunk/supertux/src/badguy/mrbomb.hpp      2006-04-26 02:13:42
> UTC
>  '>'(rev 3435)
>  '>'> > +++ trunk/supertux/src/badguy/mrbomb.hpp      2006-04-26 05:59:31
> UTC
>  '>'(rev 3436)
>  '>'> > @@ -33,7 +33,6 @@
>  '>'> >    void write(lisp::Writer& writer);
>  '>'> >    HitResponse collision_solid(GameObject& other, const CollisionHit&
>  '>'hit);
>  '>'> >    HitResponse collision_badguy(BadGuy& badguy, const CollisionHit&
> hit);
>  '>'> > -  void kill_fall();
>  '>'> >
>  '>'> >  protected:
>  '>'> >    bool collision_squished(Player& player);
>  '>'> >
>  '>'> > _______________________________________________
>  '>'> > Supertux-commit mailing list
>  '>'> > Supertux-commit at lists.berlios.de
>  '>'> > http://lists.berlios.de/mailman/listinfo/supertux-commit
>  '>'>
>  '>'> _______________________________________________
>  '>'> Supertux-devel mailing list
>  '>'> Supertux-devel at lists.berlios.de
>  '>'> http://lists.berlios.de/mailman/listinfo/supertux-devel
>  '>'>
>  '>'_______________________________________________
>  '>'Supertux-devel mailing list
>  '>'Supertux-devel at lists.berlios.de
>  '>'http://lists.berlios.de/mailman/listinfo/supertux-devel
>   


From rflegel at gmail.com  Fri Apr 28 07:37:49 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Thu, 27 Apr 2006 23:37:49 -0600
Subject: [Supertux-devel] r3436 - trunk/supertux/src/badguy
In-Reply-To: <4451A5B7.1040902@berlios.de>
References: <43EB8CF0000C8596@riosf06.globoi.com> <4451A5B7.1040902@berlios.de>
Message-ID: <5a5496320604272237h474482aatf2f6edbd5b06025d@mail.gmail.com>

Well, then what's the point of having the fire bonus? :)

On 4/27/06, Ravu al Hemio <ravu_al_hemio at berlios.de> wrote:
> I'm for the explosion here. It prevents the player from rushing through
> levels with the fire bonus, which would make some levels too easy.
>
> ~~ Ondra
>
> thommy at globo.com wrote:
> > I prefer for it falling, not exploding....
> >
> > I know that is not "logical" but anyway, penguins twroing bouncing fireballs
> > is not "logical" either. :P
> >
> > So Ryan, you are not alone here ;)
> >
> > []'s
> >  '>'-- Mensagem Original --
> >  '>'From: "Ryan Flegel" <rflegel at gmail.com>
> >  '>'To: supertux-devel at berlios.de
> >  '>'Subject: Re: [Supertux-devel] Re: [Supertux-commit] r3436 - trunk/supertux/src/badguy
> >  '>'Reply-To: supertux-devel at berlios.de
> >  '>'Date: Thu, 27 Apr 2006 15:12:12 -0600
> >  '>'
> >  '>'
> >  '>'Well, I personally thought that it is more logical for the bomb to
> >  '>'just fall, since that's what all the other badguys do. Although I
> >  '>'understand why a bullet should make him explode.
> >  '>'
> >  '>'Anyway, I'll change the behaviour back, since I seemed to be outnumbered
> >  '>'here.
> >  '>'
> >  '>'--
> >  '>'Ryan
> >  '>'
> >  '>'On 4/26/06, Matze Braun <matze at braunis.de> wrote:
> >  '>'> Why did you do that? This was done on purpose and it's nice and logical
> >  '>'> if a bomb explodes if you hit it with a bullet.
> >  '>'>
> >  '>'> Greetings,
> >  '>'>         Matze
> >  '>'>
> >  '>'> Am Mittwoch, den 26.04.2006, 07:59 +0200 schrieb sik0fewl at berlios.de:
> >  '>'> > Author: sik0fewl
> >  '>'> > Date: 2006-04-26 07:59:31 +0200 (Wed, 26 Apr 2006)
> >  '>'> > New Revision: 3436
> >  '>'> >
> >  '>'> > Modified:
> >  '>'> >    trunk/supertux/src/badguy/mrbomb.cpp
> >  '>'> >    trunk/supertux/src/badguy/mrbomb.hpp
> >  '>'> > Log:
> >  '>'> > Cause MrBomb to be instantly killed by invincibility or bullets
> >  '>'> >
> >  '>'> > Modified: trunk/supertux/src/badguy/mrbomb.cpp
> >  '>'> > ===================================================================
> >  '>'> > --- trunk/supertux/src/badguy/mrbomb.cpp      2006-04-26 02:13:42
> > UTC
> >  '>'(rev 3435)
> >  '>'> > +++ trunk/supertux/src/badguy/mrbomb.cpp      2006-04-26 05:59:31
> > UTC
> >  '>'(rev 3436)
> >  '>'> > @@ -110,13 +110,4 @@
> >  '>'> >    return CONTINUE;
> >  '>'> >  }
> >  '>'> >
> >  '>'> > -void
> >  '>'> > -MrBomb::kill_fall()
> >  '>'> > -{
> >  '>'> > -  remove_me();
> >  '>'> > -  Bomb* bomb = new Bomb(get_pos(), dir);
> >  '>'> > -  Sector::current()->add_object(bomb);
> >  '>'> > -  bomb->explode();
> >  '>'> > -}
> >  '>'> > -
> >  '>'> >  IMPLEMENT_FACTORY(MrBomb, "mrbomb")
> >  '>'> >
> >  '>'> > Modified: trunk/supertux/src/badguy/mrbomb.hpp
> >  '>'> > ===================================================================
> >  '>'> > --- trunk/supertux/src/badguy/mrbomb.hpp      2006-04-26 02:13:42
> > UTC
> >  '>'(rev 3435)
> >  '>'> > +++ trunk/supertux/src/badguy/mrbomb.hpp      2006-04-26 05:59:31
> > UTC
> >  '>'(rev 3436)
> >  '>'> > @@ -33,7 +33,6 @@
> >  '>'> >    void write(lisp::Writer& writer);
> >  '>'> >    HitResponse collision_solid(GameObject& other, const CollisionHit&
> >  '>'hit);
> >  '>'> >    HitResponse collision_badguy(BadGuy& badguy, const CollisionHit&
> > hit);
> >  '>'> > -  void kill_fall();
> >  '>'> >
> >  '>'> >  protected:
> >  '>'> >    bool collision_squished(Player& player);
> >  '>'> >
> >  '>'> > _______________________________________________
> >  '>'> > Supertux-commit mailing list
> >  '>'> > Supertux-commit at lists.berlios.de
> >  '>'> > http://lists.berlios.de/mailman/listinfo/supertux-commit
> >  '>'>
> >  '>'> _______________________________________________
> >  '>'> Supertux-devel mailing list
> >  '>'> Supertux-devel at lists.berlios.de
> >  '>'> http://lists.berlios.de/mailman/listinfo/supertux-devel
> >  '>'>
> >  '>'_______________________________________________
> >  '>'Supertux-devel mailing list
> >  '>'Supertux-devel at lists.berlios.de
> >  '>'http://lists.berlios.de/mailman/listinfo/supertux-devel
> >
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>


From Lerc at screamingduck.com  Fri Apr 28 07:59:30 2006
From: Lerc at screamingduck.com (Screaming Duck Software)
Date: Fri, 28 Apr 2006 17:59:30 +1200
Subject: [Supertux-devel] Snow appearance
Message-ID: <4451AF42.6090104@screamingduck.com>

Hi all,  I'm new to the entire svn development thing.  Just getting 
started with doing bits to SuperTux.  Bare with me if I do some screw 
ups along the way.

I figured I'd start width something lightweight so I'm mucking with the 
snow effect.

I have made some new snowflakes. What are opinions of the new look.  
Better, worse?

http://screamingduck.fileburst.com/Cruft/supertux_newsnow.jpg



From djwings at gmail.com  Fri Apr 28 13:06:39 2006
From: djwings at gmail.com (djwings at gmail.com)
Date: Fri, 28 Apr 2006 07:06:39 -0400
Subject: [Supertux-devel] r3436 - trunk/supertux/src/badguy
In-Reply-To: <5a5496320604272237h474482aatf2f6edbd5b06025d@mail.gmail.com>
References: <43EB8CF0000C8596@riosf06.globoi.com> <4451A5B7.1040902@berlios.de>
	 <5a5496320604272237h474482aatf2f6edbd5b06025d@mail.gmail.com>
Message-ID: <826ffc730604280406y26a909bck174528fba266335b@mail.gmail.com>

It's to make it a bit easier, and add a minor twist to the game. Emphasis on
minor. I say go with the explosion.

On 4/28/06, Ryan Flegel <rflegel at gmail.com> wrote:
>
> Well, then what's the point of having the fire bonus? :)
>
> On 4/27/06, Ravu al Hemio <ravu_al_hemio at berlios.de> wrote:
> > I'm for the explosion here. It prevents the player from rushing through
> > levels with the fire bonus, which would make some levels too easy.
> >
> > ~~ Ondra
> >
> > thommy at globo.com wrote:
> > > I prefer for it falling, not exploding....
> > >
> > > I know that is not "logical" but anyway, penguins twroing bouncing
> fireballs
> > > is not "logical" either. :P
> > >
> > > So Ryan, you are not alone here ;)
> > >
> > > []'s
> > >  '>'-- Mensagem Original --
> > >  '>'From: "Ryan Flegel" <rflegel at gmail.com>
> > >  '>'To: supertux-devel at berlios.de
> > >  '>'Subject: Re: [Supertux-devel] Re: [Supertux-commit] r3436 -
> trunk/supertux/src/badguy
> > >  '>'Reply-To: supertux-devel at berlios.de
> > >  '>'Date: Thu, 27 Apr 2006 15:12:12 -0600
> > >  '>'
> > >  '>'
> > >  '>'Well, I personally thought that it is more logical for the bomb to
> > >  '>'just fall, since that's what all the other badguys do. Although I
> > >  '>'understand why a bullet should make him explode.
> > >  '>'
> > >  '>'Anyway, I'll change the behaviour back, since I seemed to be
> outnumbered
> > >  '>'here.
> > >  '>'
> > >  '>'--
> > >  '>'Ryan
> > >  '>'
> > >  '>'On 4/26/06, Matze Braun <matze at braunis.de> wrote:
> > >  '>'> Why did you do that? This was done on purpose and it's nice and
> logical
> > >  '>'> if a bomb explodes if you hit it with a bullet.
> > >  '>'>
> > >  '>'> Greetings,
> > >  '>'>         Matze
> > >  '>'>
> > >  '>'> Am Mittwoch, den 26.04.2006, 07:59 +0200 schrieb
> sik0fewl at berlios.de:
> > >  '>'> > Author: sik0fewl
> > >  '>'> > Date: 2006-04-26 07:59:31 +0200 (Wed, 26 Apr 2006)
> > >  '>'> > New Revision: 3436
> > >  '>'> >
> > >  '>'> > Modified:
> > >  '>'> >    trunk/supertux/src/badguy/mrbomb.cpp
> > >  '>'> >    trunk/supertux/src/badguy/mrbomb.hpp
> > >  '>'> > Log:
> > >  '>'> > Cause MrBomb to be instantly killed by invincibility or
> bullets
> > >  '>'> >
> > >  '>'> > Modified: trunk/supertux/src/badguy/mrbomb.cpp
> > >  '>'> >
> ===================================================================
> > >  '>'> > --- trunk/supertux/src/badguy/mrbomb.cpp      2006-04-26
> 02:13:42
> > > UTC
> > >  '>'(rev 3435)
> > >  '>'> > +++ trunk/supertux/src/badguy/mrbomb.cpp      2006-04-26
> 05:59:31
> > > UTC
> > >  '>'(rev 3436)
> > >  '>'> > @@ -110,13 +110,4 @@
> > >  '>'> >    return CONTINUE;
> > >  '>'> >  }
> > >  '>'> >
> > >  '>'> > -void
> > >  '>'> > -MrBomb::kill_fall()
> > >  '>'> > -{
> > >  '>'> > -  remove_me();
> > >  '>'> > -  Bomb* bomb = new Bomb(get_pos(), dir);
> > >  '>'> > -  Sector::current()->add_object(bomb);
> > >  '>'> > -  bomb->explode();
> > >  '>'> > -}
> > >  '>'> > -
> > >  '>'> >  IMPLEMENT_FACTORY(MrBomb, "mrbomb")
> > >  '>'> >
> > >  '>'> > Modified: trunk/supertux/src/badguy/mrbomb.hpp
> > >  '>'> >
> ===================================================================
> > >  '>'> > --- trunk/supertux/src/badguy/mrbomb.hpp      2006-04-26
> 02:13:42
> > > UTC
> > >  '>'(rev 3435)
> > >  '>'> > +++ trunk/supertux/src/badguy/mrbomb.hpp      2006-04-26
> 05:59:31
> > > UTC
> > >  '>'(rev 3436)
> > >  '>'> > @@ -33,7 +33,6 @@
> > >  '>'> >    void write(lisp::Writer& writer);
> > >  '>'> >    HitResponse collision_solid(GameObject& other, const
> CollisionHit&
> > >  '>'hit);
> > >  '>'> >    HitResponse collision_badguy(BadGuy& badguy, const
> CollisionHit&
> > > hit);
> > >  '>'> > -  void kill_fall();
> > >  '>'> >
> > >  '>'> >  protected:
> > >  '>'> >    bool collision_squished(Player& player);
> > >  '>'> >
> > >  '>'> > _______________________________________________
> > >  '>'> > Supertux-commit mailing list
> > >  '>'> > Supertux-commit at lists.berlios.de
> > >  '>'> > http://lists.berlios.de/mailman/listinfo/supertux-commit
> > >  '>'>
> > >  '>'> _______________________________________________
> > >  '>'> Supertux-devel mailing list
> > >  '>'> Supertux-devel at lists.berlios.de
> > >  '>'> http://lists.berlios.de/mailman/listinfo/supertux-devel
> > >  '>'>
> > >  '>'_______________________________________________
> > >  '>'Supertux-devel mailing list
> > >  '>'Supertux-devel at lists.berlios.de
> > >  '>'http://lists.berlios.de/mailman/listinfo/supertux-devel
> > >
> > _______________________________________________
> > Supertux-devel mailing list
> > Supertux-devel at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/supertux-devel
> >
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060428/2eaa6a8a/attachment.html>

From wansti at gmx.de  Fri Apr 28 14:33:07 2006
From: wansti at gmx.de (Marek M.)
Date: Fri, 28 Apr 2006 14:33:07 +0200
Subject: [Supertux-devel] r3436 - trunk/supertux/src/badguy
In-Reply-To: <826ffc730604280406y26a909bck174528fba266335b@mail.gmail.com>
References: <43EB8CF0000C8596@riosf06.globoi.com>
	 <4451A5B7.1040902@berlios.de>
	 <5a5496320604272237h474482aatf2f6edbd5b06025d@mail.gmail.com>
	 <826ffc730604280406y26a909bck174528fba266335b@mail.gmail.com>
Message-ID: <1146227588.7712.0.camel@rincewind.discworld.wansti.de>

On Fri, 2006-04-28 at 07:06 -0400, djwings at gmail.com wrote:
> It's to make it a bit easier, and add a minor twist to the game.
> Emphasis on minor. I say go with the explosion.

Yep, I like the explosion better, too.
	Marek



From joseph.brower at gmail.com  Fri Apr 28 17:19:56 2006
From: joseph.brower at gmail.com (joseph brower)
Date: Fri, 28 Apr 2006 09:19:56 -0600
Subject: [Supertux-devel] Snow appearance
In-Reply-To: <4451AF42.6090104@screamingduck.com>
References: <4451AF42.6090104@screamingduck.com>
Message-ID: <a82cfa150604280819s560a217dta4b9e6a85388177@mail.gmail.com>

Looks good to me.   My wife likes it too.

On 4/27/06, Screaming Duck Software <Lerc at screamingduck.com> wrote:
> Hi all,  I'm new to the entire svn development thing.  Just getting
> started with doing bits to SuperTux.  Bare with me if I do some screw
> ups along the way.
>
> I figured I'd start width something lightweight so I'm mucking with the
> snow effect.
>
> I have made some new snowflakes. What are opinions of the new look.
> Better, worse?
>
> http://screamingduck.fileburst.com/Cruft/supertux_newsnow.jpg
>
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>


From rflegel at gmail.com  Fri Apr 28 19:58:37 2006
From: rflegel at gmail.com (Ryan Flegel)
Date: Fri, 28 Apr 2006 11:58:37 -0600
Subject: [Supertux-devel] r3436 - trunk/supertux/src/badguy
In-Reply-To: <1146227588.7712.0.camel@rincewind.discworld.wansti.de>
References: <43EB8CF0000C8596@riosf06.globoi.com> <4451A5B7.1040902@berlios.de>
	 <5a5496320604272237h474482aatf2f6edbd5b06025d@mail.gmail.com>
	 <826ffc730604280406y26a909bck174528fba266335b@mail.gmail.com>
	 <1146227588.7712.0.camel@rincewind.discworld.wansti.de>
Message-ID: <5a5496320604281058n31d8c7a5g2794511ee1dbf1f2@mail.gmail.com>

Okay, then it's settled (for the most part :).

The bomb also explodes when bumped from beneath or hit by a kicked
mriceblock. Exploding from beneath is alright with me, but I think a
kicked mriceblock should kill him instantly.

Thoughts?

--
Ryan

On 4/28/06, Marek M. <wansti at gmx.de> wrote:
> On Fri, 2006-04-28 at 07:06 -0400, djwings at gmail.com wrote:
> > It's to make it a bit easier, and add a minor twist to the game.
> > Emphasis on minor. I say go with the explosion.
>
> Yep, I like the explosion better, too.
>         Marek
>
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>


From supertux at 2006.expires.deltadevelopment.de  Fri Apr 28 20:29:33 2006
From: supertux at 2006.expires.deltadevelopment.de (Christoph Sommer)
Date: Fri, 28 Apr 2006 20:29:33 +0200
Subject: killing Mr. Bomb (was: [Supertux-devel] r3436 - trunk/supertux/src/badguy)
In-Reply-To: <5a5496320604281058n31d8c7a5g2794511ee1dbf1f2@mail.gmail.com>
References: <43EB8CF0000C8596@riosf06.globoi.com> <4451A5B7.1040902@berlios.de>	 <5a5496320604272237h474482aatf2f6edbd5b06025d@mail.gmail.com>	 <826ffc730604280406y26a909bck174528fba266335b@mail.gmail.com>	 <1146227588.7712.0.camel@rincewind.discworld.wansti.de> <5a5496320604281058n31d8c7a5g2794511ee1dbf1f2@mail.gmail.com>
Message-ID: <44525F0D.6050407@2006.expires.deltadevelopment.de>

Ryan Flegel wrote:
> The bomb also explodes when bumped from beneath or hit by a kicked
> mriceblock. Exploding from beneath is alright with me, but I think a
> kicked mriceblock should kill him instantly.

I think this gets a bit confusing. Everybody, please vote at

http://supertux.berlios.de/wiki/index.php/Talk:MrBomb

thanks,

   Christoph


From goldenpiranha at gmail.com  Sat Apr 29 16:46:07 2006
From: goldenpiranha at gmail.com (Danny Bittman)
Date: Sat, 29 Apr 2006 07:46:07 -0700
Subject: [Supertux-devel] Snow appearance
In-Reply-To: <a82cfa150604280819s560a217dta4b9e6a85388177@mail.gmail.com>
References: <4451AF42.6090104@screamingduck.com>
	 <a82cfa150604280819s560a217dta4b9e6a85388177@mail.gmail.com>
Message-ID: <bcd1d8470604290746r6a654ee6xfd37c4ae60000c4e@mail.gmail.com>

Looks good to my too.

On 4/28/06, joseph brower <joseph.brower at gmail.com> wrote:
>
> Looks good to me.   My wife likes it too.
>
> On 4/27/06, Screaming Duck Software <Lerc at screamingduck.com> wrote:
> > Hi all,  I'm new to the entire svn development thing.  Just getting
> > started with doing bits to SuperTux.  Bare with me if I do some screw
> > ups along the way.
> >
> > I figured I'd start width something lightweight so I'm mucking with the
> > snow effect.
> >
> > I have made some new snowflakes. What are opinions of the new look.
> > Better, worse?
> >
> > http://screamingduck.fileburst.com/Cruft/supertux_newsnow.jpg
> >
> > _______________________________________________
> > Supertux-devel mailing list
> > Supertux-devel at lists.berlios.de
> > http://lists.berlios.de/mailman/listinfo/supertux-devel
> >
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060429/6fbcb546/attachment.html>

From allen at a-king.us  Sat Apr 29 17:41:40 2006
From: allen at a-king.us (Allen King)
Date: Sat, 29 Apr 2006 11:41:40 -0400
Subject: [Supertux-devel] dev version bug
In-Reply-To: <e5aaa77a0604261237u2a9a6d7cr623f170f5b246fd5@mail.gmail.com>
References: <e5aaa77a0604261237u2a9a6d7cr623f170f5b246fd5@mail.gmail.com>
Message-ID: <44538934.1060103@a-king.us>

Joth,

A new patch to fix that problem is in the works, and should be in svn 
shortly.  Should have been x <= RAND_MAX. For the moment, that line can 
be commented out, or the < changed to <= .

But the fact that this problem happened at all is curious to me, and I 
suspect another bug lurking nearby.  In particular, I would like to 
understand what about your XP setup caused that assertion error.  If 
RAND_MAX is 0x7fffffff, the largest int32, it would be improbably that 
time(0) would generate that (unless it's not working).  Or perhaps 
RAND_MAX is smaller.

If you can patch to the source code, would you replace the routine in 
random_generator.cpp with

    int RandomGenerator::srand(int x)    {
        int x0 = x;
        while (x == 0)                          // random seed of zero means
            x = time(0);                        // randomize with time
        printf("==== srand(%10d) (%10d) RAND_MAX=%x =====\n", x, x0,
    RAND_MAX);
        if (x < RAND_MAX) {
        }
        else {                                  // only allow posative
    31-bit seeds
            printf("ERROR: x=%x, x0=%x, RAND_MAX=%x\n", x, x0, RAND_MAX);
            assert(0);
        }
        RandomGenerator::srandom(x);
        return x;                               // let caller know seed used
    }

and recreate the failure.  Send me the command line used to invoke 
supertux, the failing printout (as you did), a copy of your 
~/.supertux/config file, and the patched copy of random_seed.cpp.  If 
you are you capable of debug, the variable config->random_seed should be 
traced.  Is it RAND_MAX at the assertion failure?  Who sets it that? 

Thanks for your help on this.

       Allen


Jonathan Campbell wrote:
> Greetings
>
> I just finished compiling the development version of SuperTux (the
> newest build) and tried to launch it. However, it quits after showing
> a transparent window. The file stderr has the following:
>
> [INFO] src/main.cpp:195 [C:\Documents and
> Settings\Administrator\.supertux] is in the search path
> [INFO] src/main.cpp:195 [c:\msys\1.0\build\supertux\/data] is in the search path
> [INFO] src/main.cpp:429 Component 'controller' finished after 0.2 seconds
> [INFO] src/main.cpp:68 Couldn't load config file: Couldn't open file
> 'config': The system cannot find the file specified.
> , using default settings
> [INFO] src/main.cpp:429 Component 'config' finished after 0 seconds
> [INFO] src/main.cpp:429 Component 'tinygettext' finished after 0.001 seconds
> [INFO] src/main.cpp:429 Component 'commandline' finished after 0 seconds
> [INFO] src/main.cpp:429 Component 'audio' finished after 0.202 seconds
> [INFO] src/main.cpp:429 Component 'video' finished after 0.278 seconds
> [INFO] src/main.cpp:429 Component 'scripting' finished after 0.005 seconds
> [DEBUG] src/tile_manager.cpp:47 Tiles loaded in 0.059 seconds
> [INFO] src/main.cpp:429 Component 'resources' finished after 0.236 seconds
> Assertion failed: x < RAND_MAX, file src/random_generator.cpp, line 57
>
> I'm running Windows XP with all updates installed. To compile it, I
> followed the instructions on this page on the wiki:
> http://supertux.berlios.de/wiki/index.php/Building_on_Windows
>
> Any help would be appreciated. I'd really like to see this new version
> of SuperTux.
>
> Regards,
> Joth Esmo
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060429/1974b136/attachment.html>

From allen at a-king.us  Sat Apr 29 17:42:01 2006
From: allen at a-king.us (Allen King)
Date: Sat, 29 Apr 2006 11:42:01 -0400
Subject: [Supertux-devel] "Remote Control" for Supertux -- random repeatability
 patch
In-Reply-To: <5a5496320604271110x54bd9d93k9f1b94ffe2c90da8@mail.gmail.com>
References: <44489F3E.5000205@a-king.us>	 <1145650821.11717.13.camel@taylor.local> <444BB2D5.5090609@a-king.us>	 <5a5496320604231218x28f21d8eu55f26b8e9aebce6c@mail.gmail.com>	 <444E5EE4.3080000@a-king.us>	 <5a5496320604252003s1caf8dacq256ae2bfad66572@mail.gmail.com>	 <444F96D7.5010608@a-king.us>	 <5a5496320604261521q535426a5q67de2dcd491ed725@mail.gmail.com> <5a5496320604271110x54bd9d93k9f1b94ffe2c90da8@mail.gmail.com>
Message-ID: <44538949.9050702@a-king.us>

Was off on other things....

Ryan Flegel wrote:
> On 4/26/06, Ryan Flegel <rflegel at gmail.com> wrote:
>
>   
>>>  However, there were some problems when I retested.
>>>
>>>
>>> The relative order of a) inz playdemo; b) inz random; c) inz recorddemo is
>>> important in main.cpp:483. (Playdemo might reads and sets the seed that
>>> initializes random, while recorddemo writes out the seed just used.)  It
>>> appears the changes to that effect in the first patch didn't get in.
>>>       
>> Hmm.. I might have fiddled with the order when doing some debugging. I
>> can change it back.
>>     
>
> Hmm.. I applied your patch and if the init_rand() is called after the
> play there is an exception thrown saying the random number generator
> isn't initalised.
>   
The throw in RandomGenerator::random() is intended to discourage use of 
random() before it is initialized, and hence increase the chances of 
repeatable runs.  IMHO this is good.

I could not reconstruct your "throw", but I'm sure I don't test as 
much.  So I walked the code, and it appears that there are only two 
lines inside play_demo that might (or might someday) leak out and call 
random().  They are:

      demo_controller = new CodeController();
      tux.set_controller(demo_controller);

Doesn't seem like they would, but ...   So I added a method 
get_demo_random_seed() so that anything random in play_demo is repeatable.
>
> I think it's a better idea to keep separate rand() and rand(int v)
> functions, since passing v = 0 is inconsistent with the functions
> returning numbers in the range [u, v), so I won't commit the new
> changes to random_generator.*. 
Okay, the attached patch keeps rand() and rand(int v) separates, good point.
> Also, we should leave those asserts
> there. It seems there are some problems with the seeding on WIn32 (see
> the thread regarding that).
>   
Thanks for the head's up on that.  (I must say I haven't been scaring 
all of the posts.) I posted follow up on  Re: [Supertux-devel] dev 
version bug.
> --
> Ryan
> _______________________________________________
> Supertux-devel mailing list
> Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>
>   
Question (just curious): What methodology do you use to get the  patch 
files I send into supertux? I imagine you check out a fresh copy of 
supertux, use patch (or svn) to change the copy, then commit.  Is the 
process all/nothing?  Does it involve hand editing?  Another related 
question, does the white space (tabs v.s. spaces) in my patches go right 
into svn/supertux automatically.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060429/1c09de78/attachment.html>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: RandomGenerator.patch3
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060429/1c09de78/attachment.ksh>

From jothesmo at gmail.com  Sat Apr 29 20:42:06 2006
From: jothesmo at gmail.com (Joth Esmo)
Date: Sat, 29 Apr 2006 14:42:06 -0400
Subject: [Supertux-devel] dev version bug
In-Reply-To: <44538934.1060103@a-king.us>
References: <e5aaa77a0604261237u2a9a6d7cr623f170f5b246fd5@mail.gmail.com>
	 <44538934.1060103@a-king.us>
Message-ID: <e5aaa77a0604291142s424566e1of8386c50e3e412ca@mail.gmail.com>

I replaced the text in the .cpp file as you asked and compiled. The
error log (stderr) is attached. Line 72 of random_generator.cpp seems
to be the problem (the line being: assert(0);). Also attached is my
./supertux/config file. I start the application by opening MSYS,
navigating to my supertux directory, and issuing the command
'supertux.exe -w' (as per the Building on Windows page on the wiki --
however the -w has been recently removed).

In your email, you asked for the patched version of random_seed.cpp. I
assume you meant random_generator.cpp, which is attached.

I'm not sure what you mean by 'capable of debug'. Should I debug it
and then watch the value of the config variable? I didn't quite
understand your meaning.

PS> I changed the text in random_generator.cpp to read : x <= RAND_MAX
(as you requested).

Regards,
Joth

On 4/29/06, Allen King <allen at a-king.us> wrote:
> Joth,
>
> A new patch to fix that problem is in the works, and should be in svn
> shortly.  Should have been x <= RAND_MAX. For the moment, that line can be
> commented out, or the < changed to <= .
>
> But the fact that this problem happened at all is curious to me, and I
> suspect another bug lurking nearby.  In particular, I would like to
> understand what about your XP setup caused that assertion error.  If
> RAND_MAX is 0x7fffffff, the largest int32, it would be improbably that
> time(0) would generate that (unless it's not working).  Or perhaps RAND_MAX
> is smaller.
>
> If you can patch to the source code, would you replace the routine in
> random_generator.cpp with
> int RandomGenerator::srand(int x)    {
>     int x0 = x;
>     while (x == 0)                          // random seed of zero means
>         x = time(0);                        // randomize with time
>     printf("==== srand(%10d) (%10d) RAND_MAX=%x =====\n", x, x0, RAND_MAX);
>     if (x < RAND_MAX) {
>     }
>     else {                                  // only allow posative 31-bit
> seeds
>         printf("ERROR: x=%x, x0=%x, RAND_MAX=%x\n", x, x0, RAND_MAX);
>         assert(0);
>     }
>     RandomGenerator::srandom(x);
>     return x;                               // let caller
> know seed used
> }
> and recreate the failure.  Send me the command line used to invoke supertux,
> the failing printout (as you did), a copy of your ~/.supertux/config file,
> and the patched copy of random_seed.cpp.  If you are you capable of debug,
> the variable config->random_seed should be traced.  Is it RAND_MAX at the
> assertion failure?  Who sets it that?
>
> Thanks for your help on this.
>
>        Allen
>
>
> Jonathan Campbell wrote:
>
> Greetings I just finished compiling the development version of SuperTux (the
> newest build) and tried to launch it. However, it quits after showing a
> transparent window. The file stderr has the following: [INFO]
> src/main.cpp:195 [C:\Documents and
> Settings\Administrator\.supertux] is in the search path
> [INFO] src/main.cpp:195 [c:\msys\1.0\build\supertux\/data]
> is in the search path [INFO] src/main.cpp:429 Component 'controller'
> finished after 0.2 seconds [INFO] src/main.cpp:68 Couldn't load config file:
> Couldn't open file 'config': The system cannot find the file specified. ,
> using default settings [INFO] src/main.cpp:429 Component 'config' finished
> after 0 seconds [INFO] src/main.cpp:429 Component 'tinygettext' finished
> after 0.001 seconds [INFO] src/main.cpp:429 Component 'commandline' finished
> after 0 seconds [INFO] src/main.cpp:429 Component 'audio' finished after
> 0.202 seconds [INFO] src/main.cpp:429 Component 'video' finished after 0.278
> seconds [INFO] src/main.cpp:429 Component 'scripting' finished after 0.005
> seconds [DEBUG] src/tile_manager.cpp:47 Tiles loaded in 0.059 seconds [INFO]
> src/main.cpp:429 Component 'resources' finished after 0.236 seconds
> Assertion failed: x < RAND_MAX, file src/random_generator.cpp, line 57 I'm
> running Windows XP with all updates installed. To compile it, I followed the
> instructions on this page on the wiki:
> http://supertux.berlios.de/wiki/index.php/Building_on_Windows
> Any help would be appreciated. I'd really like to see this new version of
> SuperTux. Regards, Joth Esmo
> _______________________________________________
> Supertux-devel mailing list Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>
>


--
Flarbland: Your one and only stop for cheats, articles, comedy and
much, much more!
http://flarbland.bravehost.com
-------------- next part --------------
[INFO] src/main.cpp:195 [C:\Documents and Settings\HP_Administrator\.supertux] is in the search path
[INFO] src/main.cpp:195 [c:\msys\1.0\build\supertux2\/data] is in the search path
[INFO] src/main.cpp:429 Component 'controller' finished after 0.2 seconds
[WARNING] src/control/joystickkeyboardcontroller.cpp:192 Invalid button '0' in buttonmap
[WARNING] src/control/joystickkeyboardcontroller.cpp:192 Invalid button '1' in buttonmap
[INFO] src/main.cpp:429 Component 'config' finished after 0.021 seconds
[INFO] src/main.cpp:429 Component 'tinygettext' finished after 0 seconds
[INFO] src/main.cpp:429 Component 'commandline' finished after 0 seconds
[INFO] src/main.cpp:429 Component 'audio' finished after 0.302 seconds
[INFO] src/main.cpp:429 Component 'video' finished after 0.432 seconds
[INFO] src/main.cpp:429 Component 'scripting' finished after 0.034 seconds
[DEBUG] src/tile_manager.cpp:47 Tiles loaded in 0.057 seconds
[INFO] src/main.cpp:429 Component 'resources' finished after 0.217 seconds
Assertion failed: 0, file src/random_generator.cpp, line 72

This application has requested the Runtime to terminate it in an unusual way.
Please contact the application's support team for more information.





-------------- next part --------------
(supertux-config
  (show_fps #f)
  (cheats #f)
  (video
    (fullscreen #t)
    (width 800)
    (height 600)
  )
  (audio
    (sound_enabled #t)
    (music_enabled #t)
  )
  (control
    (keymap
      (map
        (key 13)
        (control "menu-select")
      )
      (map
        (key 19)
        (control "pause-menu")
      )
      (map
        (key 27)
        (control "pause-menu")
      )
      (map
        (key 94)
        (control "console")
      )
      (map
        (key 112)
        (control "pause-menu")
      )
      (map
        (key 271)
        (control "menu-select")
      )
      (map
        (key 273)
        (control "jump")
      )
      (map
        (key 274)
        (control "down")
      )
      (map
        (key 275)
        (control "right")
      )
      (map
        (key 276)
        (control "left")
      )
      (map
        (key 303)
        (control "up")
      )
      (map
        (key 304)
        (control "action")
      )
    )
    (joystick
      (use_hat #t)
      (axis_x 0)
      (axis_y 1)
      (dead_zone_x 1000)
      (dead_zone_y 1000)
      (map
        (button 0)
        (control "jump")
      )
      (map
        (button 1)
        (control "action")
      )
    )
  )
)




-------------- next part --------------
// $Id: random_generator.cpp 3435 2006-04-26 02:13:42Z sik0fewl $
// 
// A strong random number generator
//
// Copyright (C) 2006 Allen King
// Copyright (C) 2002 Michael Ringgaard. All rights reserved.
// Copyright (C) 1983, 1993 The Regents of the University of California.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 
// 1. Redistributions of source code must retain the above copyright 
//    notice, this list of conditions and the following disclaimer.  
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.  
// 3. Neither the name of the project nor the names of its contributors
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission. 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
// SUCH DAMAGE.

// Transliterated into C++ Allen King 060417, from sources on
//          http://www.jbox.dk/sanos/source/lib/random.c.html



#include <stdexcept>
#include "random_generator.hpp"
#include "scripting/squirrel_util.hpp"

RandomGenerator systemRandom;               // global random number generator

RandomGenerator::RandomGenerator() {
    assert(sizeof(int) >= 4);
    initialized = 0;
    initialize();
}

RandomGenerator::~RandomGenerator() {
}

/*int RandomGenerator::srand(int x)    {
    while (x == 0)                          // random seed of zero means
        x = time(0);                        // randomize with time
    assert(x < RAND_MAX);                   // only allow posative 31-bit seeds
    assert(sizeof(int) >= 4);
    srandom(x);
    return x;                               // let caller know seed used
}*/

int RandomGenerator::srand(int x)    {
    int x0 = x;
    while (x == 0)                          // random seed of zero means
        x = time(0);                        // randomize with time
    printf("==== srand(%10d) (%10d) RAND_MAX=%x =====\n", x, x0, RAND_MAX);
    if (x <= RAND_MAX) {
    }
    else {                                  // only allow posative 31-bit seeds
        printf("ERROR: x=%x, x0=%x, RAND_MAX=%x\n", x, x0, RAND_MAX);
        assert(0);
    }
    RandomGenerator::srandom(x);
    return x;                               // let caller know seed used
}

int RandomGenerator::rand()                 {        return random();    }

int RandomGenerator::rand(int v) {
    assert(v != 0 && v <= RAND_MAX);        // illegal arg: 0 or too big
    return RandomGenerator::random() % v;
}

int RandomGenerator::rand(int u, int v) {
    assert(v > u);    
    return u + RandomGenerator::rand(v-u);
}

double RandomGenerator::randf(double v) {
    float rv;
    while ((rv = (double)RandomGenerator::random() / RAND_MAX * v) >= v)
        ;                                   // never return v!
    return rv;
}

double RandomGenerator::randf(double u, double v) {
    return u + RandomGenerator::randf(v-u);
}

//-----------------------------------------------------------------------
//        
// Copyright (C) 2002 Michael Ringgaard. All rights reserved.
// Copyright (C) 1983, 1993 The Regents of the University of California.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 
// 1. Redistributions of source code must retain the above copyright 
//    notice, this list of conditions and the following disclaimer.  
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.  
// 3. Neither the name of the project nor the names of its contributors
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission. 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
// SUCH DAMAGE.
// 

//**#include <os.h>

//
// An improved random number generation package.  In addition to the standard
// rand()/srand() like interface, this package also has a special state info
// interface.  The initstate() routine is called with a seed, an array of
// bytes, and a count of how many bytes are being passed in; this array is
// then initialized to contain information for random number generation with
// that much state information.  Good sizes for the amount of state
// information are 32, 64, 128, and 256 bytes.  The state can be switched by
// calling the setstate() routine with the same array as was initiallized
// with initstate().  By default, the package runs with 128 bytes of state
// information and generates far better random numbers than a linear
// congruential generator.  If the amount of state information is less than
// 32 bytes, a simple linear congruential R.N.G. is used.
//
// Internally, the state information is treated as an array of longs; the
// zeroeth element of the array is the type of R.N.G. being used (small
// integer); the remainder of the array is the state information for the
// R.N.G.  Thus, 32 bytes of state information will give 7 longs worth of
// state information, which will allow a degree seven polynomial.  (Note:
// the zeroeth word of state information also has some other information
// stored in it -- see setstate() for details).
//
// The random number generation technique is a linear feedback shift register
// approach, employing trinomials (since there are fewer terms to sum up that
// way).  In this approach, the least significant bit of all the numbers in
// the state table will act as a linear feedback shift register, and will
// have period 2^deg - 1 (where deg is the degree of the polynomial being
// used, assuming that the polynomial is irreducible and primitive).  The
// higher order bits will have longer periods, since their values are also
// influenced by pseudo-random carries out of the lower bits.  The total
// period of the generator is approximately deg*(2**deg - 1); thus doubling
// the amount of state information has a vast influence on the period of the
// generator.  Note: the deg*(2**deg - 1) is an approximation only good for
// large deg, when the period of the shift is the dominant factor.
// With deg equal to seven, the period is actually much longer than the
// 7*(2**7 - 1) predicted by this formula.
//
// Modified 28 December 1994 by Jacob S. Rosenberg.
//

//
// For each of the currently supported random number generators, we have a
// break value on the amount of state information (you need at least this
// many bytes of state info to support this random number generator), a degree
// for the polynomial (actually a trinomial) that the R.N.G. is based on, and
// the separation between the two lower order coefficients of the trinomial.

void RandomGenerator::initialize() {

#define NSHUFF 100      // To drop part of seed -> 1st value correlation

//static long degrees[MAX_TYPES] = { DEG_0, DEG_1, DEG_2, DEG_3, DEG_4 };
//static long seps [MAX_TYPES] = { SEP_0, SEP_1, SEP_2, SEP_3, SEP_4 };

    degrees[0] = DEG_0;
    degrees[1] = DEG_1;
    degrees[2] = DEG_2;
    degrees[3] = DEG_3;
    degrees[4] = DEG_4;

    seps [0] = SEP_0;
    seps [1] = SEP_1;
    seps [2] = SEP_2;
    seps [3] = SEP_3;
    seps [4] = SEP_4;

//
// Initially, everything is set up as if from:
//
//  initstate(1, randtbl, 128);
//
// Note that this initialization takes advantage of the fact that srandom()
// advances the front and rear pointers 10*rand_deg times, and hence the
// rear pointer which starts at 0 will also end up at zero; thus the zeroeth
// element of the state information, which contains info about the current
// position of the rear pointer is just
//
//  MAX_TYPES * (rptr - state) + TYPE_3 == TYPE_3.

    randtbl[ 0] =  TYPE_3;
    randtbl[ 1] =  0x991539b1;
    randtbl[ 2] =  0x16a5bce3;
    randtbl[ 3] =  0x6774a4cd;
    randtbl[ 4] =  0x3e01511e;
    randtbl[ 5] =  0x4e508aaa;
    randtbl[ 6] =  0x61048c05;
    randtbl[ 7] =  0xf5500617;
    randtbl[ 8] =  0x846b7115;
    randtbl[ 9] =  0x6a19892c;
    randtbl[10] =  0x896a97af;
    randtbl[11] =  0xdb48f936;
    randtbl[12] =  0x14898454;
    randtbl[13] =  0x37ffd106;
    randtbl[14] =  0xb58bff9c;
    randtbl[15] =  0x59e17104;
    randtbl[16] =  0xcf918a49;
    randtbl[17] =  0x09378c83;
    randtbl[18] =  0x52c7a471;
    randtbl[19] =  0x8d293ea9;
    randtbl[20] =  0x1f4fc301;
    randtbl[21] =  0xc3db71be;
    randtbl[22] =  0x39b44e1c;
    randtbl[23] =  0xf8a44ef9;
    randtbl[24] =  0x4c8b80b1;
    randtbl[25] =  0x19edc328;
    randtbl[26] =  0x87bf4bdd;
    randtbl[27] =  0xc9b240e5;
    randtbl[28] =  0xe9ee4b1b;
    randtbl[29] =  0x4382aee7;
    randtbl[30] =  0x535b6b41;
    randtbl[31] =  0xf3bec5da;

// static long randtbl[DEG_3 + 1] = 
// {
//   TYPE_3;
//   0x991539b1, 0x16a5bce3, 0x6774a4cd, 0x3e01511e, 0x4e508aaa, 0x61048c05,
//   0xf5500617, 0x846b7115, 0x6a19892c, 0x896a97af, 0xdb48f936, 0x14898454,
//   0x37ffd106, 0xb58bff9c, 0x59e17104, 0xcf918a49, 0x09378c83, 0x52c7a471,
//   0x8d293ea9, 0x1f4fc301, 0xc3db71be, 0x39b44e1c, 0xf8a44ef9, 0x4c8b80b1,
//   0x19edc328, 0x87bf4bdd, 0xc9b240e5, 0xe9ee4b1b, 0x4382aee7, 0x535b6b41,
//   0xf3bec5da
// };


//
// fptr and rptr are two pointers into the state info, a front and a rear
// pointer.  These two pointers are always rand_sep places aparts, as they
// cycle cyclically through the state information.  (Yes, this does mean we
// could get away with just one pointer, but the code for random() is more
// efficient this way).  The pointers are left positioned as they would be
// from the call
//
//  initstate(1, randtbl, 128);
//
// (The position of the rear pointer, rptr, is really 0 (as explained above
// in the initialization of randtbl) because the state table pointer is set
// to point to randtbl[1] (as explained below).
//

    fptr = &randtbl[SEP_3 + 1];
    rptr = &randtbl[1];

//
// The following things are the pointer to the state information table, the
// type of the current generator, the degree of the current polynomial being
// used, and the separation between the two pointers.  Note that for efficiency
// of random(), we remember the first location of the state information, not
// the zeroeth.  Hence it is valid to access state[-1], which is used to
// store the type of the R.N.G.  Also, we remember the last location, since
// this is more efficient than indexing every time to find the address of
// the last element to see if the front and rear pointers have wrapped.
//

    state = &randtbl[1];
    rand_type = TYPE_3;
    rand_deg = DEG_3;
    rand_sep = SEP_3;
    end_ptr = &randtbl[DEG_3 + 1];

}

//
// Compute x = (7^5 * x) mod (2^31 - 1)
// wihout overflowing 31 bits:
//      (2^31 - 1) = 127773 * (7^5) + 2836
// From "Random number generators: good ones are hard to find",
// Park and Miller, Communications of the ACM, vol. 31, no. 10,
// October 1988, p. 1195.
//

__inline static long good_rand(long x)
{
  long hi, lo;

  // Can't be initialized with 0, so use another value.
  if (x == 0) x = 123459876;
  hi = x / 127773;
  lo = x % 127773;
  x = 16807 * lo - 2836 * hi;
  if (x < 0) x += 0x7fffffff;
  return x;
}

//
// srandom
//
// Initialize the random number generator based on the given seed.  If the
// type is the trivial no-state-information type, just remember the seed.
// Otherwise, initializes state[] based on the given "seed" via a linear
// congruential generator.  Then, the pointers are set to known locations
// that are exactly rand_sep places apart.  Lastly, it cycles the state
// information a given number of times to get rid of any initial dependencies
// introduced by the L.C.R.N.G.  Note that the initialization of randtbl[]
// for default usage relies on values produced by this routine.

void RandomGenerator::srandom(unsigned long x)
{
  long i, lim;

  state[0] = x;
  if (rand_type == TYPE_0)
    lim = NSHUFF;
  else 
  {
    for (i = 1; i < rand_deg; i++) state[i] = good_rand(state[i - 1]);
    fptr = &state[rand_sep];
    rptr = &state[0];
    lim = 10 * rand_deg;
  }

  initialized = 1;
  for (i = 0; i < lim; i++) random();
}

#ifdef NOT_FOR_SUPERTUX     // use in supertux doesn't require these methods,
                            // which are not portable to as many platforms as
                            // SDL.  The cost is that the variability of the
                            // initial seed is reduced to only 32 bits of
                            // randomness, seemingly enough. PAK 060420
//
// srandomdev
//
// Many programs choose the seed value in a totally predictable manner.
// This often causes problems.  We seed the generator using the much more
// secure random() interface.  Note that this particular seeding
// procedure can generate states which are impossible to reproduce by
// calling srandom() with any value, since the succeeding terms in the
// state buffer are no longer derived from the LC algorithm applied to
// a fixed seed.

void RandomGenerator::srandomdev()
{
  int fd, done;
  size_t len;

  if (rand_type == TYPE_0)
    len = sizeof state[0];
  else
    len = rand_deg * sizeof state[0];

  done = 0;
  fd = open("/dev/urandom", O_RDONLY);
  if (fd >= 0) 
   {
     if (read(fd, state, len) == len) done = 1;
     close(fd);
   }

  if (!done) 
  {
    struct timeval tv;

    gettimeofday(&tv, NULL);
    srandom(tv.tv_sec ^ tv.tv_usec);
    return;
  }

  if (rand_type != TYPE_0) 
  {
    fptr = &state[rand_sep];
    rptr = &state[0];
  }
  initialized = 1;
}

//
// initstate
//
// Initialize the state information in the given array of n bytes for future
// random number generation.  Based on the number of bytes we are given, and
// the break values for the different R.N.G.'s, we choose the best (largest)
// one we can and set things up for it.  srandom() is then called to
// initialize the state information.
//
// Note that on return from srandom(), we set state[-1] to be the type
// multiplexed with the current value of the rear pointer; this is so
// successive calls to initstate() won't lose this information and will be
// able to restart with setstate().
//
// Note: the first thing we do is save the current state, if any, just like
// setstate() so that it doesn't matter when initstate is called.
//
// Returns a pointer to the old state.
//

char * RandomGenerator::initstate(unsigned long seed, char *arg_state, long n)
{
  char *ostate = (char *) (&state[-1]);
  long *long_arg_state = (long *) arg_state;

  if (rand_type == TYPE_0)
    state[-1] = rand_type;
  else
    state[-1] = MAX_TYPES * (rptr - state) + rand_type;

  if (n < BREAK_0) return NULL;

  if (n < BREAK_1) 
  {
    rand_type = TYPE_0;
    rand_deg = DEG_0;
    rand_sep = SEP_0;
  } 
  else if (n < BREAK_2) 
  {
    rand_type = TYPE_1;
    rand_deg = DEG_1;
    rand_sep = SEP_1;
  } 
  else if (n < BREAK_3) 
  {
    rand_type = TYPE_2;
    rand_deg = DEG_2;
    rand_sep = SEP_2;
  } 
  else if (n < BREAK_4) 
  {
    rand_type = TYPE_3;
    rand_deg = DEG_3;
    rand_sep = SEP_3;
  } 
  else 
  {
    rand_type = TYPE_4;
    rand_deg = DEG_4;
    rand_sep = SEP_4;
  }
  
  state = (long *) (long_arg_state + 1); // First location
  end_ptr = &state[rand_deg]; // Must set end_ptr before srandom
  srandom(seed);

  if (rand_type == TYPE_0)
    long_arg_state[0] = rand_type;
  else
    long_arg_state[0] = MAX_TYPES * (rptr - state) + rand_type;

  initialized = 1;
  return ostate;
}

//
// setstate
//
// Restore the state from the given state array.
//
// Note: it is important that we also remember the locations of the pointers
// in the current state information, and restore the locations of the pointers
// from the old state information.  This is done by multiplexing the pointer
// location into the zeroeth word of the state information.
//
// Note that due to the order in which things are done, it is OK to call
// setstate() with the same state as the current state.
//
// Returns a pointer to the old state information.
//

char * RandomGenerator::setstate(char *arg_state)
{
  long *new_state = (long *) arg_state;
  long type = new_state[0] % MAX_TYPES;
  long rear = new_state[0] / MAX_TYPES;
  char *ostate = (char *) (&state[-1]);

  if (rand_type == TYPE_0)
    state[-1] = rand_type;
  else
    state[-1] = MAX_TYPES * (rptr - state) + rand_type;

  switch(type) 
  {
    case TYPE_0:
    case TYPE_1:
    case TYPE_2:
    case TYPE_3:
    case TYPE_4:
      rand_type = type;
      rand_deg = degrees[type];
      rand_sep = seps[type];
      break;
  }

  state = (long *) (new_state + 1);
  if (rand_type != TYPE_0) 
  {
    rptr = &state[rear];
    fptr = &state[(rear + rand_sep) % rand_deg];
  }
  end_ptr = &state[rand_deg];   // Set end_ptr too

  initialized = 1;
  return ostate;
}
#endif //NOT_FOR_SUPERTUX
//
// random:
//
// If we are using the trivial TYPE_0 R.N.G., just do the old linear
// congruential bit.  Otherwise, we do our fancy trinomial stuff, which is
// the same in all the other cases due to all the global variables that have
// been set up.  The basic operation is to add the number at the rear pointer
// into the one at the front pointer.  Then both pointers are advanced to
// the next location cyclically in the table.  The value returned is the sum
// generated, reduced to 31 bits by throwing away the "least random" low bit.
//
// Note: the code takes advantage of the fact that both the front and
// rear pointers can't wrap on the same call by not testing the rear
// pointer if the front one has wrapped.
//
// Returns a 31-bit random number.
//

long RandomGenerator::random()
{
  long i;
  long *f, *r;
  if (!initialized) {
      throw std::runtime_error("uninitialized RandomGenerator object");
  }

  if (rand_type == TYPE_0) 
  {
    i = state[0];
    state[0] = i = (good_rand(i)) & 0x7fffffff;
  } 
  else 
  {
    f = fptr; r = rptr;
    *f += *r;
    i = (*f >> 1) & 0x7fffffff; // Chucking least random bit
    if (++f >= end_ptr) 
    {
      f = state;
      ++r;
    }
    else if (++r >= end_ptr) 
      r = state;

    fptr = f; rptr = r;
  }

  return i;
}


From allen at a-king.us  Sun Apr 30 04:27:53 2006
From: allen at a-king.us (Allen King)
Date: Sat, 29 Apr 2006 22:27:53 -0400
Subject: [Supertux-devel] dev version bug
In-Reply-To: <e5aaa77a0604291142s424566e1of8386c50e3e412ca@mail.gmail.com>
References: <e5aaa77a0604261237u2a9a6d7cr623f170f5b246fd5@mail.gmail.com>	 <44538934.1060103@a-king.us> <e5aaa77a0604291142s424566e1of8386c50e3e412ca@mail.gmail.com>
Message-ID: <445420A9.4040300@a-king.us>

Joth,

   Thanks for getting back to me so quickly, and with all the right data.

There may have been a mis-understanding. The experiment I'm asking you 
to do is not to fix your problem, but to produce additional output in 
the failing mode that will help me isolate another suspected related 
problem.  (Below, I will tell you how to get the code to work, but not 
here.)

So here are some points I want to make very clear. (Sorry if this is 
obvious, and I'm being blunt.):

   1. The newer version of the RandomGenerator::srand method code I sent
      you also fail.  I want it to.  As such, that line 72 of
      random_generator.cpp (the "*assert(0);*") fails is not a problem
      for this test, it is good.
   2. Line 68 should be of a form "*if (x < RAND_MAX)*" to duplicate the
      failure.  In particular, it should not be modified to "*if (x <=
      RAND_MAX)*", or the failure may change or perhaps go away. 
      ACTION: change line 68 from "*<=*" back to "*<*", so the failure
      will be replicated.
   3. I see no line like "*==== srand(ddd) (ddd) RAND_MAX=xxx =====*"
      (where ddd (xxx) are some decimal (hex) numbers) in your console
      output.  QUESTION: Double and tripple check. Did you perhaps not
      compile the changes, or not use the patched version when making
      the new console output? 
   4. If the above gets you lines like "*=====....*" above in the
      console output, you're done, send be back the console and
      random_generator.cpp, and ignore this.  If still no such lines
      appear, I'm wondering if your console log is only monitoring
      things to standard error.  To get these printouts also on standard
      error, try changing the string "*printf(*" to "*fprintf(stderr,
      *", in lines 67 and 71.  (You may or may not need to add a
      "*#include <stdio.h>*" line to compile properly.) At this point,
      the routine in question should look like the following: 

*#include <stdio.h>
int RandomGenerator::srand(int x)    {
    int x0 = x;
    while (x == 0)                          // random seed of zero means
        x = time(0);                        // randomize with time
    fprintf(stderr, "==== srand(%10d) (%10d) RAND_MAX=%x =====\n", x, 
x0, RAND_MAX);
    if (x < RAND_MAX) {
    }
    else {                                  // only allow posative 
31-bit seeds
        fprintf(stderr, "ERROR: x=%x, x0=%x, RAND_MAX=%x\n", x, x0, 
RAND_MAX);
        assert(0);
    }
    RandomGenerator::srandom(x);
    return x;                               // let caller know seed used
}

*When you get the line with the "*====...*" in it, send me back the same 
stuff as before, except don't bother with the config file -- it's good.

If you can't get the "*====...*" line, try commenting out the assert(0) 
above, and replace the following routine:

*int RandomGenerator::rand(int v) {
    assert(v != 0 && v <= RAND_MAX);
    int rv = **RandomGenerator::random();
 **   printf("===x= rand(%10d) (%10d) RAND_MAX=%x =x====\n", v, rv, 
RAND_MAX);
**    fprintf(stderr, "==== rand(%10d) (%10d) RAND_MAX=%x =====\n", v, 
rv, RAND_MAX);
**    return rv % v;
}
*
Short of that, can I have VNC  access to your machine?  Hopefully it 
won't get to that!

    Allen

P.S.:  To run supertux, use the origional code (without any of the mods 
I've been feeding to you for debug), and comment out the 
"*assert(x<RAND_MAX);*" line.

Joth Esmo wrote:
> I replaced the text in the .cpp file as you asked and compiled. The
> error log (stderr) is attached. Line 72 of random_generator.cpp seems
> to be the problem (the line being: assert(0);). Also attached is my
> ./supertux/config file. I start the application by opening MSYS,
> navigating to my supertux directory, and issuing the command
> 'supertux.exe -w' (as per the Building on Windows page on the wiki --
> however the -w has been recently removed).
>
> In your email, you asked for the patched version of random_seed.cpp. I
> assume you meant random_generator.cpp, which is attached.
>
> I'm not sure what you mean by 'capable of debug'. Should I debug it
> and then watch the value of the config variable? I didn't quite
> understand your meaning.
>
> PS> I changed the text in random_generator.cpp to read : x <= RAND_MAX
> (as you requested).
>
> Regards,
> Joth
>
> On 4/29/06, Allen King <allen at a-king.us> wrote:
>> Joth,
>>
>> A new patch to fix that problem is in the works, and should be in svn
>> shortly.  Should have been x <= RAND_MAX. For the moment, that line 
>> can be
>> commented out, or the < changed to <= .
>>
>> But the fact that this problem happened at all is curious to me, and I
>> suspect another bug lurking nearby.  In particular, I would like to
>> understand what about your XP setup caused that assertion error.  If
>> RAND_MAX is 0x7fffffff, the largest int32, it would be improbably that
>> time(0) would generate that (unless it's not working).  Or perhaps 
>> RAND_MAX
>> is smaller.
>>
>> If you can patch to the source code, would you replace the routine in
>> random_generator.cpp with
>> int RandomGenerator::srand(int x)    {
>>     int x0 = x;
>>     while (x == 0)                          // random seed of zero means
>>         x = time(0);                        // randomize with time
>>     printf("==== srand(%10d) (%10d) RAND_MAX=%x =====\n", x, x0, 
>> RAND_MAX);
>>     if (x < RAND_MAX) {
>>     }
>>     else {                                  // only allow posative 
>> 31-bit
>> seeds
>>         printf("ERROR: x=%x, x0=%x, RAND_MAX=%x\n", x, x0, RAND_MAX);
>>         assert(0);
>>     }
>>     RandomGenerator::srandom(x);
>>     return x;                               // let caller
>> know seed used
>> }
>> and recreate the failure.  Send me the command line used to invoke 
>> supertux,
>> the failing printout (as you did), a copy of your ~/.supertux/config 
>> file,
>> and the patched copy of random_seed.cpp.  If you are you capable of 
>> debug,
>> the variable config->random_seed should be traced.  Is it RAND_MAX at 
>> the
>> assertion failure?  Who sets it that?
>>
>> Thanks for your help on this.
>>
>>        Allen
>>
>>
>> Jonathan Campbell wrote:
>>
>> Greetings I just finished compiling the development version of 
>> SuperTux (the
>> newest build) and tried to launch it. However, it quits after showing a
>> transparent window. The file stderr has the following: [INFO]
>> src/main.cpp:195 [C:\Documents and
>> Settings\Administrator\.supertux] is in the search path
>> [INFO] src/main.cpp:195 [c:\msys\1.0\build\supertux\/data]
>> is in the search path [INFO] src/main.cpp:429 Component 'controller'
>> finished after 0.2 seconds [INFO] src/main.cpp:68 Couldn't load 
>> config file:
>> Couldn't open file 'config': The system cannot find the file 
>> specified. ,
>> using default settings [INFO] src/main.cpp:429 Component 'config' 
>> finished
>> after 0 seconds [INFO] src/main.cpp:429 Component 'tinygettext' finished
>> after 0.001 seconds [INFO] src/main.cpp:429 Component 'commandline' 
>> finished
>> after 0 seconds [INFO] src/main.cpp:429 Component 'audio' finished after
>> 0.202 seconds [INFO] src/main.cpp:429 Component 'video' finished 
>> after 0.278
>> seconds [INFO] src/main.cpp:429 Component 'scripting' finished after 
>> 0.005
>> seconds [DEBUG] src/tile_manager.cpp:47 Tiles loaded in 0.059 seconds 
>> [INFO]
>> src/main.cpp:429 Component 'resources' finished after 0.236 seconds
>> Assertion failed: x < RAND_MAX, file src/random_generator.cpp, line 
>> 57 I'm
>> running Windows XP with all updates installed. To compile it, I 
>> followed the
>> instructions on this page on the wiki:
>> http://supertux.berlios.de/wiki/index.php/Building_on_Windows
>> Any help would be appreciated. I'd really like to see this new 
>> version of
>> SuperTux. Regards, Joth Esmo
>> _______________________________________________
>> Supertux-devel mailing list Supertux-devel at lists.berlios.de
>> http://lists.berlios.de/mailman/listinfo/supertux-devel
>>
>>
>
>
> -- 
> Flarbland: Your one and only stop for cheats, articles, comedy and
> much, much more!
> http://flarbland.bravehost.com
> ------------------------------------------------------------------------
>
> [INFO] src/main.cpp:195 [C:\Documents and Settings\HP_Administrator\.supertux] is in the search path
> [INFO] src/main.cpp:195 [c:\msys\1.0\build\supertux2\/data] is in the search path
> [INFO] src/main.cpp:429 Component 'controller' finished after 0.2 seconds
> [WARNING] src/control/joystickkeyboardcontroller.cpp:192 Invalid button '0' in buttonmap
> [WARNING] src/control/joystickkeyboardcontroller.cpp:192 Invalid button '1' in buttonmap
> [INFO] src/main.cpp:429 Component 'config' finished after 0.021 seconds
> [INFO] src/main.cpp:429 Component 'tinygettext' finished after 0 seconds
> [INFO] src/main.cpp:429 Component 'commandline' finished after 0 seconds
> [INFO] src/main.cpp:429 Component 'audio' finished after 0.302 seconds
> [INFO] src/main.cpp:429 Component 'video' finished after 0.432 seconds
> [INFO] src/main.cpp:429 Component 'scripting' finished after 0.034 seconds
> [DEBUG] src/tile_manager.cpp:47 Tiles loaded in 0.057 seconds
> [INFO] src/main.cpp:429 Component 'resources' finished after 0.217 seconds
> Assertion failed: 0, file src/random_generator.cpp, line 72
>
> This application has requested the Runtime to terminate it in an unusual way.
> Please contact the application's support team for more information.
>
>
>
>
>
>   
> ------------------------------------------------------------------------
>
> (supertux-config
>   (show_fps #f)
>   (cheats #f)
>   (video
>     (fullscreen #t)
>     (width 800)
>     (height 600)
>   )
>   (audio
>     (sound_enabled #t)
>     (music_enabled #t)
>   )
>   (control
>     (keymap
>       (map
>         (key 13)
>         (control "menu-select")
>       )
>       (map
>         (key 19)
>         (control "pause-menu")
>       )
>       (map
>         (key 27)
>         (control "pause-menu")
>       )
>       (map
>         (key 94)
>         (control "console")
>       )
>       (map
>         (key 112)
>         (control "pause-menu")
>       )
>       (map
>         (key 271)
>         (control "menu-select")
>       )
>       (map
>         (key 273)
>         (control "jump")
>       )
>       (map
>         (key 274)
>         (control "down")
>       )
>       (map
>         (key 275)
>         (control "right")
>       )
>       (map
>         (key 276)
>         (control "left")
>       )
>       (map
>         (key 303)
>         (control "up")
>       )
>       (map
>         (key 304)
>         (control "action")
>       )
>     )
>     (joystick
>       (use_hat #t)
>       (axis_x 0)
>       (axis_y 1)
>       (dead_zone_x 1000)
>       (dead_zone_y 1000)
>       (map
>         (button 0)
>         (control "jump")
>       )
>       (map
>         (button 1)
>         (control "action")
>       )
>     )
>   )
> )
>
>
>
>
>   
> ------------------------------------------------------------------------
>
> // $Id: random_generator.cpp 3435 2006-04-26 02:13:42Z sik0fewl $
> // 
> // A strong random number generator
> //
> // Copyright (C) 2006 Allen King
> // Copyright (C) 2002 Michael Ringgaard. All rights reserved.
> // Copyright (C) 1983, 1993 The Regents of the University of California.
> //
> // Redistribution and use in source and binary forms, with or without
> // modification, are permitted provided that the following conditions
> // are met:
> // 
> // 1. Redistributions of source code must retain the above copyright 
> //    notice, this list of conditions and the following disclaimer.  
> // 2. Redistributions in binary form must reproduce the above copyright
> //    notice, this list of conditions and the following disclaimer in the
> //    documentation and/or other materials provided with the distribution.  
> // 3. Neither the name of the project nor the names of its contributors
> //    may be used to endorse or promote products derived from this software
> //    without specific prior written permission. 
> // 
> // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
> // ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
> // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
> // ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
> // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
> // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
> // OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
> // HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
> // LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
> // OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
> // SUCH DAMAGE.
>
> // Transliterated into C++ Allen King 060417, from sources on
> //          http://www.jbox.dk/sanos/source/lib/random.c.html
>
>
>
> #include <stdexcept>
> #include "random_generator.hpp"
> #include "scripting/squirrel_util.hpp"
>
> RandomGenerator systemRandom;               // global random number generator
>
> RandomGenerator::RandomGenerator() {
>     assert(sizeof(int) >= 4);
>     initialized = 0;
>     initialize();
> }
>
> RandomGenerator::~RandomGenerator() {
> }
>
> /*int RandomGenerator::srand(int x)    {
>     while (x == 0)                          // random seed of zero means
>         x = time(0);                        // randomize with time
>     assert(x < RAND_MAX);                   // only allow posative 31-bit seeds
>     assert(sizeof(int) >= 4);
>     srandom(x);
>     return x;                               // let caller know seed used
> }*/
>
> int RandomGenerator::srand(int x)    {
>     int x0 = x;
>     while (x == 0)                          // random seed of zero means
>         x = time(0);                        // randomize with time
>     printf("==== srand(%10d) (%10d) RAND_MAX=%x =====\n", x, x0, RAND_MAX);
>     if (x <= RAND_MAX) {
>     }
>     else {                                  // only allow posative 31-bit seeds
>         printf("ERROR: x=%x, x0=%x, RAND_MAX=%x\n", x, x0, RAND_MAX);
>         assert(0);
>     }
>     RandomGenerator::srandom(x);
>     return x;                               // let caller know seed used
> }
>
> int RandomGenerator::rand()                 {        return random();    }
>
> int RandomGenerator::rand(int v) {
>     assert(v != 0 && v <= RAND_MAX);        // illegal arg: 0 or too big
>     return RandomGenerator::random() % v;
> }
>
> int RandomGenerator::rand(int u, int v) {
>     assert(v > u);    
>     return u + RandomGenerator::rand(v-u);
> }
>
> double RandomGenerator::randf(double v) {
>     float rv;
>     while ((rv = (double)RandomGenerator::random() / RAND_MAX * v) >= v)
>         ;                                   // never return v!
>     return rv;
> }
>
> double RandomGenerator::randf(double u, double v) {
>     return u + RandomGenerator::randf(v-u);
> }
>
> //-----------------------------------------------------------------------
> //        
> // Copyright (C) 2002 Michael Ringgaard. All rights reserved.
> // Copyright (C) 1983, 1993 The Regents of the University of California.
> //
> // Redistribution and use in source and binary forms, with or without
> // modification, are permitted provided that the following conditions
> // are met:
> // 
> // 1. Redistributions of source code must retain the above copyright 
> //    notice, this list of conditions and the following disclaimer.  
> // 2. Redistributions in binary form must reproduce the above copyright
> //    notice, this list of conditions and the following disclaimer in the
> //    documentation and/or other materials provided with the distribution.  
> // 3. Neither the name of the project nor the names of its contributors
> //    may be used to endorse or promote products derived from this software
> //    without specific prior written permission. 
> // 
> // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
> // ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
> // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
> // ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
> // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
> // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
> // OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
> // HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
> // LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
> // OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
> // SUCH DAMAGE.
> // 
>
> //**#include <os.h>
>
> //
> // An improved random number generation package.  In addition to the standard
> // rand()/srand() like interface, this package also has a special state info
> // interface.  The initstate() routine is called with a seed, an array of
> // bytes, and a count of how many bytes are being passed in; this array is
> // then initialized to contain information for random number generation with
> // that much state information.  Good sizes for the amount of state
> // information are 32, 64, 128, and 256 bytes.  The state can be switched by
> // calling the setstate() routine with the same array as was initiallized
> // with initstate().  By default, the package runs with 128 bytes of state
> // information and generates far better random numbers than a linear
> // congruential generator.  If the amount of state information is less than
> // 32 bytes, a simple linear congruential R.N.G. is used.
> //
> // Internally, the state information is treated as an array of longs; the
> // zeroeth element of the array is the type of R.N.G. being used (small
> // integer); the remainder of the array is the state information for the
> // R.N.G.  Thus, 32 bytes of state information will give 7 longs worth of
> // state information, which will allow a degree seven polynomial.  (Note:
> // the zeroeth word of state information also has some other information
> // stored in it -- see setstate() for details).
> //
> // The random number generation technique is a linear feedback shift register
> // approach, employing trinomials (since there are fewer terms to sum up that
> // way).  In this approach, the least significant bit of all the numbers in
> // the state table will act as a linear feedback shift register, and will
> // have period 2^deg - 1 (where deg is the degree of the polynomial being
> // used, assuming that the polynomial is irreducible and primitive).  The
> // higher order bits will have longer periods, since their values are also
> // influenced by pseudo-random carries out of the lower bits.  The total
> // period of the generator is approximately deg*(2**deg - 1); thus doubling
> // the amount of state information has a vast influence on the period of the
> // generator.  Note: the deg*(2**deg - 1) is an approximation only good for
> // large deg, when the period of the shift is the dominant factor.
> // With deg equal to seven, the period is actually much longer than the
> // 7*(2**7 - 1) predicted by this formula.
> //
> // Modified 28 December 1994 by Jacob S. Rosenberg.
> //
>
> //
> // For each of the currently supported random number generators, we have a
> // break value on the amount of state information (you need at least this
> // many bytes of state info to support this random number generator), a degree
> // for the polynomial (actually a trinomial) that the R.N.G. is based on, and
> // the separation between the two lower order coefficients of the trinomial.
>
> void RandomGenerator::initialize() {
>
> #define NSHUFF 100      // To drop part of seed -> 1st value correlation
>
> //static long degrees[MAX_TYPES] = { DEG_0, DEG_1, DEG_2, DEG_3, DEG_4 };
> //static long seps [MAX_TYPES] = { SEP_0, SEP_1, SEP_2, SEP_3, SEP_4 };
>
>     degrees[0] = DEG_0;
>     degrees[1] = DEG_1;
>     degrees[2] = DEG_2;
>     degrees[3] = DEG_3;
>     degrees[4] = DEG_4;
>
>     seps [0] = SEP_0;
>     seps [1] = SEP_1;
>     seps [2] = SEP_2;
>     seps [3] = SEP_3;
>     seps [4] = SEP_4;
>
> //
> // Initially, everything is set up as if from:
> //
> //  initstate(1, randtbl, 128);
> //
> // Note that this initialization takes advantage of the fact that srandom()
> // advances the front and rear pointers 10*rand_deg times, and hence the
> // rear pointer which starts at 0 will also end up at zero; thus the zeroeth
> // element of the state information, which contains info about the current
> // position of the rear pointer is just
> //
> //  MAX_TYPES * (rptr - state) + TYPE_3 == TYPE_3.
>
>     randtbl[ 0] =  TYPE_3;
>     randtbl[ 1] =  0x991539b1;
>     randtbl[ 2] =  0x16a5bce3;
>     randtbl[ 3] =  0x6774a4cd;
>     randtbl[ 4] =  0x3e01511e;
>     randtbl[ 5] =  0x4e508aaa;
>     randtbl[ 6] =  0x61048c05;
>     randtbl[ 7] =  0xf5500617;
>     randtbl[ 8] =  0x846b7115;
>     randtbl[ 9] =  0x6a19892c;
>     randtbl[10] =  0x896a97af;
>     randtbl[11] =  0xdb48f936;
>     randtbl[12] =  0x14898454;
>     randtbl[13] =  0x37ffd106;
>     randtbl[14] =  0xb58bff9c;
>     randtbl[15] =  0x59e17104;
>     randtbl[16] =  0xcf918a49;
>     randtbl[17] =  0x09378c83;
>     randtbl[18] =  0x52c7a471;
>     randtbl[19] =  0x8d293ea9;
>     randtbl[20] =  0x1f4fc301;
>     randtbl[21] =  0xc3db71be;
>     randtbl[22] =  0x39b44e1c;
>     randtbl[23] =  0xf8a44ef9;
>     randtbl[24] =  0x4c8b80b1;
>     randtbl[25] =  0x19edc328;
>     randtbl[26] =  0x87bf4bdd;
>     randtbl[27] =  0xc9b240e5;
>     randtbl[28] =  0xe9ee4b1b;
>     randtbl[29] =  0x4382aee7;
>     randtbl[30] =  0x535b6b41;
>     randtbl[31] =  0xf3bec5da;
>
> // static long randtbl[DEG_3 + 1] = 
> // {
> //   TYPE_3;
> //   0x991539b1, 0x16a5bce3, 0x6774a4cd, 0x3e01511e, 0x4e508aaa, 0x61048c05,
> //   0xf5500617, 0x846b7115, 0x6a19892c, 0x896a97af, 0xdb48f936, 0x14898454,
> //   0x37ffd106, 0xb58bff9c, 0x59e17104, 0xcf918a49, 0x09378c83, 0x52c7a471,
> //   0x8d293ea9, 0x1f4fc301, 0xc3db71be, 0x39b44e1c, 0xf8a44ef9, 0x4c8b80b1,
> //   0x19edc328, 0x87bf4bdd, 0xc9b240e5, 0xe9ee4b1b, 0x4382aee7, 0x535b6b41,
> //   0xf3bec5da
> // };
>
>
> //
> // fptr and rptr are two pointers into the state info, a front and a rear
> // pointer.  These two pointers are always rand_sep places aparts, as they
> // cycle cyclically through the state information.  (Yes, this does mean we
> // could get away with just one pointer, but the code for random() is more
> // efficient this way).  The pointers are left positioned as they would be
> // from the call
> //
> //  initstate(1, randtbl, 128);
> //
> // (The position of the rear pointer, rptr, is really 0 (as explained above
> // in the initialization of randtbl) because the state table pointer is set
> // to point to randtbl[1] (as explained below).
> //
>
>     fptr = &randtbl[SEP_3 + 1];
>     rptr = &randtbl[1];
>
> //
> // The following things are the pointer to the state information table, the
> // type of the current generator, the degree of the current polynomial being
> // used, and the separation between the two pointers.  Note that for efficiency
> // of random(), we remember the first location of the state information, not
> // the zeroeth.  Hence it is valid to access state[-1], which is used to
> // store the type of the R.N.G.  Also, we remember the last location, since
> // this is more efficient than indexing every time to find the address of
> // the last element to see if the front and rear pointers have wrapped.
> //
>
>     state = &randtbl[1];
>     rand_type = TYPE_3;
>     rand_deg = DEG_3;
>     rand_sep = SEP_3;
>     end_ptr = &randtbl[DEG_3 + 1];
>
> }
>
> //
> // Compute x = (7^5 * x) mod (2^31 - 1)
> // wihout overflowing 31 bits:
> //      (2^31 - 1) = 127773 * (7^5) + 2836
> // From "Random number generators: good ones are hard to find",
> // Park and Miller, Communications of the ACM, vol. 31, no. 10,
> // October 1988, p. 1195.
> //
>
> __inline static long good_rand(long x)
> {
>   long hi, lo;
>
>   // Can't be initialized with 0, so use another value.
>   if (x == 0) x = 123459876;
>   hi = x / 127773;
>   lo = x % 127773;
>   x = 16807 * lo - 2836 * hi;
>   if (x < 0) x += 0x7fffffff;
>   return x;
> }
>
> //
> // srandom
> //
> // Initialize the random number generator based on the given seed.  If the
> // type is the trivial no-state-information type, just remember the seed.
> // Otherwise, initializes state[] based on the given "seed" via a linear
> // congruential generator.  Then, the pointers are set to known locations
> // that are exactly rand_sep places apart.  Lastly, it cycles the state
> // information a given number of times to get rid of any initial dependencies
> // introduced by the L.C.R.N.G.  Note that the initialization of randtbl[]
> // for default usage relies on values produced by this routine.
>
> void RandomGenerator::srandom(unsigned long x)
> {
>   long i, lim;
>
>   state[0] = x;
>   if (rand_type == TYPE_0)
>     lim = NSHUFF;
>   else 
>   {
>     for (i = 1; i < rand_deg; i++) state[i] = good_rand(state[i - 1]);
>     fptr = &state[rand_sep];
>     rptr = &state[0];
>     lim = 10 * rand_deg;
>   }
>
>   initialized = 1;
>   for (i = 0; i < lim; i++) random();
> }
>
> #ifdef NOT_FOR_SUPERTUX     // use in supertux doesn't require these methods,
>                             // which are not portable to as many platforms as
>                             // SDL.  The cost is that the variability of the
>                             // initial seed is reduced to only 32 bits of
>                             // randomness, seemingly enough. PAK 060420
> //
> // srandomdev
> //
> // Many programs choose the seed value in a totally predictable manner.
> // This often causes problems.  We seed the generator using the much more
> // secure random() interface.  Note that this particular seeding
> // procedure can generate states which are impossible to reproduce by
> // calling srandom() with any value, since the succeeding terms in the
> // state buffer are no longer derived from the LC algorithm applied to
> // a fixed seed.
>
> void RandomGenerator::srandomdev()
> {
>   int fd, done;
>   size_t len;
>
>   if (rand_type == TYPE_0)
>     len = sizeof state[0];
>   else
>     len = rand_deg * sizeof state[0];
>
>   done = 0;
>   fd = open("/dev/urandom", O_RDONLY);
>   if (fd >= 0) 
>    {
>      if (read(fd, state, len) == len) done = 1;
>      close(fd);
>    }
>
>   if (!done) 
>   {
>     struct timeval tv;
>
>     gettimeofday(&tv, NULL);
>     srandom(tv.tv_sec ^ tv.tv_usec);
>     return;
>   }
>
>   if (rand_type != TYPE_0) 
>   {
>     fptr = &state[rand_sep];
>     rptr = &state[0];
>   }
>   initialized = 1;
> }
>
> //
> // initstate
> //
> // Initialize the state information in the given array of n bytes for future
> // random number generation.  Based on the number of bytes we are given, and
> // the break values for the different R.N.G.'s, we choose the best (largest)
> // one we can and set things up for it.  srandom() is then called to
> // initialize the state information.
> //
> // Note that on return from srandom(), we set state[-1] to be the type
> // multiplexed with the current value of the rear pointer; this is so
> // successive calls to initstate() won't lose this information and will be
> // able to restart with setstate().
> //
> // Note: the first thing we do is save the current state, if any, just like
> // setstate() so that it doesn't matter when initstate is called.
> //
> // Returns a pointer to the old state.
> //
>
> char * RandomGenerator::initstate(unsigned long seed, char *arg_state, long n)
> {
>   char *ostate = (char *) (&state[-1]);
>   long *long_arg_state = (long *) arg_state;
>
>   if (rand_type == TYPE_0)
>     state[-1] = rand_type;
>   else
>     state[-1] = MAX_TYPES * (rptr - state) + rand_type;
>
>   if (n < BREAK_0) return NULL;
>
>   if (n < BREAK_1) 
>   {
>     rand_type = TYPE_0;
>     rand_deg = DEG_0;
>     rand_sep = SEP_0;
>   } 
>   else if (n < BREAK_2) 
>   {
>     rand_type = TYPE_1;
>     rand_deg = DEG_1;
>     rand_sep = SEP_1;
>   } 
>   else if (n < BREAK_3) 
>   {
>     rand_type = TYPE_2;
>     rand_deg = DEG_2;
>     rand_sep = SEP_2;
>   } 
>   else if (n < BREAK_4) 
>   {
>     rand_type = TYPE_3;
>     rand_deg = DEG_3;
>     rand_sep = SEP_3;
>   } 
>   else 
>   {
>     rand_type = TYPE_4;
>     rand_deg = DEG_4;
>     rand_sep = SEP_4;
>   }
>   
>   state = (long *) (long_arg_state + 1); // First location
>   end_ptr = &state[rand_deg]; // Must set end_ptr before srandom
>   srandom(seed);
>
>   if (rand_type == TYPE_0)
>     long_arg_state[0] = rand_type;
>   else
>     long_arg_state[0] = MAX_TYPES * (rptr - state) + rand_type;
>
>   initialized = 1;
>   return ostate;
> }
>
> //
> // setstate
> //
> // Restore the state from the given state array.
> //
> // Note: it is important that we also remember the locations of the pointers
> // in the current state information, and restore the locations of the pointers
> // from the old state information.  This is done by multiplexing the pointer
> // location into the zeroeth word of the state information.
> //
> // Note that due to the order in which things are done, it is OK to call
> // setstate() with the same state as the current state.
> //
> // Returns a pointer to the old state information.
> //
>
> char * RandomGenerator::setstate(char *arg_state)
> {
>   long *new_state = (long *) arg_state;
>   long type = new_state[0] % MAX_TYPES;
>   long rear = new_state[0] / MAX_TYPES;
>   char *ostate = (char *) (&state[-1]);
>
>   if (rand_type == TYPE_0)
>     state[-1] = rand_type;
>   else
>     state[-1] = MAX_TYPES * (rptr - state) + rand_type;
>
>   switch(type) 
>   {
>     case TYPE_0:
>     case TYPE_1:
>     case TYPE_2:
>     case TYPE_3:
>     case TYPE_4:
>       rand_type = type;
>       rand_deg = degrees[type];
>       rand_sep = seps[type];
>       break;
>   }
>
>   state = (long *) (new_state + 1);
>   if (rand_type != TYPE_0) 
>   {
>     rptr = &state[rear];
>     fptr = &state[(rear + rand_sep) % rand_deg];
>   }
>   end_ptr = &state[rand_deg];   // Set end_ptr too
>
>   initialized = 1;
>   return ostate;
> }
> #endif //NOT_FOR_SUPERTUX
> //
> // random:
> //
> // If we are using the trivial TYPE_0 R.N.G., just do the old linear
> // congruential bit.  Otherwise, we do our fancy trinomial stuff, which is
> // the same in all the other cases due to all the global variables that have
> // been set up.  The basic operation is to add the number at the rear pointer
> // into the one at the front pointer.  Then both pointers are advanced to
> // the next location cyclically in the table.  The value returned is the sum
> // generated, reduced to 31 bits by throwing away the "least random" low bit.
> //
> // Note: the code takes advantage of the fact that both the front and
> // rear pointers can't wrap on the same call by not testing the rear
> // pointer if the front one has wrapped.
> //
> // Returns a 31-bit random number.
> //
>
> long RandomGenerator::random()
> {
>   long i;
>   long *f, *r;
>   if (!initialized) {
>       throw std::runtime_error("uninitialized RandomGenerator object");
>   }
>
>   if (rand_type == TYPE_0) 
>   {
>     i = state[0];
>     state[0] = i = (good_rand(i)) & 0x7fffffff;
>   } 
>   else 
>   {
>     f = fptr; r = rptr;
>     *f += *r;
>     i = (*f >> 1) & 0x7fffffff; // Chucking least random bit
>     if (++f >= end_ptr) 
>     {
>       f = state;
>       ++r;
>     }
>     else if (++r >= end_ptr) 
>       r = state;
>
>     fptr = f; rptr = r;
>   }
>
>   return i;
> }
>
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060429/a9ad637e/attachment.html>

From afief.h at gmail.com  Sun Apr 30 12:49:39 2006
From: afief.h at gmail.com (Afief Halumi)
Date: Sun, 30 Apr 2006 13:49:39 +0300
Subject: [Supertux-devel] Way to skip intro on new game
In-Reply-To: <984D8823-1C27-434A-B920-7434F184DEC5@gmail.com>
References: <984D8823-1C27-434A-B920-7434F184DEC5@gmail.com>
Message-ID: <83a40700604300349h2ef6541ay7c408faeaf6b762d@mail.gmail.com>

well i think there was a bug that allowed you to skip it, don't know if it
was fixed though:

when the intro starts exit to the main menu, it will take you back to the
world map in a second

don't take my word on it though

Afief

On 4/23/06, Jayson Kempinger <EvilGlowingApple at gmail.com> wrote:
>
> Hi, In the svn version of supertux milestone 2, is there any way to skip
> the intro when a new game is started?  I've tried all the usual keys
> (return, esc, space, mouse clicks), but nothing works.  Don't get me wrong,
> the intro's a great intro..especially hearing tux speak ;), but having an
> option to skip the intro would be nice, especially as I play more and more
> new games.
>
> Thanks, Jayson
>
> P.S. I sent this out before under the wrong e-mail address (one that's not
> registered to this list), so whomever is moderating it can just delete that
> one
>
> ----------------------------------------------------------------------
> This message is digitally signed with GnuPG.
> http://www.kempinger.homelinux.net/EvilGlowingApple at gmail.com.GPG.html
>
> (see http://www.gnupg.org/gph/en/manual.html#AEN136
> for information on how to verify this message)
> ----------------------------------------------------------------------
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060430/9e52a59a/attachment.html>

From richard at metafoo.co.uk  Thu Apr 27 00:42:49 2006
From: richard at metafoo.co.uk (Richard Smith)
Date: Wed, 26 Apr 2006 23:42:49 +0100
Subject: [Supertux-devel] Re: [Supertux-commit] r3435 - in trunk/supertux: data/levels/world1 src src/badguy src/object src/scripting
In-Reply-To: <5a5496320604261500l4330e38djfbd24713dd044324@mail.gmail.com>
References: <200604260215.k3Q2FISt012913@sheep.berlios.de> <1146042116.6287.8.camel@taylor.local> <5a5496320604261500l4330e38djfbd24713dd044324@mail.gmail.com>
Message-ID: <200604262342.50141.richard@metafoo.co.uk>

On Wednesday 26 April 2006 23:00, Ryan Flegel wrote:
> On 4/26/06, Matze Braun <matze at braunis.de> wrote:
> > Am Mittwoch, den 26.04.2006, 04:15 +0200 schrieb sik0fewl at berlios.de:
> > > Author: sik0fewl
> > > Date: 2006-04-26 04:13:42 +0200 (Wed, 26 Apr 2006)
> > > New Revision: 3435
[...]
> > > Log:
> > > Committing RandomGenerator patch from Allen King, with a few small
> > > changes Created scripting wrapper for the random number generator
> > >  - could someone check this over to make sure I did it properly? :)
> > > ...
> >
[...]
> > I don't like the squirrel interface like that. I'll change that to a
> > single rand() function and override the one built into the squirrel
> > standard library, otherwise we still can't be sure that the user is
> > using our random numbers.
>
> Okay, sounds good.

Looks like whatever happened here broke the intro. It gets part way through, 
logs a message out to the console about the RandomGenerator, then hangs there 
indefinitely.


From anmaster at berlios.de  Sat Apr 29 21:08:30 2006
From: anmaster at berlios.de (Arvid Norlander)
Date: Sat, 29 Apr 2006 21:08:30 +0200
Subject: [Supertux-devel] Supertux doesn't compile on 64-bit Linux
Message-ID: <4453B9AE.3000007@users.berlios.de>

I'm on 64-bit Gentoo Linux and SuperTux-svn (revision 3462) doesn't
compile on that:
~/src/supertux # jam
...patience...
...found 1053 target(s)...
...updating 211 target(s)...
MkDir1 ./build/x86_64-pc-linux-gnu/optimize/src/squirrel
MkDir1 ./build/x86_64-pc-linux-gnu/optimize/src/squirrel/squirrel
C++ ./build/x86_64-pc-linux-gnu/optimize/src/squirrel/squirrel/sqbaselib.o
In file included from src/squirrel/squirrel/sqbaselib.cpp:7:
src/squirrel/squirrel/sqtable.h: In function `SQHash HashObj(const
SQObjectPtr&)':
src/squirrel/squirrel/sqtable.h:21: warning: cast from pointer to
integer of different size

... cut away bit until the error ...

C++ ./build/x86_64-pc-linux-gnu/optimize/src/scripting/squirrel_util.o
src/scripting/squirrel_util.cpp: In function `std::string
Scripting::squirrel2string(SQVM*, int)':
src/scripting/squirrel_util.cpp:157: error: cannot convert `int*' to
`SQInteger*' for argument `3' to `SQRESULT sq_getinteger(SQVM*,
SQInteger, SQInteger*)'
src/scripting/squirrel_util.cpp: In function `void
Scripting::print_squirrel_stack(SQVM*)':
src/scripting/squirrel_util.cpp:262: error: cannot convert `int*' to
`SQInteger*' for argument `3' to `SQRESULT sq_getinteger(SQVM*,
SQInteger, SQInteger*)'

    g++ -c -o
./build/x86_64-pc-linux-gnu/optimize/src/scripting/squirrel_util.o  -I.
-I./src -I/usr/include/SDL -D_REENTRANT  -pthread
-Isrc/squirrel/include -Isrc/squirrel -march=k8 -pipe -O2 -msse3
-D__x86_64__ -Wall -O3 -g -DAPPDATADIR='"/usr/local/share/supertux"'
src/scripting/squirrel_util.cpp

...failed C++
./build/x86_64-pc-linux-gnu/optimize/src/scripting/squirrel_util.o ...
MiniSwig src/scripting/wrapper.cpp
C++ ./build/x86_64-pc-linux-gnu/optimize/src/scripting/wrapper.o
src/scripting/wrapper.cpp: In function `int
Scripting::Wrapper::Player_add_coins_wrapper(SQVM*)':
src/scripting/wrapper.cpp:998: error: cannot convert `int*' to
`SQInteger*' for argument `3' to `SQRESULT sq_getinteger(SQVM*,
SQInteger, SQInteger*)'
src/scripting/wrapper.cpp: In function `int
Scripting::Wrapper::FloatingImage_constructor_wrapper(SQVM*)':
src/scripting/wrapper.cpp:1216: error: invalid conversion from `int
(*)(void*, int)' to `SQInteger (*)(void*, SQInteger)'
src/scripting/wrapper.cpp:1216: error:   initializing argument 3 of
`void sq_setreleasehook(SQVM*, SQInteger, SQInteger (*)(void*, SQInteger))'
src/scripting/wrapper.cpp: In function `int
Scripting::Wrapper::FloatingImage_set_layer_wrapper(SQVM*)':
src/scripting/wrapper.cpp:1238: error: cannot convert `int*' to
`SQInteger*' for argument `3' to `SQRESULT sq_getinteger(SQVM*,
SQInteger, SQInteger*)'
src/scripting/wrapper.cpp: In function `int
Scripting::Wrapper::FloatingImage_set_anchor_point_wrapper(SQVM*)':
src/scripting/wrapper.cpp:1371: error: cannot convert `int*' to
`SQInteger*' for argument `3' to `SQRESULT sq_getinteger(SQVM*,
SQInteger, SQInteger*)'
src/scripting/wrapper.cpp: In function `void
Scripting::create_squirrel_instance(SQVM*, Scripting::DisplayEffect*,
bool)':
src/scripting/wrapper.cpp:2110: error: invalid conversion from `int
(*)(void*, int)' to `SQInteger (*)(void*, SQInteger)'
src/scripting/wrapper.cpp:2110: error:   initializing argument 3 of
`void sq_setreleasehook(SQVM*, SQInteger, SQInteger (*)(void*, SQInteger))'
src/scripting/wrapper.cpp: In function `void
Scripting::create_squirrel_instance(SQVM*, Scripting::Camera*, bool)':
src/scripting/wrapper.cpp:2136: error: invalid conversion from `int
(*)(void*, int)' to `SQInteger (*)(void*, SQInteger)'
src/scripting/wrapper.cpp:2136: error:   initializing argument 3 of
`void sq_setreleasehook(SQVM*, SQInteger, SQInteger (*)(void*, SQInteger))'
src/scripting/wrapper.cpp: In function `void
Scripting::create_squirrel_instance(SQVM*, Scripting::Level*, bool)':
src/scripting/wrapper.cpp:2162: error: invalid conversion from `int
(*)(void*, int)' to `SQInteger (*)(void*, SQInteger)'
src/scripting/wrapper.cpp:2162: error:   initializing argument 3 of
`void sq_setreleasehook(SQVM*, SQInteger, SQInteger (*)(void*, SQInteger))'

... cut away more of the same error (but different line numbers) ...


src/scripting/wrapper.cpp:2872: error: invalid conversion from `int
(*)(SQVM*)' to `SQInteger (*)(SQVM*)'
src/scripting/wrapper.cpp:2872: error:   initializing argument 2 of
`void sq_newclosure(SQVM*, SQInteger (*)(SQVM*), SQUnsignedInteger)'
src/scripting/wrapper.cpp:2878: error: invalid conversion from `int
(*)(SQVM*)' to `SQInteger (*)(SQVM*)'
src/scripting/wrapper.cpp:2878: error:   initializing argument 2 of
`void sq_newclosure(SQVM*, SQInteger (*)(SQVM*), SQUnsignedInteger)'
src/scripting/wrapper.cpp:2884: error: invalid conversion from `int
(*)(SQVM*)' to `SQInteger (*)(SQVM*)'
src/scripting/wrapper.cpp:2884: error:   initializing argument 2 of
`void sq_newclosure(SQVM*, SQInteger (*)(SQVM*), SQUnsignedInteger)'

    g++ -c -o
./build/x86_64-pc-linux-gnu/optimize/src/scripting/wrapper.o  -I.
-I./src -I/usr/include/SDL -D_REENTRANT  -pthread
-Isrc/squirrel/include -Isrc/squirrel -march=k8 -pipe -O2 -msse3
-D__x86_64__ -Wall -O3 -g -DAPPDATADIR='"/usr/local/share/supertux"'
src/scripting/wrapper.cpp

...failed C++
./build/x86_64-pc-linux-gnu/optimize/src/scripting/wrapper.o ...
...skipped supertux for lack of <T!src!scripting!>squirrel_util.o...
XGetText data/levels/bonus1/messages.pot
XGetText data/levels/bonus2/messages.pot
XGetText data/levels/misc/messages.pot
XGetText data/levels/test/messages.pot
XGetText data/levels/world1/messages.pot
XGetText data/levels/world2/messages.pot
XGetText data/locale/messages.pot
...failed updating 2 target(s)...
...skipped 1 target(s)...
...updated 208 target(s)...


The reason for the error is that on AMD64 a long is 8 bytes and not 4
bytes (according to a conversation with sik0fewl on IRC)
See also:
http://dev.gentoo.org/~plasmaroo/devmanual/archs/amd64#machine-word-sizes


Regards,

AnMaster


From jothesmo at gmail.com  Sun Apr 30 21:57:40 2006
From: jothesmo at gmail.com (Joth Esmo)
Date: Sun, 30 Apr 2006 15:57:40 -0400
Subject: [Supertux-devel] dev version bug
In-Reply-To: <445420A9.4040300@a-king.us>
References: <e5aaa77a0604261237u2a9a6d7cr623f170f5b246fd5@mail.gmail.com>
	 <44538934.1060103@a-king.us>
	 <e5aaa77a0604291142s424566e1of8386c50e3e412ca@mail.gmail.com>
	 <445420A9.4040300@a-king.us>
Message-ID: <e5aaa77a0604301257i340e4a8fy75a82952a827f382@mail.gmail.com>

Greetings,

Thanks for clearing everything up. Attached is random_generator.cpp
with the stderr file. In case you can't access it, here's the
important stuff:

==== srand(1146426740) (         0) RAND_MAX=7fff =====
ERROR: x=44551574, x0=0, RAND_MAX=7fff
Assertion failed: 0, file src/random_generator.cpp, line 77

Regards,
Joth

On 4/29/06, Allen King <allen at a-king.us> wrote:
> Joth,
>
>    Thanks for getting back to me so quickly, and with all the right data.
>
> There may have been a mis-understanding. The experiment I'm asking you to do
> is not to fix your problem, but to produce additional output in the failing
> mode that will help me isolate another suspected related problem.  (Below, I
> will tell you how to get the code to work, but not here.)
>
> So here are some points I want to make very clear. (Sorry if this is
> obvious, and I'm being blunt.):
>
> The newer version of the RandomGenerator::srand method code I sent you also
> fail.  I want it to.  As such, that line 72 of random_generator.cpp (the
> "assert(0);") fails is not a problem for this test, it is good.
> Line 68 should be of a form "if (x < RAND_MAX)" to duplicate the failure.
> In particular, it should not be modified to "if (x <= RAND_MAX)", or the
> failure may change or perhaps go away.  ACTION: change line 68 from "<="
> back to "<", so the failure will be replicated.
> I see no line like "==== srand(ddd) (ddd) RAND_MAX=xxx =====" (where ddd
> (xxx) are some decimal (hex) numbers) in your console output.  QUESTION:
> Double and tripple check. Did you perhaps not compile the changes, or not
> use the patched version when making the new console output?
> If the above gets you lines like "=====...." above in the console output,
> you're done, send be back the console and random_generator.cpp, and ignore
> this.  If still no such lines appear, I'm wondering if your console log is
> only monitoring things to standard error.  To get these printouts also on
> standard error, try changing the string "printf(" to "fprintf(stderr, ", in
> lines 67 and 71.  (You may or may not need to add a "#include <stdio.h>"
> line to compile properly.) At this point, the routine in question should
> look like the following:
> #include <stdio.h>
>
> int RandomGenerator::srand(int x)    {
>     int x0 = x;
>     while (x == 0)                          // random seed of zero means
>         x = time(0);                        // randomize with time
>     fprintf(stderr, "==== srand(%10d) (%10d) RAND_MAX=%x =====\n", x, x0,
> RAND_MAX);
>
>     if (x < RAND_MAX) {
>     }
>     else {                                  // only allow
> posative 31-bit seeds
>         fprintf(stderr, "ERROR: x=%x, x0=%x, RAND_MAX=%x\n", x, x0,
> RAND_MAX);
>
>         assert(0);
>     }
>     RandomGenerator::srandom(x);
>     return x;                               // let caller
> know seed used
> }
>
> When you get the line with the "====..." in it, send me back the same stuff
> as before, except don't bother with the config file -- it's good.
>
> If you can't get the "====..." line, try commenting out the assert(0) above,
> and replace the following routine:
>
> int RandomGenerator::rand(int v) {
>     assert(v != 0 && v <= RAND_MAX);
>     int rv = RandomGenerator::random();
>     printf("===x= rand(%10d) (%10d) RAND_MAX=%x =x====\n", v, rv, RAND_MAX);
>     fprintf(stderr, "==== rand(%10d) (%10d) RAND_MAX=%x =====\n", v, rv,
> RAND_MAX);
>     return rv % v;
> }
>
> Short of that, can I have VNC  access to your machine?  Hopefully it won't
> get to that!
>
>     Allen
>
> P.S.:  To run supertux, use the origional code (without any of the mods I've
> been feeding to you for debug), and comment out the "assert(x<RAND_MAX);"
> line.
>
> Joth Esmo wrote:
>
>
> int RandomGenerator::srand(int x)    {
>     int x0 = x;
>     while (x == 0)                          // random seed of zero means
>         x = time(0);                        // randomize with time
>     fprintf(stderr, "==== srand(%10d) (%10d) RAND_MAX=%x =====\n", x, x0,
> RAND_MAX);
>
>     if (x < RAND_MAX) {
>     }
>     else {                                  // only allow
> posative 31-bit seeds
>         fprintf(stderr, "ERROR: x=%x, x0=%x, RAND_MAX=%x\n", x, x0,
> RAND_MAX);
>
>         assert(0);
>     }
>     RandomGenerator::srandom(x);
>     return x;                               // let caller
> know seed used
> }
>
> When you get the line with the "====..." in it, send me back the same stuff
> as before, except don't bother with the config file -- it's good.
>
> If you can't get the "====..." line, try commenting out the assert(0) above,
> and replace the following routine:
>
> int RandomGenerator::rand(int v) {
>     assert(v != 0 && v <= RAND_MAX);
>     int rv = RandomGenerator::random();
>     printf("===x= rand(%10d) (%10d) RAND_MAX=%x =x====\n", v, rv, RAND_MAX);
>     fprintf(stderr, "==== rand(%10d) (%10d) RAND_MAX=%x =====\n", v, rv,
> RAND_MAX);
>     return rv % v;
> }
>
> Short of that, can I have VNC  access to your machine?  Hopefully it won't
> get to that!
>
>     Allen
>
> P.S.:  To run supertux, use the origional code (without any of the mods I've
> been feeding to you for debug), and comment out the "assert(x<RAND_MAX);"
> line.
>
> Joth Esmo wrote:
> I replaced the text in the .cpp file as you asked and compiled. The
> error log (stderr) is attached. Line 72 of random_generator.cpp seems
> to be the problem (the line being: assert(0);). Also attached is my
> ./supertux/config file. I start the application by opening MSYS,
> navigating to my supertux directory, and issuing the command
> 'supertux.exe -w' (as per the Building on Windows page on the wiki --
> however the -w has been recently removed).
>
> In your email, you asked for the patched version of random_seed.cpp. I
> assume you meant random_generator.cpp, which is attached.
>
> I'm not sure what you mean by 'capable of debug'. Should I debug it
> and then watch the value of the config variable? I didn't quite
> understand your meaning.
>
> PS> I changed the text in random_generator.cpp to read : x <= RAND_MAX
> (as you requested).
>
> Regards,
> Joth
>
> On 4/29/06, Allen King <allen at a-king.us> wrote:
> Joth,
>
> A new patch to fix that problem is in the works, and should be in svn
> shortly.  Should have been x <= RAND_MAX. For the moment, that line can be
> commented out, or the < changed to <= .
>
> But the fact that this problem happened at all is curious to me, and I
> suspect another bug lurking nearby.  In particular, I would like to
> understand what about your XP setup caused that assertion error.  If
> RAND_MAX is 0x7fffffff, the largest int32, it would be improbably that
> time(0) would generate that (unless it's not working).  Or perhaps RAND_MAX
> is smaller.
>
> If you can patch to the source code, would you replace the routine in
> random_generator.cpp with
> int RandomGenerator::srand(int x)    {
>     int x0 = x;
>     while (x == 0)                          // random seed of zero means
>         x = time(0);                        // randomize with time
>     printf("==== srand(%10d) (%10d) RAND_MAX=%x =====\n", x, x0, RAND_MAX);
>     if (x < RAND_MAX) {
>     }
>     else {                                  // only allow
> posative 31-bit
> seeds
>         printf("ERROR: x=%x, x0=%x, RAND_MAX=%x\n", x, x0, RAND_MAX);
>         assert(0);
>     }
>     RandomGenerator::srandom(x);
>     return x;                               // let caller
> know seed used
> }
> and recreate the failure.  Send me the command line used to invoke supertux,
> the failing printout (as you did), a copy of your ~/.supertux/config file,
> and the patched copy of random_seed.cpp.  If you are you capable of debug,
> the variable config->random_seed should be traced.  Is it RAND_MAX at the
> assertion failure?  Who sets it that?
>
> Thanks for your help on this.
>
>        Allen
>
>
> Jonathan Campbell wrote:
>
> Greetings I just finished compiling the development version of SuperTux (the
> newest build) and tried to launch it. However, it quits after showing a
> transparent window. The file stderr has the following: [INFO]
> src/main.cpp:195 [C:\Documents and
> Settings\Administrator\.supertux] is in the search path
> [INFO] src/main.cpp:195 [c:\msys\1.0\build\supertux\/data]
> is in the search path [INFO] src/main.cpp:429 Component 'controller'
> finished after 0.2 seconds [INFO] src/main.cpp:68 Couldn't load config file:
> Couldn't open file 'config': The system cannot find the file specified. ,
> using default settings [INFO] src/main.cpp:429 Component 'config' finished
> after 0 seconds [INFO] src/main.cpp:429 Component 'tinygettext' finished
> after 0.001 seconds [INFO] src/main.cpp:429 Component 'commandline' finished
> after 0 seconds [INFO] src/main.cpp:429 Component 'audio' finished after
> 0.202 seconds [INFO] src/main.cpp:429 Component 'video' finished after 0.278
> seconds [INFO] src/main.cpp:429 Component 'scripting' finished after 0.005
> seconds [DEBUG] src/tile_manager.cpp:47 Tiles loaded in 0.059 seconds [INFO]
> src/main.cpp:429 Component 'resources' finished after 0.236 seconds
> Assertion failed: x < RAND_MAX, file src/random_generator.cpp, line 57 I'm
> running Windows XP with all updates installed. To compile it, I followed the
> instructions on this page on the wiki:
> http://supertux.berlios.de/wiki/index.php/Building_on_Windows
> Any help would be appreciated. I'd really like to see this new version of
> SuperTux. Regards, Joth Esmo
> _______________________________________________
> Supertux-devel mailing list Supertux-devel at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/supertux-devel
>
>
>
>
> --
> Flarbland: Your one and only stop for cheats, articles, comedy and
> much, much more!
> http://flarbland.bravehost.com
> ________________________________
>
[INFO] src/main.cpp:195 [C:\Documents and
> Settings\HP_Administrator\.supertux] is in the search
> path
[INFO] src/main.cpp:195
> [c:\msys\1.0\build\supertux2\/data] is in the search
> path
[INFO] src/main.cpp:429 Component 'controller' finished after 0.2
> seconds
[WARNING]
> src/control/joystickkeyboardcontroller.cpp:192 Invalid
> button '0' in buttonmap
[WARNING]
> src/control/joystickkeyboardcontroller.cpp:192 Invalid
> button '1' in buttonmap
[INFO] src/main.cpp:429 Component 'config' finished
> after 0.021 seconds
[INFO] src/main.cpp:429 Component 'tinygettext' finished
> after 0 seconds
[INFO] src/main.cpp:429 Component 'commandline' finished
> after 0 seconds
[INFO] src/main.cpp:429 Component 'audio' finished after
> 0.302 seconds
[INFO] src/main.cpp:429 Component 'video' finished after 0.432
> seconds
[INFO] src/main.cpp:429 Component 'scripting' finished after 0.034
> seconds
[DEBUG] src/tile_manager.cpp:47 Tiles loaded in 0.057 seconds
[INFO]
> src/main.cpp:429 Component 'resources' finished after 0.217
> seconds
Assertion failed: 0, file src/random_generator.cpp, line 72

This
> application has requested the Runtime to terminate it in an unusual
> way.
Please contact the application's support team for more
> information.






> ________________________________
>
(supertux-config
 (show_fps #f)
 (cheats #f)
 (video
 (fullscreen #t)
> (width 800)
 (height 600)
 )
 (audio
 (sound_enabled #t)
 (music_enabled
> #t)
 )
 (control
 (keymap
 (map
 (key 13)
 (control "menu-select")
 )
 (map
> (key 19)
 (control "pause-menu")
 )
 (map
 (key 27)
 (control "pause-menu")
> )
 (map
 (key 94)
 (control "console")
 )
 (map
 (key 112)
 (control
> "pause-menu")
 )
 (map
 (key 271)
 (control "menu-select")
 )
 (map
 (key
> 273)
 (control "jump")
 )
 (map
 (key 274)
 (control "down")
 )
 (map
 (key
> 275)
 (control "right")
 )
 (map
 (key 276)
 (control "left")
 )
 (map
 (key
> 303)
 (control "up")
 )
 (map
 (key 304)
 (control "action")
 )
 )
> (joystick
 (use_hat #t)
 (axis_x 0)
 (axis_y 1)
 (dead_zone_x 1000)
> (dead_zone_y 1000)
 (map
 (button 0)
 (control "jump")
 )
 (map
 (button 1)
> (control "action")
 )
 )
 )
)





> ________________________________
>
// $Id: random_generator.cpp 3435 2006-04-26 02:13:42Z sik0fewl $
//
// A
> strong random number generator
//
// Copyright (C) 2006 Allen King
//
> Copyright (C) 2002 Michael Ringgaard. All rights reserved.
// Copyright (C)
> 1983, 1993 The Regents of the University of California.
//
// Redistribution
> and use in source and binary forms, with or without
// modification, are
> permitted provided that the following conditions
// are met:
//
// 1.
> Redistributions of source code must retain the above copyright
// notice,
> this list of conditions and the following disclaimer.
// 2. Redistributions
> in binary form must reproduce the above copyright
// notice, this list of
> conditions and the following disclaimer in the
// documentation and/or other
> materials provided with the distribution.
// 3. Neither the name of the
> project nor the names of its contributors
// may be used to endorse or
> promote products derived from this software
// without specific prior
> written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
> HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES,
> INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY
> AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL
> THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT,
> INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT
> NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE,
> DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY
> THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT
> (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF
> THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.

//
> Transliterated into C++ Allen King 060417, from sources on
//
> http://www.jbox.dk/sanos/source/lib/random.c.html



#include
> <stdexcept>
#include "random_generator.hpp"
#include
> "scripting/squirrel_util.hpp"

RandomGenerator systemRandom; // global
> random number generator

RandomGenerator::RandomGenerator()
> {
 assert(sizeof(int) >= 4);
 initialized = 0;
> initialize();
}

RandomGenerator::~RandomGenerator()
> {
}

/*int RandomGenerator::srand(int x) {
 while (x == 0) // random seed of
> zero means
 x = time(0); // randomize with time
 assert(x < RAND_MAX); //
> only allow posative 31-bit seeds
 assert(sizeof(int) >= 4);
 srandom(x);
> return x; // let caller know seed used
}*/

int RandomGenerator::srand(int
> x) {
 int x0 = x;
 while (x == 0) // random seed of zero means
 x = time(0);
> // randomize with time
 printf("==== srand(%10d) (%10d) RAND_MAX=%x
> =====\n", x, x0, RAND_MAX);
 if (x <= RAND_MAX) {
 }
 else { // only allow
> posative 31-bit seeds
 printf("ERROR: x=%x, x0=%x, RAND_MAX=%x\n", x, x0,
> RAND_MAX);
 assert(0);
 }
 RandomGenerator::srandom(x);
 return x; // let
> caller know seed used
}

int RandomGenerator::rand() { return random();
> }

int RandomGenerator::rand(int v) {
 assert(v != 0 && v <= RAND_MAX); //
> illegal arg: 0 or too big
 return RandomGenerator::random() % v;
}

int
> RandomGenerator::rand(int u, int v) {
 assert(v > u);
 return u +
> RandomGenerator::rand(v-u);
}

double RandomGenerator::randf(double v) {
> float rv;
 while ((rv = (double)RandomGenerator::random() /
> RAND_MAX * v) >= v)
 ; // never return v!
 return rv;
}

double
> RandomGenerator::randf(double u, double v) {
 return u +
> RandomGenerator::randf(v-u);
}

//-----------------------------------------------------------------------
//
>
// Copyright (C) 2002 Michael Ringgaard. All rights reserved.
// Copyright
> (C) 1983, 1993 The Regents of the University of California.
//
//
> Redistribution and use in source and binary forms, with or without
//
> modification, are permitted provided that the following conditions
// are
> met:
//
// 1. Redistributions of source code must retain the above
> copyright
// notice, this list of conditions and the following disclaimer.
>
// 2. Redistributions in binary form must reproduce the above copyright
//
> notice, this list of conditions and the following disclaimer in the
//
> documentation and/or other materials provided with the distribution.
// 3.
> Neither the name of the project nor the names of its contributors
// may be
> used to endorse or promote products derived from this software
// without
> specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE
> COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED
> WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF
> MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN
> NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY
> DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//
> DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//
> OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//
> HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
> STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
> ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
> POSSIBILITY OF
// SUCH DAMAGE.
//

//**#include <os.h>

//
// An improved
> random number generation package. In addition to the standard
//
> rand()/srand() like interface, this package also has a special state info
//
> interface. The initstate() routine is called with a seed, an array of
//
> bytes, and a count of how many bytes are being passed in; this array is
//
> then initialized to contain information for random number generation with
//
> that much state information. Good sizes for the amount of state
//
> information are 32, 64, 128, and 256 bytes. The state can be switched by
//
> calling the setstate() routine with the same array as was initiallized
//
> with initstate(). By default, the package runs with 128 bytes of state
//
> information and generates far better random numbers than a linear
//
> congruential generator. If the amount of state information is less than
//
> 32 bytes, a simple linear congruential R.N.G. is used.
//
// Internally, the
> state information is treated as an array of longs; the
// zeroeth element of
> the array is the type of R.N.G. being used (small
// integer); the remainder
> of the array is the state information for the
// R.N.G. Thus, 32 bytes of
> state information will give 7 longs worth of
// state information, which
> will allow a degree seven polynomial. (Note:
// the zeroeth word of state
> information also has some other information
// stored in it -- see
> setstate() for details).
//
// The random number generation technique is a
> linear feedback shift register
// approach, employing trinomials (since
> there are fewer terms to sum up that
// way). In this approach, the least
> significant bit of all the numbers in
// the state table will act as a
> linear feedback shift register, and will
// have period 2^deg - 1 (where deg
> is the degree of the polynomial being
// used, assuming that the polynomial
> is irreducible and primitive). The
// higher order bits will have longer
> periods, since their values are also
// influenced by pseudo-random carries
> out of the lower bits. The total
// period of the generator is approximately
> deg*(2**deg - 1); thus doubling
// the amount of state information has a
> vast influence on the period of the
// generator. Note: the deg*(2**deg - 1)
> is an approximation only good for
// large deg, when the period of the shift
> is the dominant factor.
// With deg equal to seven, the period is actually
> much longer than the
// 7*(2**7 - 1) predicted by this formula.
//
//
> Modified 28 December 1994 by Jacob S. Rosenberg.
//

//
// For each of the
> currently supported random number generators, we have a
// break value on
> the amount of state information (you need at least this
// many bytes of
> state info to support this random number generator), a degree
// for the
> polynomial (actually a trinomial) that the R.N.G. is based on, and
// the
> separation between the two lower order coefficients of the trinomial.

void
> RandomGenerator::initialize() {

#define NSHUFF 100 // To drop part of seed
> -> 1st value correlation

//static long degrees[MAX_TYPES] = { DEG_0, DEG_1,
> DEG_2, DEG_3, DEG_4 };
//static long seps [MAX_TYPES] = { SEP_0, SEP_1,
> SEP_2, SEP_3, SEP_4 };

 degrees[0] = DEG_0;
 degrees[1] = DEG_1;
> degrees[2] = DEG_2;
 degrees[3] = DEG_3;
 degrees[4] = DEG_4;

 seps [0] =
> SEP_0;
 seps [1] = SEP_1;
 seps [2] = SEP_2;
 seps [3] = SEP_3;
 seps [4] =
> SEP_4;

//
// Initially, everything is set up as if from:
//
// initstate(1,
> randtbl, 128);
//
// Note that this initialization takes advantage of the
> fact that srandom()
// advances the front and rear pointers 10*rand_deg
> times, and hence the
// rear pointer which starts at 0 will also end up at
> zero; thus the zeroeth
// element of the state information, which contains
> info about the current
// position of the rear pointer is just
//
//
> MAX_TYPES * (rptr - state) + TYPE_3 == TYPE_3.

 randtbl[ 0] = TYPE_3;
> randtbl[ 1] = 0x991539b1;
 randtbl[ 2] = 0x16a5bce3;
 randtbl[ 3] =
> 0x6774a4cd;
 randtbl[ 4] = 0x3e01511e;
 randtbl[ 5] = 0x4e508aaa;
 randtbl[
> 6] = 0x61048c05;
 randtbl[ 7] = 0xf5500617;
 randtbl[ 8] = 0x846b7115;
> randtbl[ 9] = 0x6a19892c;
 randtbl[10] = 0x896a97af;
 randtbl[11] =
> 0xdb48f936;
 randtbl[12] = 0x14898454;
 randtbl[13] = 0x37ffd106;
> randtbl[14] = 0xb58bff9c;
 randtbl[15] = 0x59e17104;
 randtbl[16] =
> 0xcf918a49;
 randtbl[17] = 0x09378c83;
 randtbl[18] = 0x52c7a471;
> randtbl[19] = 0x8d293ea9;
 randtbl[20] = 0x1f4fc301;
 randtbl[21] =
> 0xc3db71be;
 randtbl[22] = 0x39b44e1c;
 randtbl[23] = 0xf8a44ef9;
> randtbl[24] = 0x4c8b80b1;
 randtbl[25] = 0x19edc328;
 randtbl[26] =
> 0x87bf4bdd;
 randtbl[27] = 0xc9b240e5;
 randtbl[28] = 0xe9ee4b1b;
> randtbl[29] = 0x4382aee7;
 randtbl[30] = 0x535b6b41;
 randtbl[31] =
> 0xf3bec5da;

// static long randtbl[DEG_3 + 1] =
// {
// TYPE_3;
//
> 0x991539b1, 0x16a5bce3, 0x6774a4cd, 0x3e01511e, 0x4e508aaa, 0x61048c05,
//
> 0xf5500617, 0x846b7115, 0x6a19892c, 0x896a97af, 0xdb48f936, 0x14898454,
//
> 0x37ffd106, 0xb58bff9c, 0x59e17104, 0xcf918a49, 0x09378c83, 0x52c7a471,
//
> 0x8d293ea9, 0x1f4fc301, 0xc3db71be, 0x39b44e1c, 0xf8a44ef9, 0x4c8b80b1,
//
> 0x19edc328, 0x87bf4bdd, 0xc9b240e5, 0xe9ee4b1b, 0x4382aee7, 0x535b6b41,
//
> 0xf3bec5da
// };


//
// fptr and rptr are two pointers into the state info,
> a front and a rear
// pointer. These two pointers are always rand_sep places
> aparts, as they
// cycle cyclically through the state information. (Yes,
> this does mean we
// could get away with just one pointer, but the code for
> random() is more
// efficient this way). The pointers are left positioned as
> they would be
// from the call
//
// initstate(1, randtbl, 128);
//
// (The
> position of the rear pointer, rptr, is really 0 (as explained above
// in
> the initialization of randtbl) because the state table pointer is set
// to
> point to randtbl[1] (as explained below).
//

 fptr = &randtbl[SEP_3 + 1];
> rptr = &randtbl[1];

//
// The following things are the pointer to the state
> information table, the
// type of the current generator, the degree of the
> current polynomial being
// used, and the separation between the two
> pointers. Note that for efficiency
// of random(), we remember the first
> location of the state information, not
// the zeroeth. Hence it is valid to
> access state[-1], which is used to
// store the type of the R.N.G. Also, we
> remember the last location, since
// this is more efficient than indexing
> every time to find the address of
// the last element to see if the front
> and rear pointers have wrapped.
//

 state = &randtbl[1];
 rand_type =
> TYPE_3;
 rand_deg = DEG_3;
 rand_sep = SEP_3;
 end_ptr = &randtbl[DEG_3 +
> 1];

}

//
// Compute x = (7^5 * x) mod (2^31 - 1)
// wihout overflowing 31
> bits:
// (2^31 - 1) = 127773 * (7^5) + 2836
// From "Random number
> generators: good ones are hard to find",
// Park and Miller, Communications
> of the ACM, vol. 31, no. 10,
// October 1988, p. 1195.
//

__inline static
> long good_rand(long x)
{
 long hi, lo;

 // Can't be initialized with 0, so
> use another value.
 if (x == 0) x = 123459876;
 hi = x / 127773;
 lo = x %
> 127773;
 x = 16807 * lo - 2836 * hi;
 if (x < 0) x += 0x7fffffff;
 return
> x;
}

//
// srandom
//
// Initialize the random number generator based on
> the given seed. If the
// type is the trivial no-state-information type,
> just remember the seed.
// Otherwise, initializes state[] based on the given
> "seed" via a linear
// congruential generator. Then, the pointers are set to
> known locations
// that are exactly rand_sep places apart. Lastly, it cycles
> the state
// information a given number of times to get rid of any initial
> dependencies
// introduced by the L.C.R.N.G. Note that the initialization of
> randtbl[]
// for default usage relies on values produced by this
> routine.

void RandomGenerator::srandom(unsigned long x)
{
> long i, lim;

 state[0] = x;
 if (rand_type == TYPE_0)
 lim = NSHUFF;
 else
>
 {
 for (i = 1; i < rand_deg; i++) state[i] = good_rand(state[i - 1]);
> fptr = &state[rand_sep];
 rptr = &state[0];
 lim = 10 * rand_deg;
 }

> initialized = 1;
 for (i = 0; i < lim; i++) random();
}

#ifdef
> NOT_FOR_SUPERTUX // use in supertux doesn't require these methods,
 // which
> are not portable to as many platforms as
 // SDL. The cost is that the
> variability of the
 // initial seed is reduced to only 32 bits of
 //
> randomness, seemingly enough. PAK 060420
//
// srandomdev
//
// Many
> programs choose the seed value in a totally predictable manner.
// This
> often causes problems. We seed the generator using the much more
// secure
> random() interface. Note that this particular seeding
// procedure can
> generate states which are impossible to reproduce by
// calling srandom()
> with any value, since the succeeding terms in the
// state buffer are no
> longer derived from the LC algorithm applied to
// a fixed seed.

void
> RandomGenerator::srandomdev()
{
 int fd, done;
 size_t len;

 if (rand_type
> == TYPE_0)
 len = sizeof state[0];
 else
 len = rand_deg * sizeof
> state[0];

 done = 0;
 fd = open("/dev/urandom", O_RDONLY);
 if (fd >= 0)
> {
 if (read(fd, state, len) == len) done = 1;
 close(fd);
 }

 if (!done)
> {
 struct timeval tv;

 gettimeofday(&tv, NULL);
 srandom(tv.tv_sec ^
> tv.tv_usec);
 return;
 }

 if (rand_type != TYPE_0)
 {
 fptr =
> &state[rand_sep];
 rptr = &state[0];
 }
 initialized = 1;
}

//
//
> initstate
//
// Initialize the state information in the given array of n
> bytes for future
// random number generation. Based on the number of bytes
> we are given, and
// the break values for the different R.N.G.'s, we choose
> the best (largest)
// one we can and set things up for it. srandom() is then
> called to
// initialize the state information.
//
// Note that on return
> from srandom(), we set state[-1] to be the type
// multiplexed with the
> current value of the rear pointer; this is so
// successive calls to
> initstate() won't lose this information and will be
// able to restart with
> setstate().
//
// Note: the first thing we do is save the current state, if
> any, just like
// setstate() so that it doesn't matter when initstate is
> called.
//
// Returns a pointer to the old state.
//

char *
> RandomGenerator::initstate(unsigned long seed, char
> *arg_state, long n)
{
 char *ostate = (char *) (&state[-1]);
 long
> *long_arg_state = (long *) arg_state;

 if (rand_type == TYPE_0)
 state[-1]
> = rand_type;
 else
 state[-1] = MAX_TYPES * (rptr - state) + rand_type;

 if
> (n < BREAK_0) return NULL;

 if (n < BREAK_1)
 {
 rand_type = TYPE_0;
> rand_deg = DEG_0;
 rand_sep = SEP_0;
 }
 else if (n < BREAK_2)
 {
> rand_type = TYPE_1;
 rand_deg = DEG_1;
 rand_sep = SEP_1;
 }
 else if (n <
> BREAK_3)
 {
 rand_type = TYPE_2;
 rand_deg = DEG_2;
 rand_sep = SEP_2;
 }
> else if (n < BREAK_4)
 {
 rand_type = TYPE_3;
 rand_deg = DEG_3;
 rand_sep
> = SEP_3;
 }
 else
 {
 rand_type = TYPE_4;
 rand_deg = DEG_4;
 rand_sep =
> SEP_4;
 }

 state = (long *) (long_arg_state + 1); // First location
> end_ptr = &state[rand_deg]; // Must set end_ptr before srandom
> srandom(seed);

 if (rand_type == TYPE_0)
 long_arg_state[0] = rand_type;
> else
 long_arg_state[0] = MAX_TYPES * (rptr - state) + rand_type;

> initialized = 1;
 return ostate;
}

//
// setstate
//
// Restore the state
> from the given state array.
//
// Note: it is important that we also
> remember the locations of the pointers
// in the current state information,
> and restore the locations of the pointers
// from the old state information.
> This is done by multiplexing the pointer
// location into the zeroeth word
> of the state information.
//
// Note that due to the order in which things
> are done, it is OK to call
// setstate() with the same state as the current
> state.
//
// Returns a pointer to the old state information.
//

char *
> RandomGenerator::setstate(char *arg_state)
{
 long *new_state = (long *)
> arg_state;
 long type = new_state[0] % MAX_TYPES;
 long rear = new_state[0]
> / MAX_TYPES;
 char *ostate = (char *) (&state[-1]);

 if (rand_type ==
> TYPE_0)
 state[-1] = rand_type;
 else
 state[-1] = MAX_TYPES * (rptr -
> state) + rand_type;

 switch(type)
 {
 case TYPE_0:
 case TYPE_1:
 case
> TYPE_2:
 case TYPE_3:
 case TYPE_4:
 rand_type = type;
 rand_deg =
> degrees[type];
 rand_sep = seps[type];
 break;
 }

 state = (long *)
> (new_state + 1);
 if (rand_type != TYPE_0)
 {
 rptr = &state[rear];
 fptr =
> &state[(rear + rand_sep) % rand_deg];
 }
 end_ptr = &state[rand_deg]; // Set
> end_ptr too

 initialized = 1;
 return ostate;
}
#endif
> //NOT_FOR_SUPERTUX
//
// random:
//
// If we are using the trivial TYPE_0
> R.N.G., just do the old linear
// congruential bit. Otherwise, we do our
> fancy trinomial stuff, which is
// the same in all the other cases due to
> all the global variables that have
// been set up. The basic operation is to
> add the number at the rear pointer
// into the one at the front pointer.
> Then both pointers are advanced to
// the next location cyclically in the
> table. The value returned is the sum
// generated, reduced to 31 bits by
> throwing away the "least random" low bit.
//
// Note: the code takes
> advantage of the fact that both the front and
// rear pointers can't wrap on
> the same call by not testing the rear
// pointer if the front one has
> wrapped.
//
// Returns a 31-bit random number.
//

long
> RandomGenerator::random()
{
 long i;
 long *f, *r;
 if (!initialized) {
> throw std::runtime_error("uninitialized RandomGenerator
> object");
 }

 if (rand_type == TYPE_0)
 {
 i = state[0];
 state[0] = i =
> (good_rand(i)) & 0x7fffffff;
 }
 else
 {
 f = fptr; r = rptr;
 *f += *r;
> i = (*f >> 1) & 0x7fffffff; // Chucking least random bit
 if (++f >=
> end_ptr)
 {
 f = state;
 ++r;
 }
 else if (++r >= end_ptr)
 r = state;

> fptr = f; rptr = r;
 }

 return i;
}


>


--
Flarbland: Your one and only stop for cheats, articles, comedy and
much, much more!
http://flarbland.bravehost.com
-------------- next part --------------
[INFO] src/main.cpp:195 [C:\Documents and Settings\HP_Administrator\.supertux] is in the search path
[INFO] src/main.cpp:195 [c:\msys\1.0\build\supertux2\/data] is in the search path
[INFO] src/main.cpp:429 Component 'controller' finished after 0.2 seconds
[WARNING] src/control/joystickkeyboardcontroller.cpp:192 Invalid button '0' in buttonmap
[WARNING] src/control/joystickkeyboardcontroller.cpp:192 Invalid button '1' in buttonmap
[INFO] src/main.cpp:429 Component 'config' finished after 0.003 seconds
[INFO] src/main.cpp:429 Component 'tinygettext' finished after 0.001 seconds
[INFO] src/main.cpp:429 Component 'commandline' finished after 0 seconds
[INFO] src/main.cpp:429 Component 'audio' finished after 0.335 seconds
[INFO] src/main.cpp:429 Component 'video' finished after 5.476 seconds
[INFO] src/main.cpp:429 Component 'scripting' finished after 0.236 seconds
[DEBUG] src/tile_manager.cpp:47 Tiles loaded in 0.463 seconds
[INFO] src/main.cpp:429 Component 'resources' finished after 3.552 seconds
==== srand(1146426740) (         0) RAND_MAX=7fff =====
ERROR: x=44551574, x0=0, RAND_MAX=7fff
Assertion failed: 0, file src/random_generator.cpp, line 77

This application has requested the Runtime to terminate it in an unusual way.
Please contact the application's support team for more information.
-------------- next part --------------
// $Id: random_generator.cpp 3435 2006-04-26 02:13:42Z sik0fewl $
// 
// A strong random number generator
//
// Copyright (C) 2006 Allen King
// Copyright (C) 2002 Michael Ringgaard. All rights reserved.
// Copyright (C) 1983, 1993 The Regents of the University of California.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 
// 1. Redistributions of source code must retain the above copyright 
//    notice, this list of conditions and the following disclaimer.  
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.  
// 3. Neither the name of the project nor the names of its contributors
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission. 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
// SUCH DAMAGE.

// Transliterated into C++ Allen King 060417, from sources on
//          http://www.jbox.dk/sanos/source/lib/random.c.html



#include <stdexcept>
#include <stdio.h>
#include "random_generator.hpp"
#include "scripting/squirrel_util.hpp"

RandomGenerator systemRandom;               // global random number generator

RandomGenerator::RandomGenerator() {
    assert(sizeof(int) >= 4);
    initialized = 0;
    initialize();
}

RandomGenerator::~RandomGenerator() {
}

/*int RandomGenerator::srand(int x)    {
    while (x == 0)                          // random seed of zero means
        x = time(0);                        // randomize with time
    assert(x < RAND_MAX);                   // only allow posative 31-bit seeds
    assert(sizeof(int) >= 4);
    srandom(x);
    return x;                               // let caller know seed used
}*/

int RandomGenerator::srand(int x)    {
    int x0 = x;
    while (x == 0)                          // random seed of zero means
        x = time(0);                        // randomize with time

    fprintf(stderr, "==== srand(%10d) (%10d) RAND_MAX=%x =====\n", x, x0, RAND_MAX);

    if (x < RAND_MAX) {
    }
    else {                                  // only allow positive 31-bit seeds

        fprintf(stderr, "ERROR: x=%x, x0=%x, RAND_MAX=%x\n", x, x0, RAND_MAX);

        assert(0);
    }
    RandomGenerator::srandom(x);
    return x;                               // let caller know seed used
}

int RandomGenerator::rand()                 {        return random();    }

int RandomGenerator::rand(int v) {
    assert(v != 0 && v <= RAND_MAX);        // illegal arg: 0 or too big
    return RandomGenerator::random() % v;
}

int RandomGenerator::rand(int u, int v) {
    assert(v > u);    
    return u + RandomGenerator::rand(v-u);
}

double RandomGenerator::randf(double v) {
    float rv;
    while ((rv = (double)RandomGenerator::random() / RAND_MAX * v) >= v)
        ;                                   // never return v!
    return rv;
}

double RandomGenerator::randf(double u, double v) {
    return u + RandomGenerator::randf(v-u);
}

//-----------------------------------------------------------------------
//        
// Copyright (C) 2002 Michael Ringgaard. All rights reserved.
// Copyright (C) 1983, 1993 The Regents of the University of California.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 
// 1. Redistributions of source code must retain the above copyright 
//    notice, this list of conditions and the following disclaimer.  
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.  
// 3. Neither the name of the project nor the names of its contributors
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission. 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
// SUCH DAMAGE.
// 

//**#include <os.h>

//
// An improved random number generation package.  In addition to the standard
// rand()/srand() like interface, this package also has a special state info
// interface.  The initstate() routine is called with a seed, an array of
// bytes, and a count of how many bytes are being passed in; this array is
// then initialized to contain information for random number generation with
// that much state information.  Good sizes for the amount of state
// information are 32, 64, 128, and 256 bytes.  The state can be switched by
// calling the setstate() routine with the same array as was initiallized
// with initstate().  By default, the package runs with 128 bytes of state
// information and generates far better random numbers than a linear
// congruential generator.  If the amount of state information is less than
// 32 bytes, a simple linear congruential R.N.G. is used.
//
// Internally, the state information is treated as an array of longs; the
// zeroeth element of the array is the type of R.N.G. being used (small
// integer); the remainder of the array is the state information for the
// R.N.G.  Thus, 32 bytes of state information will give 7 longs worth of
// state information, which will allow a degree seven polynomial.  (Note:
// the zeroeth word of state information also has some other information
// stored in it -- see setstate() for details).
//
// The random number generation technique is a linear feedback shift register
// approach, employing trinomials (since there are fewer terms to sum up that
// way).  In this approach, the least significant bit of all the numbers in
// the state table will act as a linear feedback shift register, and will
// have period 2^deg - 1 (where deg is the degree of the polynomial being
// used, assuming that the polynomial is irreducible and primitive).  The
// higher order bits will have longer periods, since their values are also
// influenced by pseudo-random carries out of the lower bits.  The total
// period of the generator is approximately deg*(2**deg - 1); thus doubling
// the amount of state information has a vast influence on the period of the
// generator.  Note: the deg*(2**deg - 1) is an approximation only good for
// large deg, when the period of the shift is the dominant factor.
// With deg equal to seven, the period is actually much longer than the
// 7*(2**7 - 1) predicted by this formula.
//
// Modified 28 December 1994 by Jacob S. Rosenberg.
//

//
// For each of the currently supported random number generators, we have a
// break value on the amount of state information (you need at least this
// many bytes of state info to support this random number generator), a degree
// for the polynomial (actually a trinomial) that the R.N.G. is based on, and
// the separation between the two lower order coefficients of the trinomial.

void RandomGenerator::initialize() {

#define NSHUFF 100      // To drop part of seed -> 1st value correlation

//static long degrees[MAX_TYPES] = { DEG_0, DEG_1, DEG_2, DEG_3, DEG_4 };
//static long seps [MAX_TYPES] = { SEP_0, SEP_1, SEP_2, SEP_3, SEP_4 };

    degrees[0] = DEG_0;
    degrees[1] = DEG_1;
    degrees[2] = DEG_2;
    degrees[3] = DEG_3;
    degrees[4] = DEG_4;

    seps [0] = SEP_0;
    seps [1] = SEP_1;
    seps [2] = SEP_2;
    seps [3] = SEP_3;
    seps [4] = SEP_4;

//
// Initially, everything is set up as if from:
//
//  initstate(1, randtbl, 128);
//
// Note that this initialization takes advantage of the fact that srandom()
// advances the front and rear pointers 10*rand_deg times, and hence the
// rear pointer which starts at 0 will also end up at zero; thus the zeroeth
// element of the state information, which contains info about the current
// position of the rear pointer is just
//
//  MAX_TYPES * (rptr - state) + TYPE_3 == TYPE_3.

    randtbl[ 0] =  TYPE_3;
    randtbl[ 1] =  0x991539b1;
    randtbl[ 2] =  0x16a5bce3;
    randtbl[ 3] =  0x6774a4cd;
    randtbl[ 4] =  0x3e01511e;
    randtbl[ 5] =  0x4e508aaa;
    randtbl[ 6] =  0x61048c05;
    randtbl[ 7] =  0xf5500617;
    randtbl[ 8] =  0x846b7115;
    randtbl[ 9] =  0x6a19892c;
    randtbl[10] =  0x896a97af;
    randtbl[11] =  0xdb48f936;
    randtbl[12] =  0x14898454;
    randtbl[13] =  0x37ffd106;
    randtbl[14] =  0xb58bff9c;
    randtbl[15] =  0x59e17104;
    randtbl[16] =  0xcf918a49;
    randtbl[17] =  0x09378c83;
    randtbl[18] =  0x52c7a471;
    randtbl[19] =  0x8d293ea9;
    randtbl[20] =  0x1f4fc301;
    randtbl[21] =  0xc3db71be;
    randtbl[22] =  0x39b44e1c;
    randtbl[23] =  0xf8a44ef9;
    randtbl[24] =  0x4c8b80b1;
    randtbl[25] =  0x19edc328;
    randtbl[26] =  0x87bf4bdd;
    randtbl[27] =  0xc9b240e5;
    randtbl[28] =  0xe9ee4b1b;
    randtbl[29] =  0x4382aee7;
    randtbl[30] =  0x535b6b41;
    randtbl[31] =  0xf3bec5da;

// static long randtbl[DEG_3 + 1] = 
// {
//   TYPE_3;
//   0x991539b1, 0x16a5bce3, 0x6774a4cd, 0x3e01511e, 0x4e508aaa, 0x61048c05,
//   0xf5500617, 0x846b7115, 0x6a19892c, 0x896a97af, 0xdb48f936, 0x14898454,
//   0x37ffd106, 0xb58bff9c, 0x59e17104, 0xcf918a49, 0x09378c83, 0x52c7a471,
//   0x8d293ea9, 0x1f4fc301, 0xc3db71be, 0x39b44e1c, 0xf8a44ef9, 0x4c8b80b1,
//   0x19edc328, 0x87bf4bdd, 0xc9b240e5, 0xe9ee4b1b, 0x4382aee7, 0x535b6b41,
//   0xf3bec5da
// };


//
// fptr and rptr are two pointers into the state info, a front and a rear
// pointer.  These two pointers are always rand_sep places aparts, as they
// cycle cyclically through the state information.  (Yes, this does mean we
// could get away with just one pointer, but the code for random() is more
// efficient this way).  The pointers are left positioned as they would be
// from the call
//
//  initstate(1, randtbl, 128);
//
// (The position of the rear pointer, rptr, is really 0 (as explained above
// in the initialization of randtbl) because the state table pointer is set
// to point to randtbl[1] (as explained below).
//

    fptr = &randtbl[SEP_3 + 1];
    rptr = &randtbl[1];

//
// The following things are the pointer to the state information table, the
// type of the current generator, the degree of the current polynomial being
// used, and the separation between the two pointers.  Note that for efficiency
// of random(), we remember the first location of the state information, not
// the zeroeth.  Hence it is valid to access state[-1], which is used to
// store the type of the R.N.G.  Also, we remember the last location, since
// this is more efficient than indexing every time to find the address of
// the last element to see if the front and rear pointers have wrapped.
//

    state = &randtbl[1];
    rand_type = TYPE_3;
    rand_deg = DEG_3;
    rand_sep = SEP_3;
    end_ptr = &randtbl[DEG_3 + 1];

}

//
// Compute x = (7^5 * x) mod (2^31 - 1)
// wihout overflowing 31 bits:
//      (2^31 - 1) = 127773 * (7^5) + 2836
// From "Random number generators: good ones are hard to find",
// Park and Miller, Communications of the ACM, vol. 31, no. 10,
// October 1988, p. 1195.
//

__inline static long good_rand(long x)
{
  long hi, lo;

  // Can't be initialized with 0, so use another value.
  if (x == 0) x = 123459876;
  hi = x / 127773;
  lo = x % 127773;
  x = 16807 * lo - 2836 * hi;
  if (x < 0) x += 0x7fffffff;
  return x;
}

//
// srandom
//
// Initialize the random number generator based on the given seed.  If the
// type is the trivial no-state-information type, just remember the seed.
// Otherwise, initializes state[] based on the given "seed" via a linear
// congruential generator.  Then, the pointers are set to known locations
// that are exactly rand_sep places apart.  Lastly, it cycles the state
// information a given number of times to get rid of any initial dependencies
// introduced by the L.C.R.N.G.  Note that the initialization of randtbl[]
// for default usage relies on values produced by this routine.

void RandomGenerator::srandom(unsigned long x)
{
  long i, lim;

  state[0] = x;
  if (rand_type == TYPE_0)
    lim = NSHUFF;
  else 
  {
    for (i = 1; i < rand_deg; i++) state[i] = good_rand(state[i - 1]);
    fptr = &state[rand_sep];
    rptr = &state[0];
    lim = 10 * rand_deg;
  }

  initialized = 1;
  for (i = 0; i < lim; i++) random();
}

#ifdef NOT_FOR_SUPERTUX     // use in supertux doesn't require these methods,
                            // which are not portable to as many platforms as
                            // SDL.  The cost is that the variability of the
                            // initial seed is reduced to only 32 bits of
                            // randomness, seemingly enough. PAK 060420
//
// srandomdev
//
// Many programs choose the seed value in a totally predictable manner.
// This often causes problems.  We seed the generator using the much more
// secure random() interface.  Note that this particular seeding
// procedure can generate states which are impossible to reproduce by
// calling srandom() with any value, since the succeeding terms in the
// state buffer are no longer derived from the LC algorithm applied to
// a fixed seed.

void RandomGenerator::srandomdev()
{
  int fd, done;
  size_t len;

  if (rand_type == TYPE_0)
    len = sizeof state[0];
  else
    len = rand_deg * sizeof state[0];

  done = 0;
  fd = open("/dev/urandom", O_RDONLY);
  if (fd >= 0) 
   {
     if (read(fd, state, len) == len) done = 1;
     close(fd);
   }

  if (!done) 
  {
    struct timeval tv;

    gettimeofday(&tv, NULL);
    srandom(tv.tv_sec ^ tv.tv_usec);
    return;
  }

  if (rand_type != TYPE_0) 
  {
    fptr = &state[rand_sep];
    rptr = &state[0];
  }
  initialized = 1;
}

//
// initstate
//
// Initialize the state information in the given array of n bytes for future
// random number generation.  Based on the number of bytes we are given, and
// the break values for the different R.N.G.'s, we choose the best (largest)
// one we can and set things up for it.  srandom() is then called to
// initialize the state information.
//
// Note that on return from srandom(), we set state[-1] to be the type
// multiplexed with the current value of the rear pointer; this is so
// successive calls to initstate() won't lose this information and will be
// able to restart with setstate().
//
// Note: the first thing we do is save the current state, if any, just like
// setstate() so that it doesn't matter when initstate is called.
//
// Returns a pointer to the old state.
//

char * RandomGenerator::initstate(unsigned long seed, char *arg_state, long n)
{
  char *ostate = (char *) (&state[-1]);
  long *long_arg_state = (long *) arg_state;

  if (rand_type == TYPE_0)
    state[-1] = rand_type;
  else
    state[-1] = MAX_TYPES * (rptr - state) + rand_type;

  if (n < BREAK_0) return NULL;

  if (n < BREAK_1) 
  {
    rand_type = TYPE_0;
    rand_deg = DEG_0;
    rand_sep = SEP_0;
  } 
  else if (n < BREAK_2) 
  {
    rand_type = TYPE_1;
    rand_deg = DEG_1;
    rand_sep = SEP_1;
  } 
  else if (n < BREAK_3) 
  {
    rand_type = TYPE_2;
    rand_deg = DEG_2;
    rand_sep = SEP_2;
  } 
  else if (n < BREAK_4) 
  {
    rand_type = TYPE_3;
    rand_deg = DEG_3;
    rand_sep = SEP_3;
  } 
  else 
  {
    rand_type = TYPE_4;
    rand_deg = DEG_4;
    rand_sep = SEP_4;
  }
  
  state = (long *) (long_arg_state + 1); // First location
  end_ptr = &state[rand_deg]; // Must set end_ptr before srandom
  srandom(seed);

  if (rand_type == TYPE_0)
    long_arg_state[0] = rand_type;
  else
    long_arg_state[0] = MAX_TYPES * (rptr - state) + rand_type;

  initialized = 1;
  return ostate;
}

//
// setstate
//
// Restore the state from the given state array.
//
// Note: it is important that we also remember the locations of the pointers
// in the current state information, and restore the locations of the pointers
// from the old state information.  This is done by multiplexing the pointer
// location into the zeroeth word of the state information.
//
// Note that due to the order in which things are done, it is OK to call
// setstate() with the same state as the current state.
//
// Returns a pointer to the old state information.
//

char * RandomGenerator::setstate(char *arg_state)
{
  long *new_state = (long *) arg_state;
  long type = new_state[0] % MAX_TYPES;
  long rear = new_state[0] / MAX_TYPES;
  char *ostate = (char *) (&state[-1]);

  if (rand_type == TYPE_0)
    state[-1] = rand_type;
  else
    state[-1] = MAX_TYPES * (rptr - state) + rand_type;

  switch(type) 
  {
    case TYPE_0:
    case TYPE_1:
    case TYPE_2:
    case TYPE_3:
    case TYPE_4:
      rand_type = type;
      rand_deg = degrees[type];
      rand_sep = seps[type];
      break;
  }

  state = (long *) (new_state + 1);
  if (rand_type != TYPE_0) 
  {
    rptr = &state[rear];
    fptr = &state[(rear + rand_sep) % rand_deg];
  }
  end_ptr = &state[rand_deg];   // Set end_ptr too

  initialized = 1;
  return ostate;
}
#endif //NOT_FOR_SUPERTUX
//
// random:
//
// If we are using the trivial TYPE_0 R.N.G., just do the old linear
// congruential bit.  Otherwise, we do our fancy trinomial stuff, which is
// the same in all the other cases due to all the global variables that have
// been set up.  The basic operation is to add the number at the rear pointer
// into the one at the front pointer.  Then both pointers are advanced to
// the next location cyclically in the table.  The value returned is the sum
// generated, reduced to 31 bits by throwing away the "least random" low bit.
//
// Note: the code takes advantage of the fact that both the front and
// rear pointers can't wrap on the same call by not testing the rear
// pointer if the front one has wrapped.
//
// Returns a 31-bit random number.
//

long RandomGenerator::random()
{
  long i;
  long *f, *r;
  if (!initialized) {
      throw std::runtime_error("uninitialized RandomGenerator object");
  }

  if (rand_type == TYPE_0) 
  {
    i = state[0];
    state[0] = i = (good_rand(i)) & 0x7fffffff;
  } 
  else 
  {
    f = fptr; r = rptr;
    *f += *r;
    i = (*f >> 1) & 0x7fffffff; // Chucking least random bit
    if (++f >= end_ptr) 
    {
      f = state;
      ++r;
    }
    else if (++r >= end_ptr) 
      r = state;

    fptr = f; rptr = r;
  }

  return i;
}

From sandyp at yhti.net  Sun Apr 30 23:08:03 2006
From: sandyp at yhti.net (Sandy Perkins)
Date: Sun, 30 Apr 2006 16:08:03 -0500
Subject: [Supertux-devel] Milestone II
Message-ID: <!~!UENERkVCMDkAAQACAAAAAAAAAAAAAAAAABgAAAAAAAAADNo4nZeB4E6d8FreyWOpiMKAAAAQAAAAiKmcm7wLFUuPsU9XYbq6jwEAAAAA@yhti.net>

Hi, Supertux people.  Any news on when Milestone II is coming out?

 

David P

perkworks at yhti.net

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/supertux-devel/attachments/20060430/11f92461/attachment.html>

